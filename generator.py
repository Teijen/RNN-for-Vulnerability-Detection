#!/usr/bin/env python3
import os

def writeToFile(headers, declarations, functions):

    # Create seed to choose random subset of functions 

    f = open("test_file.c", "w+")
    # Write headers 
    for i in range(len(headers)):
        f.write(headers[i])
    f.write('\n')
    # Write declarations 
    for i in range(len(declarations)):
        f.write(declarations[i])

    f.write('\n')
    # Write functions 
    for i in range(len(functions)):
        for j in range(len(functions[i])):
            f.write(functions[i][j])
        f.write('\n')
    # Close file 
    f.close()

def readFile(path):
    f = open(path, "r")
    if f.mode == 'r':
        lines = f.readlines()

    f.close()
    return lines 

def exportDeclarations(lines):
    declarations = []

    # find indexes where the function declacations recide
    start_function_declaration = lines.index('/*Start declalaction*/\n') + 1
    end_function_declaration = lines.index('/*End declalaction*/\n') 

    # append source code to declaration list  
    for i in range(start_function_declaration,end_function_declaration):
        declarations.append(lines[i])

    return declarations 

def exportFullFunctions(lines):
   
    function_start_indexes = []
    function_end_indexes = []
    full_functions = []
    
    # Used comments as tokens to help lookup indexes in lines
    substrStart = 'funcstart'
    substrEnd = 'funcend'

    # Find start and end lines for functions 
    for index, line in enumerate(lines):
        if substrStart in line:
            function_start_indexes.append(index+1)
        if substrEnd in line:
            function_end_indexes.append(index)

    # append full methods to list
    for i in range(len(function_start_indexes)):
        tmpList = []
        for j in range(function_start_indexes[i], function_end_indexes[i]):
            tmpList.append(lines[j])
        full_functions.append(tmpList) 

    return full_functions


if __name__=="__main__":

    headers = '#include <stdio.h>\n#include <string.h>\n'
    
    lines = readFile("vulnerabilityLib.c")
    decl = exportDeclarations(lines)
    functions = exportFullFunctions(lines)
    writeToFile(headers, decl, functions)
    # Here is how to use the shell through python
    #os.system('gcc vulnerabilityLib.c -o vuln && ./vuln hello')