#!/usr/bin/env python3
import sys
import os
import random 
import string
from pathlib import Path 
import itertools
import numpy as np

def writeToFile(headers, main_method, declarations, calls, functions, num_binaries, num_functions):
    data_folder = Path("./CompiledPrograms")
    # This part is for writing the binaries chose to have 3-6 total functions where 1 is vulnerable, rest is benign
    # Can chose to set the vulnerable function at random spot between 3-6 just for more uniform distribution  
    '''
    Old way of creating binaries was through the cartesian product:
        chosen_few = random.sample(range(len(decl)),num))
        print('These are the chosen indexes:', chosen_few
        for r in itertools.product(chosen_few, chosen_few):
            file_to_create = data_folder / ("test_file"+"_"+str(num_functions)+"_"+str(x)+".c")
            f = open(file_to_create, "w+")
            # Write headers
            f.write(headers) 
            f.write('\n')
            # Write declarations
            f.write(declarations[r[0]])
            f.write(declarations[r[1]])
            f.write('\n')

    SECOND way was to do combinations for a subset of all functions, but this makes the first function mostly used of them all.
     
    chosen = list(range(0,120))
    amount = 0
    for i in range(1, len(chosen)+1):
            if i < 4:
                for x in itertools.combinations(chosen,i):
                    amount+=1
            else:
                break
    print(amount)
    '''

    for i in range(int(num_binaries)):
        # Pick a random subset of size num_functions and create .c files from those chosen
        chosen = np.random.choice(len(declarations), size=int(num_functions))
        file_to_create = data_folder / ("test_file"+"_"+str(num_functions)+"_"+str(i)+".c")
        f = open(file_to_create, "w+")
        # Write headers
        f.write(headers)
        f.write('\n')
        # Write declarations 
        for j in range(len(chosen)):
            f.write(declarations[chosen[j]])
        f.write('\n')
        # Write main
        for k in range(len(main_method)):
            # Write calls
            if k == 0:
                f.write(main_method[k])
                f.write('\n')
                for l in range(len(chosen)):
                    f.write(calls[chosen[l]])
            else: 
                f.write(main_method[k])
        f.write('\n')
        # Write functions
        for m in range(len(chosen)):
            for n in range(len(functions[chosen[m]])):
                f.write(functions[chosen[m]][n])
            f.write('\n')
        
    f.close()

def readFile(path):
    f = open(path, "r")
    if f.mode == 'r':
        lines = f.readlines()

    f.close()
    return lines 
def exportDeclarations(lines):
    declarations = []

    # find indexes where the function declacations recide
    start_function_declaration = lines.index('/*Start declalaction*/\n') + 1
    end_function_declaration = lines.index('/*End declalaction*/\n') 

    # append source code to declaration list  
    for i in range(start_function_declaration,end_function_declaration):
        declarations.append(lines[i])

    return declarations 

def exportFunctionCalls(lines):
    full_call_stack = []
    start_function_call = lines.index('\t/*Call start*/\n')+1
    end_function_call = lines.index('\t/*Call end*/\n')
    
    for i in range(start_function_call ,end_function_call ):
        full_call_stack.append(lines[i])

    return full_call_stack


def exportFullFunctions(lines):
   
    function_start_indexes = []
    function_end_indexes = []
    full_functions = []
    
    # Used comments as tokens to help lookup indexes in lines
    substrStart = 'funcstart'
    substrEnd = 'funcend'

    # Find start and end lines for functions 
    for index, line in enumerate(lines):
        if substrStart in line:
            function_start_indexes.append(index+1)
        if substrEnd in line:
            function_end_indexes.append(index)

    # append full methods to list
    for i in range(len(function_start_indexes)):
        tmpList = []
        for j in range(function_start_indexes[i], function_end_indexes[i]):
            tmpList.append(lines[j])
        full_functions.append(tmpList) 

    return full_functions


if __name__=="__main__":

    '''
    Usage: 
    argv[1]: Number of binaries to create (1-N)
    argv[2]: Number of functions to use 3-6 best
    argv[3]: B / V for creating pure benign, and V for including a vulnerable function as well 
    '''
    headers = '#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <math.h>\n'
    main_method = ['int main(int argc, char* argv[]){\n', '    return 0;\n','}\n']
    lines = readFile("vulnerabilityLib.c")
    decl = exportDeclarations(lines)
    print('decl len', len(decl))
    calls = exportFunctionCalls(lines)
    print('call len', len(calls))
    functions = exportFullFunctions(lines)
    print('func len', len(functions))
    writeToFile(headers, main_method, decl, calls, functions, sys.argv[1], sys.argv[2])
    # Here is how to use the shell through python
    #os.system('gcc vulnerabilityLib.c -o vuln && ./vuln hello')