import sys
import os
from pathlib import Path 
import re
import random 


def readFile(path):
    f = open(path, "r")
    if f.mode == 'r':
        lines = f.readlines()

    f.close()
    return lines 

def writeToFile(collection, flag, lines):

    if collection == 'train':
        file_to_write = Path('./FinalizedData/Train.txt')
    else: 
        file_to_write = Path('./FinalizedData/Test.txt')
    
    f = open(file_to_write, "a+")
    
    if flag == 'B':
        f.write('__label0__ ')
    else:
        f.write('__label1__ ')

    for line in lines:
        line = line.partition('.string')[0]
        line = line.partition('.file')[0]
        line = line.partition('.intel_syntax noprefix')[0]
        line = line.partition('.text')[0]
        line = line.partition('.glob')[0]
        line = line.partition('.type')[0]
        line = line.partition('.size')[0]
        line = line.partition('.ident')[0]
        line = line.partition('.section')[0]
        line = line.rstrip()

        # Ignore the new empty lines
        if line:
            # Create spaces inbetween each special character so that they are tokens in them selves  ( NOT DOCUMENTED)
            line = re.sub(r'(\s*\,\s*)',' , ',line)
            line = re.sub(r'(\s*\:\s*)',' : ',line)
            line = re.sub(r'(\s*\[\s*)',' [ ',line)
            line = re.sub(r'(\s*\]\s*)',' ] ',line)
            line = re.sub(r'(\s*\@\s*)',' @ ',line)
            # LC are just code parts were prints are keept, we choose to keep the reference, 
            # but remove the actuall code parts 
            if not line.startswith('.LC'):
                line = line.replace('\t', ' ')
                line = ''.join((line,'\n'))
                f.write(line)

    f.write('\n')
    f.close()
    return 0

# This is the script for cleaning data and writing it to txt in dir :/FinalizedData 

# Find all files in the benign 
# Find all files in the vulnerable 
# Iterate over 80% of them and write to train
# Iterate over 20% of them and write to test
# Use randomness to determine if B / V should be written to file 

train_split = 0.80
test_split = 0.20

benign_path = Path('./CompiledPrograms/Benign/Assembly')
vuln_path = Path('./CompiledPrograms/Vulns/Assembly')

list_of_files = os.listdir(benign_path)
number_files = len(list_of_files)
    
# variable to index all data samlpes
index = 0
for filename in benign_path.rglob('*'):
    # cast to string so that we can manipulate it later 
    filename = str(filename)
    # Using this binary random to help randomize order of vulnerable and benign data samples 
    rand = random.randrange(0,2)

    if sys.argv[1] == 'B':
        print('got B arg')
        # First 80% of files are written to train.txt
        if index < train_split*number_files:
            print('train', index)
            # If 0, write a benign data sample first, then a vulnerable 
            # All files have the same name, so we can reuse just the filename and change the /dir/ name 
            print(filename)
            lines = readFile(filename)
            writeToFile('train','B', lines)
        # Last 20% of files are written to test.txt
        else:
            print('test', index)
            print(filename)
            lines = readFile(filename)
            writeToFile('test','B', lines)
    
    elif sys.argv[1] == 'V':
        if index < train_split*number_files:
            filename = filename.replace('Benign','Vulns')
            print(filename)
            lines = readFile(filename)
            writeToFile('train', 'V', lines)
        else: 
            filename = filename.replace('Benign','Vulns')
            lines = readFile(filename)
            writeToFile('test', 'V', lines)


    elif sys.argv[1] == 'C':
        # First 80% of files are written to train.txt
        if index < train_split*number_files:
            print('train', index)
            # If 0, write a benign data sample first, then a vulnerable 
            # All files have the same name, so we can reuse just the filename and change the /dir/ name 
            if(rand == 0):
                print(filename)
                lines = readFile(filename)
                writeToFile('train','B', lines)
                # Replace dir name so that we choose a vulnerable data sample 
                filename = filename.replace('Benign','Vulns')
                print(filename)
                lines = readFile(filename)
                writeToFile('train', 'V', lines)
            else:
                filename = filename.replace('Benign','Vulns')
                print(filename)
                lines = readFile(filename)
                writeToFile('train', 'V', lines)
                filename = filename.replace('Vulns','Benign')
                print(filename)
                lines = readFile(filename)
                writeToFile('train','B', lines)

        # Last 20% of files are written to test.txt
        else:
            print('test', index)
            if(rand == 0):
                print(filename)
                lines = readFile(filename)
                writeToFile('test','B', lines)
                lines = None
                # Replace dir name so that we choose a vulnerable data sample 
                filename = filename.replace('Benign','Vulns')
                print(filename)
                lines = readFile(filename)
                writeToFile('test', 'V', lines)
                lines = None
            else:
                filename = filename.replace('Benign','Vulns')
                print(filename)
                lines = readFile(filename)
                writeToFile('test', 'V', lines)
                lines = None
                filename = filename.replace('Vulns','Benign')
                print(filename)
                lines = readFile(filename)
                writeToFile('test','B', lines)
                lines = None
    
    index += 1

    '''
    Usage: 
    argv[1]: B / V / C 
          B: Write only benign samples to train/test.txt
          V: Write only vulnerable samples to train/test.txt
          C: Write both benign & vulnerable samples to train/test.txt
    '''
