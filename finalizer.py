import sys
import os
from pathlib import Path 
import re
import random 


def readFile(path):
    f = open(path, "r")
    if f.mode == 'r':
        lines = f.readlines()

    f.close()
    return lines 

# 263 lines started with 
# Removed 10 .string lines

def writeToFile(collection, flag, lines):

    if collection == 'train':
        file_to_write = Path('./FinalizedData/Train.txt')
    else: 
        file_to_write = Path('./FinalizedData/Test.txt')
    
    f = open(file_to_write, "a+")
    
    if flag == 'B':
        f.write('__label_0__ ')
    else:
        f.write('__label_1__ ')

    # test = []
    for line in lines:
        #  line = line.partition('\t.')[0] 
        line = line.partition('.string')[0]
        line = line.partition('.file')[0]
        line = line.partition('.intel_syntax noprefix')[0]
        line = line.partition('.text')[0]
        line = line.partition('.glob')[0]
        line = line.partition('.type')[0]
        line = line.partition('.size')[0]
        line = line.partition('.ident')[0]
        line = line.partition('.section')[0]
        # line = line.partition('.LC')[0]
        # line = line.partition('\t')
        line = line.rstrip()

        # Ignore the new empty lines
        if line:
            # LC are just code parts were prints are keept, we choose to keep the reference, 
            # but remove the actuall code parts 
            if not line.startswith('.LC'):
                # re.sub(r"\W", " ", line)
                line = line.replace('\t', ' ')
                # line = line.strip()
                # test.append(line)
                f.write(line)
                # f.write('\n')

    # print(test)
    f.write('\n')
    f.close()
    return 0

# This is the script for cleaning data and writing it to txt in dir :/FinalizedData 

# Find all files in the benign 
# Find all files in the vulnerable 
# Iterate over 80% of them and write to train
# Iterate over 20% of them and write to test
# Use randomness to determine if B / V should be written to file 

train_split = 0.80
test_split = 0.20

benign_path = Path('./CompiledPrograms/Benign/Assembly')
vuln_path = Path('./CompiledPrograms/Vulns/Assembly')

list_of_files = os.listdir(benign_path)
number_files = len(list_of_files)
print(number_files)

    
# variable to index all data samlpes
index = 0
for filename in benign_path.rglob('*'):
    # cast to string so that we can manipulate it later 
    filename = str(filename)
    # Using this binary random to help randomize order of vulnerable and benign data samples 
    rand = random.randrange(0,2)

    # First 80% of files are written to train.txt
    print(rand)
    if index < train_split*number_files:
        print('train', index)
        # If 0, write a benign data sample first, then a vulnerable 
        # All files have the same name, so we can reuse just the filename and change the /dir/ name 
        if(rand == 0):
            print(filename)
            lines = readFile(filename)
            writeToFile('train','B', lines)
            # Replace dir name so that we choose a vulnerable data sample 
            filename = filename.replace('Benign','Vulns')
            print(filename)
            lines = readFile(filename)
            writeToFile('train', 'V', lines)
        else:
            filename = filename.replace('Benign','Vulns')
            print(filename)
            lines = readFile(filename)
            writeToFile('train', 'V', lines)
            filename = filename.replace('Vulns','Benign')
            print(filename)
            lines = readFile(filename)
            writeToFile('train','B', lines)


    # Last 20% of files are written to test.txt
    else:
        print('test', index)
        if(rand == 0):
            print(filename)
            lines = readFile(filename)
            writeToFile('test','B', lines)
            lines = None
            # Replace dir name so that we choose a vulnerable data sample 
            filename = filename.replace('Benign','Vulns')
            print(filename)
            lines = readFile(filename)
            writeToFile('test', 'V', lines)
            lines = None
        else:
            filename = filename.replace('Benign','Vulns')
            print(filename)
            lines = readFile(filename)
            writeToFile('test', 'V', lines)
            lines = None
            filename = filename.replace('Vulns','Benign')
            print(filename)
            lines = readFile(filename)
            writeToFile('test','B', lines)
            lines = None
    
    index += 1


