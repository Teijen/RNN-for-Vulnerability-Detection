	.file	"test_file_3_939.c"
	.intel_syntax noprefix
	.text
	.globl	main
	.type	main, @function
main:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	DWORD PTR -4[rbp], edi
	mov	QWORD PTR -16[rbp], rsi
	mov	eax, 0
	call	ccynxwluinnu
	mov	rax, QWORD PTR -16[rbp]
	add	rax, 8
	mov	rax, QWORD PTR [rax]
	mov	rdi, rax
	call	dzthxorefqaz
	mov	rax, QWORD PTR -16[rbp]
	add	rax, 8
	mov	rax, QWORD PTR [rax]
	mov	edx, 10
	mov	esi, 0
	mov	rdi, rax
	call	strtol@PLT
	mov	edi, eax
	call	rfujycbtsdvc
	mov	eax, 0
	leave
	ret
	.size	main, .-main
	.section	.rodata
.LC0:
	.string	"Hello"
.LC1:
	.string	" "
.LC2:
	.string	"Somethings"
.LC3:
	.string	"Combined strings: %s\n"
	.text
	.globl	ccynxwluinnu
	.type	ccynxwluinnu, @function
ccynxwluinnu:
	endbr64
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 64
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -40[rbp], rax
	xor	eax, eax
	mov	rax, rsp
	mov	r12, rax
	lea	rax, .LC0[rip]
	mov	QWORD PTR -80[rbp], rax
	lea	rax, .LC1[rip]
	mov	QWORD PTR -72[rbp], rax
	lea	rax, .LC2[rip]
	mov	QWORD PTR -64[rbp], rax
	mov	rax, QWORD PTR -80[rbp]
	mov	rdi, rax
	call	strlen@PLT
	mov	rbx, rax
	mov	rax, QWORD PTR -64[rbp]
	mov	rdi, rax
	call	strlen@PLT
	add	rbx, rax
	mov	rax, QWORD PTR -72[rbp]
	mov	rdi, rax
	call	strlen@PLT
	add	rax, rbx
	mov	rdx, rax
	sub	rdx, 1
	mov	QWORD PTR -56[rbp], rdx
	mov	QWORD PTR -96[rbp], rax
	mov	QWORD PTR -88[rbp], 0
	mov	r14, rax
	mov	r15d, 0
	mov	edx, 16
	sub	rdx, 1
	add	rax, rdx
	mov	esi, 16
	mov	edx, 0
	div	rsi
	imul	rax, rax, 16
	mov	rcx, rax
	and	rcx, -4096
	mov	rdx, rsp
	sub	rdx, rcx
.L4:
	cmp	rsp, rdx
	je	.L5
	sub	rsp, 4096
	or	QWORD PTR 4088[rsp], 0
	jmp	.L4
.L5:
	mov	rdx, rax
	and	edx, 4095
	sub	rsp, rdx
	mov	rdx, rax
	and	edx, 4095
	test	rdx, rdx
	je	.L6
	and	eax, 4095
	sub	rax, 8
	add	rax, rsp
	or	QWORD PTR [rax], 0
.L6:
	mov	rax, rsp
	add	rax, 0
	mov	QWORD PTR -48[rbp], rax
	mov	rdx, QWORD PTR -80[rbp]
	mov	rax, QWORD PTR -48[rbp]
	mov	rsi, rdx
	mov	rdi, rax
	call	strcat@PLT
	mov	rdx, QWORD PTR -72[rbp]
	mov	rax, QWORD PTR -48[rbp]
	mov	rsi, rdx
	mov	rdi, rax
	call	strcat@PLT
	mov	rdx, QWORD PTR -64[rbp]
	mov	rax, QWORD PTR -48[rbp]
	mov	rsi, rdx
	mov	rdi, rax
	call	strcat@PLT
	mov	rax, QWORD PTR -48[rbp]
	mov	rsi, rax
	lea	rax, .LC3[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	mov	rsp, r12
	nop
	mov	rax, QWORD PTR -40[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L7
	call	__stack_chk_fail@PLT
.L7:
	lea	rsp, -32[rbp]
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret
	.size	ccynxwluinnu, .-ccynxwluinnu
	.globl	dzthxorefqaz
	.type	dzthxorefqaz, @function
dzthxorefqaz:
	endbr64
	push	rbp
	mov	rbp, rsp
	push	rbx
	sub	rsp, 296
	mov	QWORD PTR -296[rbp], rdi
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -24[rbp], rax
	xor	eax, eax
	mov	rax, QWORD PTR -296[rbp]
	mov	rcx, QWORD PTR [rax]
	mov	rbx, QWORD PTR 8[rax]
	mov	QWORD PTR -288[rbp], rcx
	mov	QWORD PTR -280[rbp], rbx
	mov	rcx, QWORD PTR 16[rax]
	mov	rbx, QWORD PTR 24[rax]
	mov	QWORD PTR -272[rbp], rcx
	mov	QWORD PTR -264[rbp], rbx
	mov	rcx, QWORD PTR 32[rax]
	mov	rbx, QWORD PTR 40[rax]
	mov	QWORD PTR -256[rbp], rcx
	mov	QWORD PTR -248[rbp], rbx
	mov	rcx, QWORD PTR 48[rax]
	mov	rbx, QWORD PTR 56[rax]
	mov	QWORD PTR -240[rbp], rcx
	mov	QWORD PTR -232[rbp], rbx
	mov	rcx, QWORD PTR 64[rax]
	mov	rbx, QWORD PTR 72[rax]
	mov	QWORD PTR -224[rbp], rcx
	mov	QWORD PTR -216[rbp], rbx
	mov	rcx, QWORD PTR 80[rax]
	mov	rbx, QWORD PTR 88[rax]
	mov	QWORD PTR -208[rbp], rcx
	mov	QWORD PTR -200[rbp], rbx
	mov	rcx, QWORD PTR 96[rax]
	mov	rbx, QWORD PTR 104[rax]
	mov	QWORD PTR -192[rbp], rcx
	mov	QWORD PTR -184[rbp], rbx
	mov	rcx, QWORD PTR 112[rax]
	mov	rbx, QWORD PTR 120[rax]
	mov	QWORD PTR -176[rbp], rcx
	mov	QWORD PTR -168[rbp], rbx
	mov	rcx, QWORD PTR 128[rax]
	mov	rbx, QWORD PTR 136[rax]
	mov	QWORD PTR -160[rbp], rcx
	mov	QWORD PTR -152[rbp], rbx
	mov	rcx, QWORD PTR 144[rax]
	mov	rbx, QWORD PTR 152[rax]
	mov	QWORD PTR -144[rbp], rcx
	mov	QWORD PTR -136[rbp], rbx
	mov	rcx, QWORD PTR 160[rax]
	mov	rbx, QWORD PTR 168[rax]
	mov	QWORD PTR -128[rbp], rcx
	mov	QWORD PTR -120[rbp], rbx
	mov	rcx, QWORD PTR 176[rax]
	mov	rbx, QWORD PTR 184[rax]
	mov	QWORD PTR -112[rbp], rcx
	mov	QWORD PTR -104[rbp], rbx
	mov	rcx, QWORD PTR 192[rax]
	mov	rbx, QWORD PTR 200[rax]
	mov	QWORD PTR -96[rbp], rcx
	mov	QWORD PTR -88[rbp], rbx
	mov	rcx, QWORD PTR 208[rax]
	mov	rbx, QWORD PTR 216[rax]
	mov	QWORD PTR -80[rbp], rcx
	mov	QWORD PTR -72[rbp], rbx
	mov	rcx, QWORD PTR 224[rax]
	mov	rbx, QWORD PTR 232[rax]
	mov	QWORD PTR -64[rbp], rcx
	mov	QWORD PTR -56[rbp], rbx
	mov	rdx, QWORD PTR 248[rax]
	mov	rax, QWORD PTR 240[rax]
	mov	QWORD PTR -48[rbp], rax
	mov	QWORD PTR -40[rbp], rdx
	lea	rax, -288[rbp]
	mov	rdi, rax
	call	puts@PLT
	nop
	mov	rax, QWORD PTR -24[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L9
	call	__stack_chk_fail@PLT
.L9:
	mov	rbx, QWORD PTR -8[rbp]
	leave
	ret
	.size	dzthxorefqaz, .-dzthxorefqaz
	.section	.rodata
	.align 8
.LC4:
	.string	"Enter number you want to multiply with"
.LC5:
	.string	"%d"
.LC6:
	.string	"Input %d * %d = %d\n"
	.text
	.globl	rfujycbtsdvc
	.type	rfujycbtsdvc, @function
rfujycbtsdvc:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32
	mov	DWORD PTR -20[rbp], edi
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	lea	rax, .LC4[rip]
	mov	rdi, rax
	call	puts@PLT
	lea	rax, -12[rbp]
	mov	rsi, rax
	lea	rax, .LC5[rip]
	mov	rdi, rax
	mov	eax, 0
	call	__isoc99_scanf@PLT
	mov	eax, DWORD PTR -12[rbp]
	imul	eax, DWORD PTR -20[rbp]
	mov	ecx, eax
	mov	edx, DWORD PTR -12[rbp]
	mov	eax, DWORD PTR -20[rbp]
	mov	esi, eax
	lea	rax, .LC6[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	nop
.L12:
	call	getchar@PLT
	mov	DWORD PTR -12[rbp], eax
	mov	eax, DWORD PTR -12[rbp]
	cmp	eax, 10
	je	.L14
	mov	eax, DWORD PTR -12[rbp]
	cmp	eax, -1
	jne	.L12
.L14:
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L13
	call	__stack_chk_fail@PLT
.L13:
	leave
	ret
	.size	rfujycbtsdvc, .-rfujycbtsdvc
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
