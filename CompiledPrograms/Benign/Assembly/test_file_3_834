	.file	"test_file_3_834.c"
	.intel_syntax noprefix
	.text
	.globl	main
	.type	main, @function
main:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	DWORD PTR -4[rbp], edi
	mov	QWORD PTR -16[rbp], rsi
	mov	eax, 0
	call	ycumhbjkobjs
	mov	rax, QWORD PTR -16[rbp]
	add	rax, 8
	mov	rax, QWORD PTR [rax]
	mov	rdi, rax
	call	bzvutoqtovci
	mov	eax, 0
	call	bimvvmxtypwo
	mov	eax, 0
	leave
	ret
	.size	main, .-main
	.section	.rodata
.LC0:
	.string	"Enter three numbers: "
.LC1:
	.string	"%lf %lf %lf"
.LC2:
	.string	"%.2lf is the largest number."
	.text
	.globl	ycumhbjkobjs
	.type	ycumhbjkobjs, @function
ycumhbjkobjs:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	lea	rax, .LC0[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	lea	rcx, -16[rbp]
	lea	rdx, -24[rbp]
	lea	rax, -32[rbp]
	mov	rsi, rax
	lea	rax, .LC1[rip]
	mov	rdi, rax
	mov	eax, 0
	call	__isoc99_scanf@PLT
	movsd	xmm0, QWORD PTR -32[rbp]
	movsd	xmm1, QWORD PTR -24[rbp]
	comisd	xmm0, xmm1
	jb	.L15
	movsd	xmm0, QWORD PTR -32[rbp]
	movsd	xmm1, QWORD PTR -16[rbp]
	comisd	xmm0, xmm1
	jb	.L16
	mov	rax, QWORD PTR -32[rbp]
	movq	xmm0, rax
	lea	rax, .LC2[rip]
	mov	rdi, rax
	mov	eax, 1
	call	printf@PLT
	jmp	.L18
.L16:
	mov	rax, QWORD PTR -16[rbp]
	movq	xmm0, rax
	lea	rax, .LC2[rip]
	mov	rdi, rax
	mov	eax, 1
	call	printf@PLT
	jmp	.L18
.L15:
	movsd	xmm0, QWORD PTR -24[rbp]
	movsd	xmm1, QWORD PTR -16[rbp]
	comisd	xmm0, xmm1
	jb	.L17
	mov	rax, QWORD PTR -24[rbp]
	movq	xmm0, rax
	lea	rax, .LC2[rip]
	mov	rdi, rax
	mov	eax, 1
	call	printf@PLT
	jmp	.L18
.L17:
	mov	rax, QWORD PTR -16[rbp]
	movq	xmm0, rax
	lea	rax, .LC2[rip]
	mov	rdi, rax
	mov	eax, 1
	call	printf@PLT
.L18:
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L11
	call	__stack_chk_fail@PLT
.L11:
	leave
	ret
	.size	ycumhbjkobjs, .-ycumhbjkobjs
	.section	.rodata
.LC3:
	.string	"%s"
	.text
	.globl	bzvutoqtovci
	.type	bzvutoqtovci, @function
bzvutoqtovci:
	endbr64
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 88
	mov	QWORD PTR -120[rbp], rdi
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -56[rbp], rax
	xor	eax, eax
	mov	rax, rsp
	mov	rbx, rax
	lea	rax, -100[rbp]
	mov	rdi, rax
	mov	eax, 0
	call	time@PLT
	mov	edi, eax
	call	srand@PLT
	call	rand@PLT
	movsx	rdx, eax
	imul	rdx, rdx, 1374389535
	shr	rdx, 32
	sar	edx, 4
	mov	ecx, eax
	sar	ecx, 31
	sub	edx, ecx
	mov	DWORD PTR -96[rbp], edx
	mov	edx, DWORD PTR -96[rbp]
	imul	edx, edx, 50
	sub	eax, edx
	mov	DWORD PTR -96[rbp], eax
	call	rand@PLT
	movsx	rdx, eax
	imul	rdx, rdx, -368140053
	shr	rdx, 32
	add	edx, eax
	sar	edx, 6
	mov	ecx, eax
	sar	ecx, 31
	sub	edx, ecx
	mov	DWORD PTR -92[rbp], edx
	mov	edx, DWORD PTR -92[rbp]
	imul	edx, edx, 70
	sub	eax, edx
	mov	DWORD PTR -92[rbp], eax
	call	rand@PLT
	mov	edx, eax
	movsx	rax, edx
	imul	rax, rax, 1717986919
	shr	rax, 32
	sar	eax, 2
	mov	ecx, edx
	sar	ecx, 31
	sub	eax, ecx
	mov	DWORD PTR -88[rbp], eax
	mov	ecx, DWORD PTR -88[rbp]
	mov	eax, ecx
	sal	eax, 2
	add	eax, ecx
	add	eax, eax
	sub	edx, eax
	mov	DWORD PTR -88[rbp], edx
	mov	edx, DWORD PTR -96[rbp]
	mov	eax, DWORD PTR -92[rbp]
	add	edx, eax
	mov	eax, DWORD PTR -88[rbp]
	add	eax, edx
	mov	DWORD PTR -84[rbp], eax
	mov	eax, DWORD PTR -96[rbp]
	sub	eax, DWORD PTR -92[rbp]
	sub	eax, DWORD PTR -88[rbp]
	mov	DWORD PTR -80[rbp], eax
	mov	edx, DWORD PTR -96[rbp]
	mov	eax, DWORD PTR -92[rbp]
	add	eax, edx
	sub	eax, DWORD PTR -88[rbp]
	mov	DWORD PTR -76[rbp], eax
	mov	rax, QWORD PTR -120[rbp]
	mov	rdi, rax
	call	strlen@PLT
	mov	rdx, rax
	sub	rdx, 1
	mov	QWORD PTR -72[rbp], rdx
	mov	r14, rax
	mov	r15d, 0
	mov	r12, rax
	mov	r13d, 0
	mov	edx, 16
	sub	rdx, 1
	add	rax, rdx
	mov	esi, 16
	mov	edx, 0
	div	rsi
	imul	rax, rax, 16
	mov	rcx, rax
	and	rcx, -4096
	mov	rdx, rsp
	sub	rdx, rcx
.L20:
	cmp	rsp, rdx
	je	.L21
	sub	rsp, 4096
	or	QWORD PTR 4088[rsp], 0
	jmp	.L20
.L21:
	mov	rdx, rax
	and	edx, 4095
	sub	rsp, rdx
	mov	rdx, rax
	and	edx, 4095
	test	rdx, rdx
	je	.L22
	and	eax, 4095
	sub	rax, 8
	add	rax, rsp
	or	QWORD PTR [rax], 0
.L22:
	mov	rax, rsp
	add	rax, 0
	mov	QWORD PTR -64[rbp], rax
	mov	rdx, QWORD PTR -120[rbp]
	mov	rax, QWORD PTR -64[rbp]
	lea	rcx, .LC3[rip]
	mov	rsi, rcx
	mov	rdi, rax
	mov	eax, 0
	call	sprintf@PLT
	mov	rax, QWORD PTR -64[rbp]
	mov	rdi, rax
	call	puts@PLT
	mov	rsp, rbx
	nop
	mov	rax, QWORD PTR -56[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L23
	call	__stack_chk_fail@PLT
.L23:
	lea	rsp, -40[rbp]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
	.size	bzvutoqtovci, .-bzvutoqtovci
	.section	.rodata
	.align 8
.LC4:
	.string	"Write some strings to concatenate!"
.LC5:
	.string	"Concatenated String %s\n"
	.text
	.globl	bimvvmxtypwo
	.type	bimvvmxtypwo, @function
bimvvmxtypwo:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 80
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	mov	DWORD PTR -64[rbp], 4
	mov	DWORD PTR -68[rbp], 0
	jmp	.L25
.L26:
	lea	rax, .LC4[rip]
	mov	rdi, rax
	call	puts@PLT
	mov	rdx, QWORD PTR stdin[rip]
	lea	rax, -58[rbp]
	mov	esi, 10
	mov	rdi, rax
	call	fgets@PLT
	lea	rdx, -58[rbp]
	lea	rax, -48[rbp]
	mov	rsi, rdx
	mov	rdi, rax
	call	strcat@PLT
	add	DWORD PTR -68[rbp], 1
.L25:
	mov	eax, DWORD PTR -68[rbp]
	cmp	eax, DWORD PTR -64[rbp]
	jl	.L26
	lea	rax, -48[rbp]
	mov	rsi, rax
	lea	rax, .LC5[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L27
	call	__stack_chk_fail@PLT
.L27:
	leave
	ret
	.size	bimvvmxtypwo, .-bimvvmxtypwo
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
