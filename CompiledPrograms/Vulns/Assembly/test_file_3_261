	.file	"test_file_3_261.c"
	.intel_syntax noprefix
	.text
	.globl	main
	.type	main, @function
main:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	DWORD PTR -4[rbp], edi
	mov	QWORD PTR -16[rbp], rsi
	mov	rax, QWORD PTR -16[rbp]
	add	rax, 8
	mov	rax, QWORD PTR [rax]
	mov	edx, 10
	mov	esi, 0
	mov	rdi, rax
	call	strtol@PLT
	mov	edi, eax
	call	jsczuwnqybnx
	mov	rax, QWORD PTR -16[rbp]
	add	rax, 8
	mov	rax, QWORD PTR [rax]
	mov	edx, 10
	mov	esi, 0
	mov	rdi, rax
	call	strtol@PLT
	mov	edi, eax
	call	tjuxaxczdlks
	mov	eax, 0
	call	tapaqftbrqhr
	mov	eax, 0
	leave
	ret
	.size	main, .-main
	.section	.rodata
.LC0:
	.string	"A"
.LC1:
	.string	"B"
.LC2:
	.string	"C"
.LC3:
	.string	"%d, %d\n"
.LC4:
	.string	"%s\n"
.LC5:
	.string	"final : %s\n"
	.text
	.globl	jsczuwnqybnx
	.type	jsczuwnqybnx, @function
jsczuwnqybnx:
	endbr64
	push	rbp
	mov	rbp, rsp
	push	rbx
	sub	rsp, 104
	mov	DWORD PTR -100[rbp], edi
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -24[rbp], rax
	xor	eax, eax
	mov	rax, rsp
	mov	rbx, rax
	lea	rax, .LC0[rip]
	mov	BYTE PTR -75[rbp], al
	lea	rax, .LC1[rip]
	mov	BYTE PTR -74[rbp], al
	lea	rax, .LC2[rip]
	mov	BYTE PTR -70[rbp], al
	mov	ecx, DWORD PTR -100[rbp]
	movsx	rax, ecx
	sub	rax, 1
	mov	QWORD PTR -96[rbp], rax
	movsx	rax, ecx
	mov	r10, rax
	mov	r11d, 0
	movsx	rax, ecx
	mov	r8, rax
	mov	r9d, 0
	movsx	rax, ecx
	mov	edx, 16
	sub	rdx, 1
	add	rax, rdx
	mov	edi, 16
	mov	edx, 0
	div	rdi
	imul	rax, rax, 16
	mov	rsi, rax
	and	rsi, -4096
	mov	rdx, rsp
	sub	rdx, rsi
.L4:
	cmp	rsp, rdx
	je	.L5
	sub	rsp, 4096
	or	QWORD PTR 4088[rsp], 0
	jmp	.L4
.L5:
	mov	rdx, rax
	and	edx, 4095
	sub	rsp, rdx
	mov	rdx, rax
	and	edx, 4095
	test	rdx, rdx
	je	.L6
	and	eax, 4095
	sub	rax, 8
	add	rax, rsp
	or	QWORD PTR [rax], 0
.L6:
	mov	rax, rsp
	add	rax, 0
	mov	QWORD PTR -88[rbp], rax
	movsx	rax, ecx
	mov	rdx, rax
	mov	esi, 50
	lea	rax, .LC3[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	mov	rdx, QWORD PTR stdin[rip]
	mov	ecx, DWORD PTR -100[rbp]
	mov	rax, QWORD PTR -88[rbp]
	mov	esi, ecx
	mov	rdi, rax
	call	fgets@PLT
	mov	rdx, QWORD PTR -88[rbp]
	lea	rax, -80[rbp]
	lea	rcx, .LC4[rip]
	mov	rsi, rcx
	mov	rdi, rax
	mov	eax, 0
	call	sprintf@PLT
	lea	rax, -80[rbp]
	mov	rsi, rax
	lea	rax, .LC5[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	mov	rsp, rbx
	nop
	mov	rax, QWORD PTR -24[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L7
	call	__stack_chk_fail@PLT
.L7:
	mov	rbx, QWORD PTR -8[rbp]
	leave
	ret
	.size	jsczuwnqybnx, .-jsczuwnqybnx
	.section	.rodata
.LC6:
	.string	"%d is a leap year.\n"
.LC7:
	.string	"%d is not a leap year.\n"
	.text
	.globl	tjuxaxczdlks
	.type	tjuxaxczdlks, @function
tjuxaxczdlks:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	DWORD PTR -4[rbp], edi
	mov	eax, DWORD PTR -4[rbp]
	and	eax, 3
	test	eax, eax
	jne	.L9
	mov	edx, DWORD PTR -4[rbp]
	movsx	rax, edx
	imul	rax, rax, 1374389535
	shr	rax, 32
	sar	eax, 5
	mov	ecx, edx
	sar	ecx, 31
	sub	eax, ecx
	imul	ecx, eax, 100
	mov	eax, edx
	sub	eax, ecx
	test	eax, eax
	jne	.L10
	mov	edx, DWORD PTR -4[rbp]
	movsx	rax, edx
	imul	rax, rax, 1374389535
	shr	rax, 32
	sar	eax, 7
	mov	ecx, edx
	sar	ecx, 31
	sub	eax, ecx
	imul	ecx, eax, 400
	mov	eax, edx
	sub	eax, ecx
	test	eax, eax
	jne	.L11
	mov	eax, DWORD PTR -4[rbp]
	mov	esi, eax
	lea	rax, .LC6[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	jmp	.L12
.L11:
	mov	eax, DWORD PTR -4[rbp]
	mov	esi, eax
	lea	rax, .LC7[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	jmp	.L12
.L10:
	mov	eax, DWORD PTR -4[rbp]
	mov	esi, eax
	lea	rax, .LC6[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	jmp	.L12
.L9:
	mov	eax, DWORD PTR -4[rbp]
	mov	esi, eax
	lea	rax, .LC7[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
.L12:
	mov	eax, 0
	leave
	ret
	.size	tjuxaxczdlks, .-tjuxaxczdlks
	.section	.rodata
.LC8:
	.string	"hello"
.LC9:
	.string	"theese "
.LC10:
	.string	"are "
.LC11:
	.string	"just"
.LC12:
	.string	"strings"
	.align 8
.LC13:
	.string	"Write some strings, 40 letters only!"
.LC14:
	.string	"You wrote: %s\n"
	.text
	.globl	tapaqftbrqhr
	.type	tapaqftbrqhr, @function
tapaqftbrqhr:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 64
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	mov	DWORD PTR -52[rbp], 4
	lea	rax, .LC8[rip]
	mov	rdi, rax
	call	puts@PLT
	lea	rax, .LC9[rip]
	mov	rdi, rax
	call	puts@PLT
	lea	rax, .LC10[rip]
	mov	rdi, rax
	call	puts@PLT
	lea	rax, .LC11[rip]
	mov	rdi, rax
	call	puts@PLT
	lea	rax, .LC12[rip]
	mov	rdi, rax
	call	puts@PLT
	mov	DWORD PTR -56[rbp], 0
	jmp	.L15
.L16:
	lea	rax, .LC13[rip]
	mov	rdi, rax
	call	puts@PLT
	mov	rdx, QWORD PTR stdin[rip]
	lea	rax, -48[rbp]
	mov	esi, 40
	mov	rdi, rax
	call	fgets@PLT
	lea	rax, -48[rbp]
	mov	rsi, rax
	lea	rax, .LC14[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	add	DWORD PTR -56[rbp], 1
.L15:
	mov	eax, DWORD PTR -56[rbp]
	cmp	eax, DWORD PTR -52[rbp]
	jl	.L16
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L17
	call	__stack_chk_fail@PLT
.L17:
	leave
	ret
	.size	tapaqftbrqhr, .-tapaqftbrqhr
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
