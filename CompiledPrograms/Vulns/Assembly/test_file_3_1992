	.file	"test_file_3_1992.c"
	.intel_syntax noprefix
	.text
	.globl	main
	.type	main, @function
main:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	DWORD PTR -4[rbp], edi
	mov	QWORD PTR -16[rbp], rsi
	mov	eax, 0
	call	syrddukuvbdy
	mov	eax, 0
	call	jzxgdkaleirh
	mov	eax, 0
	call	fmhzuinagzwq
	mov	eax, 0
	leave
	ret
	.size	main, .-main
	.section	.rodata
.LC0:
	.string	"%s"
.LC1:
	.string	"abc"
	.text
	.globl	syrddukuvbdy
	.type	syrddukuvbdy, @function
syrddukuvbdy:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	lea	rax, -23[rbp]
	mov	rsi, rax
	lea	rax, .LC0[rip]
	mov	rdi, rax
	mov	eax, 0
	call	__isoc99_scanf@PLT
	lea	rax, -23[rbp]
	add	rax, 2
	mov	QWORD PTR -32[rbp], rax
	lea	rcx, .LC1[rip+2]
	mov	rax, QWORD PTR -32[rbp]
	mov	edx, 5
	mov	rsi, rcx
	mov	rdi, rax
	call	memcpy@PLT
	mov	rax, QWORD PTR -32[rbp]
	mov	rdi, rax
	call	puts@PLT
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L4
	call	__stack_chk_fail@PLT
.L4:
	leave
	ret
	.size	syrddukuvbdy, .-syrddukuvbdy
	.section	.rodata
.LC2:
	.string	"Start adding up numbers"
.LC3:
	.string	"%d"
.LC4:
	.string	"Current total: %d\n"
	.text
	.globl	jzxgdkaleirh
	.type	jzxgdkaleirh, @function
jzxgdkaleirh:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	mov	DWORD PTR -16[rbp], 0
	mov	DWORD PTR -12[rbp], 0
	jmp	.L6
.L9:
	lea	rax, .LC2[rip]
	mov	rdi, rax
	call	puts@PLT
	lea	rax, -20[rbp]
	mov	rsi, rax
	lea	rax, .LC3[rip]
	mov	rdi, rax
	mov	eax, 0
	call	__isoc99_scanf@PLT
	mov	eax, DWORD PTR -20[rbp]
	add	DWORD PTR -16[rbp], eax
	mov	eax, DWORD PTR -16[rbp]
	mov	esi, eax
	lea	rax, .LC4[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	nop
.L8:
	call	getchar@PLT
	mov	DWORD PTR -20[rbp], eax
	mov	eax, DWORD PTR -20[rbp]
	cmp	eax, 10
	je	.L7
	mov	eax, DWORD PTR -20[rbp]
	cmp	eax, -1
	jne	.L8
.L7:
	add	DWORD PTR -12[rbp], 1
.L6:
	cmp	DWORD PTR -12[rbp], 4
	jle	.L9
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L10
	call	__stack_chk_fail@PLT
.L10:
	leave
	ret
	.size	jzxgdkaleirh, .-jzxgdkaleirh
	.section	.rodata
.LC5:
	.string	"Length of the string: %d\n"
	.text
	.globl	fmhzuinagzwq
	.type	fmhzuinagzwq, @function
fmhzuinagzwq:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 48
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	movabs	rax, 7885065666585129552
	movabs	rdx, 7359008686475800169
	mov	QWORD PTR -32[rbp], rax
	mov	QWORD PTR -24[rbp], rdx
	mov	WORD PTR -16[rbp], 28277
	mov	BYTE PTR -14[rbp], 0
	mov	DWORD PTR -36[rbp], 0
	jmp	.L12
.L13:
	add	DWORD PTR -36[rbp], 1
.L12:
	mov	eax, DWORD PTR -36[rbp]
	cdqe
	movzx	eax, BYTE PTR -32[rbp+rax]
	test	al, al
	jne	.L13
	mov	eax, DWORD PTR -36[rbp]
	mov	esi, eax
	lea	rax, .LC5[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L14
	call	__stack_chk_fail@PLT
.L14:
	leave
	ret
	.size	fmhzuinagzwq, .-fmhzuinagzwq
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
