	.file	"test_file_3_1283.c"
	.intel_syntax noprefix
	.text
	.globl	main
	.type	main, @function
main:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	DWORD PTR -4[rbp], edi
	mov	QWORD PTR -16[rbp], rsi
	mov	rax, QWORD PTR -16[rbp]
	add	rax, 8
	mov	rax, QWORD PTR [rax]
	mov	rdi, rax
	call	pouurdracjsj
	mov	eax, 0
	call	hrsdwcjqkudo
	mov	eax, 0
	call	pxltobqakjeu
	mov	eax, 0
	leave
	ret
	.size	main, .-main
	.section	.rodata
	.align 8
.LC0:
	.string	"Write some strings, 4 letters only!"
.LC1:
	.string	"You wrote: %s\n"
	.text
	.globl	pouurdracjsj
	.type	pouurdracjsj, @function
pouurdracjsj:
	endbr64
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 88
	mov	QWORD PTR -104[rbp], rdi
	mov	rcx, QWORD PTR fs:40
	mov	QWORD PTR -56[rbp], rcx
	xor	ecx, ecx
	mov	rcx, rsp
	mov	r15, rcx
	mov	DWORD PTR -84[rbp], 4
	mov	ecx, DWORD PTR -84[rbp]
	mov	esi, DWORD PTR -84[rbp]
	movsx	rdi, ecx
	sub	rdi, 1
	mov	QWORD PTR -80[rbp], rdi
	movsx	rdi, ecx
	mov	QWORD PTR -128[rbp], rdi
	mov	QWORD PTR -120[rbp], 0
	movsx	rbx, ecx
	movsx	rdi, esi
	sub	rdi, 1
	mov	QWORD PTR -72[rbp], rdi
	movsx	rdi, ecx
	mov	r12, rdi
	mov	r13d, 0
	movsx	rdi, esi
	mov	rax, rdi
	mov	edx, 0
	mov	r14, r13
	imul	r14, rax
	mov	rdi, rdx
	imul	rdi, r12
	add	rdi, r14
	mul	r12
	add	rdi, rdx
	mov	rdx, rdi
	movsx	rax, ecx
	mov	r10, rax
	mov	r11d, 0
	movsx	rax, esi
	mov	r8, rax
	mov	r9d, 0
	mov	rdx, r11
	imul	rdx, r8
	mov	rax, r9
	imul	rax, r10
	lea	rdi, [rdx+rax]
	mov	rax, r10
	mul	r8
	add	rdi, rdx
	mov	rdx, rdi
	movsx	rdx, ecx
	movsx	rax, esi
	imul	rax, rdx
	mov	edx, 16
	sub	rdx, 1
	add	rax, rdx
	mov	esi, 16
	mov	edx, 0
	div	rsi
	imul	rax, rax, 16
	mov	rcx, rax
	and	rcx, -4096
	mov	rdx, rsp
	sub	rdx, rcx
.L4:
	cmp	rsp, rdx
	je	.L5
	sub	rsp, 4096
	or	QWORD PTR 4088[rsp], 0
	jmp	.L4
.L5:
	mov	rdx, rax
	and	edx, 4095
	sub	rsp, rdx
	mov	rdx, rax
	and	edx, 4095
	test	rdx, rdx
	je	.L6
	and	eax, 4095
	sub	rax, 8
	add	rax, rsp
	or	QWORD PTR [rax], 0
.L6:
	mov	rax, rsp
	add	rax, 0
	mov	QWORD PTR -64[rbp], rax
	mov	DWORD PTR -88[rbp], 0
	jmp	.L7
.L8:
	lea	rax, .LC0[rip]
	mov	rdi, rax
	call	puts@PLT
	mov	rax, QWORD PTR stdin[rip]
	mov	edx, DWORD PTR -88[rbp]
	movsx	rdx, edx
	mov	rcx, rdx
	imul	rcx, rbx
	mov	rdx, QWORD PTR -64[rbp]
	add	rcx, rdx
	mov	rdx, rax
	mov	esi, 30
	mov	rdi, rcx
	call	fgets@PLT
	mov	eax, DWORD PTR -88[rbp]
	cdqe
	imul	rax, rbx
	mov	rdx, rax
	mov	rax, QWORD PTR -64[rbp]
	add	rax, rdx
	mov	rsi, rax
	lea	rax, .LC1[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	add	DWORD PTR -88[rbp], 1
.L7:
	cmp	DWORD PTR -88[rbp], 3
	jle	.L8
	mov	rax, QWORD PTR -104[rbp]
	mov	rdi, rax
	call	strlen@PLT
	mov	rdx, rax
	mov	rax, QWORD PTR -64[rbp]
	mov	rcx, QWORD PTR -104[rbp]
	mov	rsi, rcx
	mov	rdi, rax
	call	memcpy@PLT
	mov	rsp, r15
	nop
	mov	rax, QWORD PTR -56[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L9
	call	__stack_chk_fail@PLT
.L9:
	lea	rsp, -40[rbp]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
	.size	pouurdracjsj, .-pouurdracjsj
	.section	.rodata
.LC2:
	.string	"Hello!"
	.text
	.globl	hrsdwcjqkudo
	.type	hrsdwcjqkudo, @function
hrsdwcjqkudo:
	endbr64
	push	rbp
	mov	rbp, rsp
	lea	rax, .LC2[rip]
	mov	rdi, rax
	call	puts@PLT
	nop
	pop	rbp
	ret
	.size	hrsdwcjqkudo, .-hrsdwcjqkudo
	.section	.rodata
.LC3:
	.string	"%12s"
.LC4:
	.string	"You entered: %s\n"
	.text
	.globl	pxltobqakjeu
	.type	pxltobqakjeu, @function
pxltobqakjeu:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	movabs	rax, 8027420523743700328
	mov	QWORD PTR -20[rbp], rax
	mov	DWORD PTR -12[rbp], 1679844463
	mov	DWORD PTR -24[rbp], 10
	lea	rax, -20[rbp]
	mov	rsi, rax
	lea	rax, .LC3[rip]
	mov	rdi, rax
	mov	eax, 0
	call	__isoc99_scanf@PLT
	mov	DWORD PTR -28[rbp], 0
	jmp	.L12
.L15:
	mov	eax, DWORD PTR -28[rbp]
	cdqe
	movzx	eax, BYTE PTR -20[rbp+rax]
	cmp	al, 10
	jne	.L13
	mov	eax, DWORD PTR -28[rbp]
	cdqe
	mov	BYTE PTR -20[rbp+rax], 0
	jmp	.L14
.L13:
	add	DWORD PTR -28[rbp], 1
.L12:
	mov	eax, DWORD PTR -28[rbp]
	cmp	eax, DWORD PTR -24[rbp]
	jle	.L15
.L14:
	lea	rax, -20[rbp]
	mov	rsi, rax
	lea	rax, .LC4[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L16
	call	__stack_chk_fail@PLT
.L16:
	leave
	ret
	.size	pxltobqakjeu, .-pxltobqakjeu
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
