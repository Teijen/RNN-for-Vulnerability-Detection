	.file	"test_file_3_1364.c"
	.intel_syntax noprefix
	.text
	.globl	main
	.type	main, @function
main:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16
	mov	DWORD PTR -4[rbp], edi
	mov	QWORD PTR -16[rbp], rsi
	mov	eax, 0
	call	pvtkmghmizwz
	mov	eax, 0
	call	xytlkqgaaiey
	mov	rax, QWORD PTR -16[rbp]
	add	rax, 8
	mov	rax, QWORD PTR [rax]
	mov	rdi, rax
	call	mlwhovnblrse
	mov	eax, 0
	leave
	ret
	.size	main, .-main
	.section	.rodata
.LC0:
	.string	"%15s"
.LC1:
	.string	"abc"
	.text
	.globl	pvtkmghmizwz
	.type	pvtkmghmizwz, @function
pvtkmghmizwz:
	endbr64
	push	rbp
	mov	rbp, rsp
	sub	rsp, 32
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -8[rbp], rax
	xor	eax, eax
	lea	rax, -23[rbp]
	mov	rsi, rax
	lea	rax, .LC0[rip]
	mov	rdi, rax
	mov	eax, 0
	call	__isoc99_scanf@PLT
	lea	rax, -23[rbp]
	add	rax, 2
	mov	QWORD PTR -32[rbp], rax
	lea	rcx, .LC1[rip+2]
	mov	rax, QWORD PTR -32[rbp]
	mov	edx, 5
	mov	rsi, rcx
	mov	rdi, rax
	call	memcpy@PLT
	mov	rax, QWORD PTR -32[rbp]
	mov	rdi, rax
	call	puts@PLT
	nop
	mov	rax, QWORD PTR -8[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L4
	call	__stack_chk_fail@PLT
.L4:
	leave
	ret
	.size	pvtkmghmizwz, .-pvtkmghmizwz
	.section	.rodata
.LC2:
	.string	"%d, %d, %d, %d\n"
	.text
	.globl	xytlkqgaaiey
	.type	xytlkqgaaiey, @function
xytlkqgaaiey:
	endbr64
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 80
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -40[rbp], rax
	xor	eax, eax
	mov	rax, rsp
	mov	r12, rax
	mov	DWORD PTR -96[rbp], 4
	mov	DWORD PTR -92[rbp], -5
	mov	DWORD PTR -88[rbp], 2
	mov	edx, DWORD PTR -96[rbp]
	mov	eax, DWORD PTR -92[rbp]
	add	edx, eax
	mov	eax, DWORD PTR -88[rbp]
	add	eax, edx
	mov	DWORD PTR -84[rbp], eax
	mov	eax, DWORD PTR -96[rbp]
	sub	eax, DWORD PTR -92[rbp]
	sub	eax, DWORD PTR -88[rbp]
	mov	DWORD PTR -80[rbp], eax
	mov	eax, DWORD PTR -96[rbp]
	cdq
	idiv	DWORD PTR -92[rbp]
	mov	edx, eax
	mov	eax, DWORD PTR -88[rbp]
	imul	eax, edx
	mov	DWORD PTR -76[rbp], eax
	mov	eax, DWORD PTR -96[rbp]
	imul	eax, DWORD PTR -92[rbp]
	cdq
	idiv	DWORD PTR -88[rbp]
	mov	DWORD PTR -72[rbp], eax
	mov	DWORD PTR -68[rbp], 35
	mov	esi, DWORD PTR -72[rbp]
	mov	ecx, DWORD PTR -76[rbp]
	mov	edx, DWORD PTR -80[rbp]
	mov	eax, DWORD PTR -84[rbp]
	mov	r8d, esi
	mov	esi, eax
	lea	rax, .LC2[rip]
	mov	rdi, rax
	mov	eax, 0
	call	printf@PLT
	mov	ebx, DWORD PTR -68[rbp]
	movsx	rax, ebx
	sub	rax, 1
	mov	QWORD PTR -64[rbp], rax
	movsx	rax, ebx
	mov	QWORD PTR -112[rbp], rax
	mov	QWORD PTR -104[rbp], 0
	movsx	rax, ebx
	mov	r14, rax
	mov	r15d, 0
	movsx	rax, ebx
	mov	edx, 16
	sub	rdx, 1
	add	rax, rdx
	mov	edi, 16
	mov	edx, 0
	div	rdi
	imul	rax, rax, 16
	mov	rcx, rax
	and	rcx, -4096
	mov	rdx, rsp
	sub	rdx, rcx
.L6:
	cmp	rsp, rdx
	je	.L7
	sub	rsp, 4096
	or	QWORD PTR 4088[rsp], 0
	jmp	.L6
.L7:
	mov	rdx, rax
	and	edx, 4095
	sub	rsp, rdx
	mov	rdx, rax
	and	edx, 4095
	test	rdx, rdx
	je	.L8
	and	eax, 4095
	sub	rax, 8
	add	rax, rsp
	or	QWORD PTR [rax], 0
.L8:
	mov	rax, rsp
	add	rax, 0
	mov	QWORD PTR -56[rbp], rax
	mov	rdx, QWORD PTR stdin[rip]
	mov	rax, QWORD PTR -56[rbp]
	mov	esi, ebx
	mov	rdi, rax
	call	fgets@PLT
	movsx	rdx, ebx
	mov	rcx, QWORD PTR -56[rbp]
	lea	rax, -41[rbp]
	mov	rsi, rcx
	mov	rdi, rax
	call	memcpy@PLT
	lea	rax, -41[rbp]
	mov	rdi, rax
	call	puts@PLT
	mov	rsp, r12
	nop
	mov	rax, QWORD PTR -40[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L9
	call	__stack_chk_fail@PLT
.L9:
	lea	rsp, -32[rbp]
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret
	.size	xytlkqgaaiey, .-xytlkqgaaiey
	.section	.rodata
.LC3:
	.string	"Hello mr/ms:       "
	.text
	.globl	mlwhovnblrse
	.type	mlwhovnblrse, @function
mlwhovnblrse:
	endbr64
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 64
	mov	QWORD PTR -72[rbp], rdi
	mov	rax, QWORD PTR fs:40
	mov	QWORD PTR -40[rbp], rax
	xor	eax, eax
	mov	rax, rsp
	mov	r12, rax
	lea	rax, .LC3[rip]
	mov	QWORD PTR -64[rbp], rax
	mov	rax, QWORD PTR -72[rbp]
	mov	rdi, rax
	call	strlen@PLT
	mov	rbx, rax
	mov	rax, QWORD PTR -64[rbp]
	mov	rdi, rax
	call	strlen@PLT
	add	rax, rbx
	mov	rdx, rax
	sub	rdx, 1
	mov	QWORD PTR -56[rbp], rdx
	mov	QWORD PTR -96[rbp], rax
	mov	QWORD PTR -88[rbp], 0
	mov	r14, rax
	mov	r15d, 0
	mov	edx, 16
	sub	rdx, 1
	add	rax, rdx
	mov	esi, 16
	mov	edx, 0
	div	rsi
	imul	rax, rax, 16
	mov	rcx, rax
	and	rcx, -4096
	mov	rdx, rsp
	sub	rdx, rcx
.L11:
	cmp	rsp, rdx
	je	.L12
	sub	rsp, 4096
	or	QWORD PTR 4088[rsp], 0
	jmp	.L11
.L12:
	mov	rdx, rax
	and	edx, 4095
	sub	rsp, rdx
	mov	rdx, rax
	and	edx, 4095
	test	rdx, rdx
	je	.L13
	and	eax, 4095
	sub	rax, 8
	add	rax, rsp
	or	QWORD PTR [rax], 0
.L13:
	mov	rax, rsp
	add	rax, 0
	mov	QWORD PTR -48[rbp], rax
	mov	rdx, QWORD PTR -64[rbp]
	mov	rax, QWORD PTR -48[rbp]
	mov	rsi, rdx
	mov	rdi, rax
	call	strcat@PLT
	mov	rax, QWORD PTR -72[rbp]
	mov	rdi, rax
	call	strlen@PLT
	mov	rbx, rax
	mov	rax, QWORD PTR -64[rbp]
	mov	rdi, rax
	call	strlen@PLT
	mov	rdx, QWORD PTR -48[rbp]
	lea	rcx, [rax+rdx]
	mov	rax, QWORD PTR -72[rbp]
	mov	rdx, rbx
	mov	rsi, rax
	mov	rdi, rcx
	call	strncpy@PLT
	mov	rax, QWORD PTR -48[rbp]
	mov	rdi, rax
	call	puts@PLT
	mov	rsp, r12
	nop
	mov	rax, QWORD PTR -40[rbp]
	sub	rax, QWORD PTR fs:40
	je	.L14
	call	__stack_chk_fail@PLT
.L14:
	lea	rsp, -32[rbp]
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret
	.size	mlwhovnblrse, .-mlwhovnblrse
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
