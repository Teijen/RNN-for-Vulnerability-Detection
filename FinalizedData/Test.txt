__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 call vzkuthndvivc
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
vzkuthndvivc : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ysywbpijqaoe
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
ysywbpijqaoe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC1 [ rip ] 
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L7
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 cvtsd2ss xmm0 , xmm0
 call ofxulezqoyct
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
ofxulezqoyct : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC2 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 lea rdi , .LC3 [ rip ] 
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bkcqvyvjukdn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov eax , 0
 leave
 ret
bkcqvyvjukdn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 mov ecx , eax
 sar ecx
 mov eax , edx
 sar eax , 31
 sub ecx , eax
 mov eax , ecx
 mov DWORD PTR -68 [ rbp ] , eax
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 sub edx , eax
 mov eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unoobuvgrdyy
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
unoobuvgrdyy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L6
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L8
.L6 : 
 mov eax , 0
.L8 : 
 mov rcx , QWORD PTR -8 [ rbp ] 
 xor rcx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mghxoupteyna
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
mghxoupteyna : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov eax , 0
 call sajtryldkqiv
 mov eax , 0
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
sajtryldkqiv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sigwwkwivedi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov eax , 0
 leave
 ret
sigwwkwivedi : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rdi , .LC0 [ rip ] 
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vxfgafutgiiu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 leave
 ret
vxfgafutgiiu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L5
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zfrvtevnfusm
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
zfrvtevnfusm : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L9
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 jmp .L10
.L9 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fejgqfaldmyl
 mov eax , 0
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
fejgqfaldmyl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L9
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 call qrixpxqiencd
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qrixpxqiencd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -36 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 cvtsd2ss xmm0 , xmm0
 call ofxulezqoyct
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 leave
 ret
 .align 8
ofxulezqoyct : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC0 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 lea rdi , .LC1 [ rip ] 
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 call dxunkiextkuy
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
dxunkiextkuy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC5 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hhywcshfockg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 leave
 ret
hhywcshfockg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 call vejlojwlwput
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
vejlojwlwput : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC5 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call jpdxegobykch
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
jpdxegobykch : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L9
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -136 [ rbp ] 
 lea rcx , -128 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L10
.L9 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 lea rcx , -128 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L10 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dpqagoyjulvb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 leave
 ret
dpqagoyjulvb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 call wdgubjeclwku
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
wdgubjeclwku : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rdi , .LC1 [ rip ] 
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cnfjtnrunzlz
 mov eax , 0
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
cnfjtnrunzlz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rdi , .LC0 [ rip ] 
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rdi , .LC1 [ rip ] 
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 call ztvesqaqifnx
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ztvesqaqifnx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call flxfczmozvre
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 leave
 ret
flxfczmozvre : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rdi , .LC0 [ rip ] 
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L4
 mov DWORD PTR -340 [ rbp ] , 256
.L4 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 lea rdi , .LC2 [ rip ] 
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -328 [ rbp ] 
 lea rcx , -320 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC5 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 call bqkojotqszem
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
bqkojotqszem : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC2 [ rip ] 
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ykadrgiacufd
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ykadrgiacufd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , rdx
 mov rcx , -1
 mov rsi , rax
 mov eax , 0
 mov rdi , rsi
 repnz scasb
 mov rax , rcx
 not rax
 sub rax , 1
 add rax , rdx
 movabs rcx , 8245282155717748040
 mov QWORD PTR [ rax ] , rcx
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rmpogutedbcz
 mov eax , 0
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
rmpogutedbcz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L5
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L11
.L5 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call wkwtnxqeghbl
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
wkwtnxqeghbl : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L9
.L11 : 
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L10
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -100 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L11
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rcx , -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rpnzwadrnrzs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov eax , 0
 leave
 ret
rpnzwadrnrzs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L9 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L5
.L6 : 
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L6
 jmp .L7
.L8 : 
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L8
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fziqraamdaru
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 leave
 ret
 .align 8
fziqraamdaru : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC0 [ rip ] 
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rcx , QWORD PTR -8 [ rbp ] 
 xor rcx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov eax , 0
 call zqwxmtdrcnpx
 mov eax , 0
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
zqwxmtdrcnpx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L5
.L6 : 
 add DWORD PTR -132 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L6
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L8
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 call gnccygjiwrgm
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
gnccygjiwrgm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC5 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gnccygjiwrgm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 leave
 ret
gnccygjiwrgm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC5 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 call ilucmfpaxlsl
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ilucmfpaxlsl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rdpanjgrkcen
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 leave
 ret
rdpanjgrkcen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rbx , QWORD PTR -56 [ rbp ] 
 xor rbx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocmqakymvity
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov eax , 0
 leave
 ret
ocmqakymvity : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call jpdxegobykch
 mov eax , 0
 leave
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
jpdxegobykch : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L9
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -136 [ rbp ] 
 lea rcx , -128 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L10
.L9 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 lea rcx , -128 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L10 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 call ehrtcjucjizb
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ehrtcjucjizb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L6 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dqlylpuzrlgq
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dqlylpuzrlgq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rsi , rsp
 sub rsi , rdx
 mov rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 mov rax , QWORD PTR -104 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call otznowyhdpnj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xzjpyxywkmil
 mov eax , 0
 leave
 ret
otznowyhdpnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xzjpyxywkmil : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mgykwdikutdj
 mov eax , 0
 call tjvnnhgolqoo
 mov eax , 0
 leave
 ret
mgykwdikutdj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
tjvnnhgolqoo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L5
.L8 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L6
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L7
.L6 : 
 add DWORD PTR -28 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L8
.L7 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov eax , 0
 call fziqraamdaru
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
fziqraamdaru : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rdi , .LC2 [ rip ] 
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC3 [ rip ] 
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rdi , .LC4 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rcx , QWORD PTR -8 [ rbp ] 
 xor rcx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov eax , 0
 leave
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vodnoqfwdnjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xmutcvyejlwc
 mov eax , 0
 leave
 ret
vodnoqfwdnjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xmutcvyejlwc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L7
 mov edi , 10
 call putchar @ PLT
 nop
 add rsp , 40
 pop rbx
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kaquzgyfscie
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call rbsvgiedmvjt
 mov eax , 0
 leave
 ret
kaquzgyfscie : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC0 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC1 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rbsvgiedmvjt : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rdx , rax
 and rdx , -4096
 mov rcx , rsp
 sub rcx , rdx
 mov rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rdi , .LC2 [ rip ] 
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 xor rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long  1f - 0f
 .long  4f - 1f
 .long  5
0 : 
1 : 
 .align 8
 .long  0xc0000002
 .long  3f - 2f
2 : 
 .long  0x3
3 : 
 .align 8
4 : 

