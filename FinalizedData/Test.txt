__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call qegswzvgvtlz
 mov eax , 0
 call fanqrfjqffpe
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 leave
 ret
qegswzvgvtlz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov QWORD PTR -56 [ rbp ] , rdi
 mov DWORD PTR -60 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 call uhixokfdnayx
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L9
.L11 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L10
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -100 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L11
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L14
.L15 : 
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L15
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vdqqmxeirsbx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L16
.L19 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L17
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L18
.L17 : 
 add DWORD PTR -28 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L19
.L18 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gmevqtnfsdog
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call njibzicktiyl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ctrvvluihuhf
 mov eax , 0
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
njibzicktiyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov QWORD PTR -168 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -168 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ctrvvluihuhf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call feizjbvxxfjo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call clskshqphbip
 mov eax , 0
 call vtebtqzyupir
 mov eax , 0
 leave
 ret
 .align 8
feizjbvxxfjo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
clskshqphbip : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rax
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L11
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L16
.L11 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L13
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L14
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L16 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ugfnfnzigsrf
 mov eax , 0
 call yggjeznqrxnr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L14 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L15
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kalfckmrnucv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dngpdrewrcfr
 mov eax , 0
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
dngpdrewrcfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 288
 mov QWORD PTR -280 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -280 [ rbp ] 
 lea rax , -272 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 call dqolmbfqphap
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC5 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L11
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lyulcezkytfy
 mov eax , 0
 call jmpwobtufiul
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov eax , 0
 leave
 ret
lyulcezkytfy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
jmpwobtufiul : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -72 [ rbp ] , 50
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -72 [ rbp ] 
 mov ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call phhoqwnyhwci
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L4
.L7 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L10
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L13
.L10 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lzhuvpopmudj
 mov eax , 0
 call njiazvqwcbkn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tvhtzhlxluob
 mov eax , 0
 leave
 ret
lzhuvpopmudj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
njiazvqwcbkn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L11
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
tvhtzhlxluob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 call hunrlixhxuqe
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L5
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L10
.L11 : 
 add DWORD PTR -132 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L11
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L13
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L11
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L12
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 add DWORD PTR -20 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L13
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yaewxkwxmrqk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wwudzaktnwvo
 mov eax , 0
 call fanqrfjqffpe
 mov eax , 0
 leave
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
wwudzaktnwvo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov QWORD PTR -152 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -140 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -136 [ rbp ] , edx
 mov edx , DWORD PTR -136 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -136 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -132 [ rbp ] , edx
 mov edx , DWORD PTR -132 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -132 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -128 [ rbp ] , eax
 mov ecx , DWORD PTR -128 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -128 [ rbp ] , edx
 mov edx , DWORD PTR -136 [ rbp ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -128 [ rbp ] 
 add eax , edx
 mov DWORD PTR -124 [ rbp ] , eax
 mov eax , DWORD PTR -136 [ rbp ] 
 sub eax , DWORD PTR -132 [ rbp ] 
 sub eax , DWORD PTR -128 [ rbp ] 
 mov DWORD PTR -120 [ rbp ] , eax
 mov edx , DWORD PTR -136 [ rbp ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -128 [ rbp ] 
 mov DWORD PTR -116 [ rbp ] , eax
 mov rdx , QWORD PTR -152 [ rbp ] 
 lea rax , -112 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call duinkpvfxhik
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 call eklheveznbgh
 mov eax , 0
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eiytlelnfqwa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bzvmzslneagm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pwsvhyxpeqcx
 mov eax , 0
 leave
 ret
eiytlelnfqwa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
bzvmzslneagm : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L8
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -108 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -144 [ rbp ] , rdx
 mov QWORD PTR -136 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L17
.L8 : 
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
.L17 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
pwsvhyxpeqcx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L19 : 
 cmp rsp , rdx
 je .L20
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L19
.L20 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L21
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L21 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movabs rsi , 8245282155717748040
 mov QWORD PTR [ rax ] , rsi
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tznkfgdbxmag
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ctrvvluihuhf
 mov eax , 0
 leave
 ret
tznkfgdbxmag : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -56 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -56 [ rbp ] 
 add eax , edx
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 mov edx , DWORD PTR -56 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -56 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 add eax , edx
 mov DWORD PTR -36 [ rbp ] , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L6
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L7
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L8 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 mov eax , 0
 leave
 ret
ctrvvluihuhf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nizfgrhfmzwv
 mov eax , 0
 call ycumhbjkobjs
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L16
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L17
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L19
.L17 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L19
.L16 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L18
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L19
.L18 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L19 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cbibyvccnwpj
 mov eax , 0
 call lazbzpjvuxme
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 leave
 ret
cbibyvccnwpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
lazbzpjvuxme : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call mlkaqullpnnw
 mov eax , 0
 leave
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L5
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L5 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
mlkaqullpnnw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC2 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qdgzeikacpgo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 leave
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L12
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L13
.L12 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call smytpxhigvcy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pxsnksvbavce
 mov eax , 0
 call hzlvjfetptto
 mov eax , 0
 leave
 ret
smytpxhigvcy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L5
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L6
.L5 : 
 add DWORD PTR -28 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
pxsnksvbavce : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L10
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L16
.L10 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L16 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L18
.L20 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L19
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 add DWORD PTR -20 [ rbp ] , 1
.L18 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L20
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hrvcejglwvwz
 mov eax , 0
 call mlxkhxhtntmv
 mov eax , 0
 call rfgcepgasunz
 mov eax , 0
 leave
 ret
hrvcejglwvwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
mlxkhxhtntmv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -48 [ rbp ] 
 add rax , rdx
 movabs rsi , 2334392307038315863
 movabs rdi , 8079569230801956724
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 2318348173487599474
 mov QWORD PTR 16 [ rax ] , rcx
 mov BYTE PTR 24 [ rax ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wwkfiwtlrikm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L15
.L17 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov eax , 0
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L12
.L13 : 
 add DWORD PTR -8 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L13
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L14
.L15 : 
 add DWORD PTR -4 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L15
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hzlvjfetptto
 mov eax , 0
 call agfrdqbfvanm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call kikfwgfupgxg
 mov eax , 0
 leave
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
agfrdqbfvanm : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
kikfwgfupgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC10 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC11 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC12 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L12
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L12
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cnixrukgtgzd
 mov eax , 0
 call fmhzuinagzwq
 mov eax , 0
 call oeyozhdsqnhj
 mov eax , 0
 leave
 ret
cnixrukgtgzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
fmhzuinagzwq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -36 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov eax , 0
 call akqymshefhhe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov eax , 0
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L9
.L12 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L10
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L11
.L10 : 
 add DWORD PTR -28 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L12
.L11 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L16 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L16
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ashssblaeigs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC0 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L13
.L16 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L14 : 
 add DWORD PTR -16 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L15
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L16
.L15 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cgsajkqojmuc
 mov eax , 0
 call gapojmguwjub
 mov eax , 0
 call efelwzeculzn
 mov eax , 0
 leave
 ret
cgsajkqojmuc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
gapojmguwjub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -176 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -176 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -176 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -176 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
efelwzeculzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 call cyqxorzbrxuh
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -4 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L5
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
cyqxorzbrxuh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L8
.L7 : 
 mov eax , 1
 jmp .L9
.L8 : 
 mov eax , 0
.L9 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L10
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L10
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L10
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L10
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L11
.L10 : 
 mov eax , 1
 jmp .L12
.L11 : 
 mov eax , 0
.L12 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L13
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L14
.L13 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L14 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lzhuvpopmudj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call jujchwfcxryk
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 leave
 ret
lzhuvpopmudj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
jujchwfcxryk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L15
.L18 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L16
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L17
.L16 : 
 add DWORD PTR -28 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L18
.L17 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qlpaezcmkarp
 mov eax , 0
 call oeyozhdsqnhj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 leave
 ret
qlpaezcmkarp : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L10
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L11
.L10 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L11 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 call jamjufztgkya
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC0 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
jamjufztgkya : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call uhixokfdnayx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L6
.L7 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L13
.L15 : 
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L14
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 add DWORD PTR -100 [ rbp ] , 1
.L13 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L15
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oeyozhdsqnhj
 mov eax , 0
 call ijfhuvyfujdf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qitjlbmnliwr
 mov eax , 0
 leave
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ijfhuvyfujdf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L6
.L7 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L6 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L7
 nop
 nop
 leave
 ret
qitjlbmnliwr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call goaztayvxlif
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call odthtcwrcfcb
 mov eax , 0
 call oxeggdeaemmh
 mov eax , 0
 leave
 ret
 .align 8
goaztayvxlif : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
odthtcwrcfcb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 call maqnfazfvjvg
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L6
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L6 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qekjcxmkxvgo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdokiymitgtu
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xdokiymitgtu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlwstubxloqr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call cmdmolbpalfx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov eax , 0
 leave
 ret
qlwstubxloqr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
cmdmolbpalfx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov DWORD PTR -132 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 cmp DWORD PTR -132 [ rbp ] , 10
 jle .L8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 jmp .L9
.L8 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
.L9 : 
 cmp DWORD PTR -132 [ rbp ] , 49
 jg .L10
 mov DWORD PTR -132 [ rbp ] , 50
.L10 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L16
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L17
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L18
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L19
.L18 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L19
.L17 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L19
.L16 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xytlkqgaaiey
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call hxzcnysforjc
 mov eax , 0
 call fanqrfjqffpe
 mov eax , 0
 leave
 ret
xytlkqgaaiey : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -96 [ rbp ] , 4
 mov DWORD PTR -92 [ rbp ] , -5
 mov DWORD PTR -88 [ rbp ] , 2
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cdq
 idiv DWORD PTR -92 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , DWORD PTR -92 [ rbp ] 
 cdq
 idiv DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov DWORD PTR -68 [ rbp ] , 35
 mov esi , DWORD PTR -72 [ rbp ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ebx , DWORD PTR -68 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -64 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 movsx rdx , ebx
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -41 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -41 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
hxzcnysforjc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vhmtfiqscpwh
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call ybnzqaimubdo
 mov eax , 0
 leave
 ret
vhmtfiqscpwh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L9 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L5
.L6 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L6
 jmp .L7
.L8 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L8
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L12 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L13
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .align 8
ybnzqaimubdo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L20 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L20
.L19 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L21
.L22 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L21 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L22
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L23
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L24
.L23 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L24 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L25
 call __stack_chk_fail @ PLT
.L25 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cpomxhuiqqon
 mov eax , 0
 call hzlvjfetptto
 mov eax , 0
 call ueozzdnnmfyv
 mov eax , 0
 leave
 ret
cpomxhuiqqon : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -64 [ rbp ] 
 mov edx , 50
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L6
.L8 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L8
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ueozzdnnmfyv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call oblihoqfkqvy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L4 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kwjypsxtjxpr
 mov eax , 0
 call xyohhucwcrgk
 mov eax , 0
 call oubyowhiekru
 mov eax , 0
 leave
 ret
kwjypsxtjxpr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L4
.L6 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 49
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L5
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -132 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -132 [ rbp ] , 2
 jle .L6
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .align 8
xyohhucwcrgk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L16 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L15
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L16
.L15 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L17
.L18 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L18
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L19
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L20
.L19 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L20 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
oubyowhiekru : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L23
.L24 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L23 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L24
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L25
 call __stack_chk_fail @ PLT
.L25 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cbibyvccnwpj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call osivhbcxjonv
 mov eax , 0
 leave
 ret
cbibyvccnwpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L14
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L14 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
osivhbcxjonv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -122 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov esi , 10
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov rcx , QWORD PTR -136 [ rbp ] 
 lea rdx , -122 [ rbp ] 
 lea rax , -122 [ rbp ] 
 lea rsi , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -122 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 call tguldezdfcwl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L11
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L12
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L13
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L13 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L12 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ybequloshtrt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call arpdayuwutjh
 mov eax , 0
 call ochtivcueybs
 mov eax , 0
 leave
 ret
ybequloshtrt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
arpdayuwutjh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L7
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ochtivcueybs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xmgmdgvfkhub
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pnxgivxtjwdh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov eax , 0
 leave
 ret
xmgmdgvfkhub : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -96 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
pnxgivxtjwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 4
 mov eax , DWORD PTR -84 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -76 [ rbp ] , eax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L11
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L12
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L13
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L13 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L12 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 call oblihoqfkqvy
 mov eax , 0
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nizfgrhfmzwv
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC6 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 call xfvufpmexnyz
 mov eax , 0
 call ztzaowjbnoed
 mov eax , 0
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xfvufpmexnyz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -48 [ rbp ] , -5
 mov DWORD PTR -44 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 add eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 sub eax , DWORD PTR -48 [ rbp ] 
 sub eax , DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -28 [ rbp ] , eax
 mov esi , DWORD PTR -28 [ rbp ] 
 mov ecx , DWORD PTR -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -23 [ rbp ] 
 mov esi , 35
 mov rdi , rax
 call fgets @ PLT
 lea rax , -23 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
ztzaowjbnoed : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L14
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L17
.L14 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ftxsahsrawrv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhkhcuurjmt
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 leave
 ret
ftxsahsrawrv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
gvhkhcuurjmt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov eax , 0
 call gzphakxspyuf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L8
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L8 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pqdcitotpbfg
 mov eax , 0
 call ediyavermwpa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov eax , 0
 leave
 ret
pqdcitotpbfg : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -122 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -122 [ rbp ] 
 add rax , rdx
 movabs rcx , 8031924123371070824
 mov QWORD PTR [ rax ] , rcx
 mov DWORD PTR 8 [ rax ] , 6581362
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 90
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -122 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -122 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L6
.L7 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L10
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L12
.L10 : 
 mov eax , 0
.L12 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L6
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L6 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L13
.L14 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L13 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L14
 nop
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L10
.L11 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L11
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lczjvypofmvf
 mov eax , 0
 call oxeggdeaemmh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tisjysstguln
 mov eax , 0
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
tisjysstguln : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -68 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 call wpfmvqfnircf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call kurvnplwrsho
 mov eax , 0
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
wpfmvqfnircf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
kurvnplwrsho : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov DWORD PTR -124 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -88 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -88 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -124 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L6
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -4 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L10
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L12
.L15 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 add DWORD PTR -12 [ rbp ] , 1
.L12 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L15
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hunrlixhxuqe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call mlkaqullpnnw
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
mlkaqullpnnw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC1 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pouurdracjsj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call hlblkqnmxmod
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov eax , 0
 leave
 ret
 .align 8
pouurdracjsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rcx , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rcx
 xor ecx , ecx
 mov rcx , rsp
 mov r15 , rcx
 mov DWORD PTR -84 [ rbp ] , 4
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov esi , DWORD PTR -84 [ rbp ] 
 movsx rdi , ecx
 sub rdi , 1
 mov QWORD PTR -80 [ rbp ] , rdi
 movsx rdi , ecx
 mov QWORD PTR -128 [ rbp ] , rdi
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rbx , ecx
 movsx rdi , esi
 sub rdi , 1
 mov QWORD PTR -72 [ rbp ] , rdi
 movsx rdi , ecx
 mov r12 , rdi
 mov r13d , 0
 movsx rdi , esi
 mov rax , rdi
 mov edx , 0
 mov r14 , r13
 imul r14 , rax
 mov rdi , rdx
 imul rdi , r12
 add rdi , r14
 mul r12
 add rdi , rdx
 mov rdx , rdi
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , esi
 mov r8 , rax
 mov r9d , 0
 mov rdx , r11
 imul rdx , r8
 mov rax , r9
 imul rax , r10
 lea rdi , [ rdx+rax ] 
 mov rax , r10
 mul r8
 add rdi , rdx
 mov rdx , rdi
 movsx rdx , ecx
 movsx rax , esi
 imul rax , rdx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -88 [ rbp ] , 0
 jmp .L7
.L8 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR stdin [ rip ] 
 mov edx , DWORD PTR -88 [ rbp ] 
 movsx rdx , edx
 mov rcx , rdx
 imul rcx , rbx
 mov rdx , QWORD PTR -64 [ rbp ] 
 add rcx , rdx
 mov rdx , rax
 mov esi , 30
 mov rdi , rcx
 call fgets @ PLT
 mov eax , DWORD PTR -88 [ rbp ] 
 cdqe
 imul rax , rbx
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -88 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -88 [ rbp ] , 3
 jle .L8
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r15
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
hlblkqnmxmod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L19 : 
 cmp rsp , rdx
 je .L20
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L19
.L20 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L21
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L21 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L22
.L23 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L22 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L23
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L24
 call __stack_chk_fail @ PLT
.L24 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nizfgrhfmzwv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ypnxxakoaims
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call esmdctvgvoaj
 mov eax , 0
 leave
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
esmdctvgvoaj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wnffthpyxcdu
 mov eax , 0
 call gjsjqqfdmjni
 mov eax , 0
 call pvtkmghmizwz
 mov eax , 0
 leave
 ret
wnffthpyxcdu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gjsjqqfdmjni : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC5 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call sbnxmdkkwhpq
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L6
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L7
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L7 : 
 add DWORD PTR -8 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L8
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L9
.L8 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L11
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L11 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call rfgcepgasunz
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call gaprkudsjlix
 mov eax , 0
 call pvtkmghmizwz
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
gaprkudsjlix : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov QWORD PTR -64 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC6 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vjzunlqqzsyj
 mov eax , 0
 call xsinehmjnsfr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 leave
 ret
vjzunlqqzsyj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xsinehmjnsfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L11
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L12
.L11 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L12 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ashssblaeigs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC0 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L5
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L7
.L5 : 
 mov eax , 0
.L7 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call hunrlixhxuqe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call trreknwaqrxz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 leave
 ret
trreknwaqrxz : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -104 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 add rdx , 10
 mov rsi , rax
 mov rdi , rdx
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qqtyjfrsbcre
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov eax , 0
 call gyjxvpsicrtv
 mov eax , 0
 leave
 ret
qqtyjfrsbcre : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
gyjxvpsicrtv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -36 [ rbp ] , 64
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L9
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L10
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov eax , 0
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wrziecznhrgd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 leave
 ret
wrziecznhrgd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pvtkmghmizwz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call jsczuwnqybnx
 mov eax , 0
 call bfojvsbuecxe
 mov eax , 0
 leave
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
jsczuwnqybnx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -75 [ rbp ] , al
 lea rax , .LC3 [ rip ] 
 mov BYTE PTR -74 [ rbp ] , al
 lea rax , .LC4 [ rip ] 
 mov BYTE PTR -70 [ rbp ] , al
 mov ecx , DWORD PTR -100 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -96 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 movsx rax , ecx
 mov rdx , rax
 mov esi , 50
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -100 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
bfojvsbuecxe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L11
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L11
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L11
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L11
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L12
.L11 : 
 mov eax , 1
 jmp .L13
.L12 : 
 mov eax , 0
.L13 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L14
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L14
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L14
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L14
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L15
.L14 : 
 mov eax , 1
 jmp .L16
.L15 : 
 mov eax , 0
.L16 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L17
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L18
.L17 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L19
.L18 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L13
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L14
.L13 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L14 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC2 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rwunkmogttly
 mov eax , 0
 call feizjbvxxfjo
 mov eax , 0
 call xytlkqgaaiey
 mov eax , 0
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
feizjbvxxfjo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
xytlkqgaaiey : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -96 [ rbp ] , 4
 mov DWORD PTR -92 [ rbp ] , -5
 mov DWORD PTR -88 [ rbp ] , 2
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cdq
 idiv DWORD PTR -92 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , DWORD PTR -92 [ rbp ] 
 cdq
 idiv DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov DWORD PTR -68 [ rbp ] , 35
 mov esi , DWORD PTR -72 [ rbp ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ebx , DWORD PTR -68 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -64 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 movsx rdx , ebx
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -41 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -41 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qdgzeikacpgo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 leave
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call usbrzgblavyn
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call kurvnplwrsho
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mwuvaunulaca
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
usbrzgblavyn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L6
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
kurvnplwrsho : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov DWORD PTR -124 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -88 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -88 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -124 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
mwuvaunulaca : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L14
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L14 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ybnzqaimubdo
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 call fdevzikixvga
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
ybnzqaimubdo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L11
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L17
.L18 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L18
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fanqrfjqffpe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call errjklfnnpoa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call arpdayuwutjh
 mov eax , 0
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
errjklfnnpoa : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -84 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
arpdayuwutjh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L17
.L19 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdokiymitgtu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call ycumhbjkobjs
 mov eax , 0
 leave
 ret
xdokiymitgtu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L23
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L24
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L26
.L24 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L26
.L23 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L25
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L26
.L25 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L26 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 call oblihoqfkqvy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tzvjbtvkejes
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ckyojnaisxvc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tvhtzhlxluob
 mov eax , 0
 leave
 ret
tzvjbtvkejes : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -100 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -100 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 cmp DWORD PTR -92 [ rbp ] , 99
 jle .L4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L5
.L4 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L5 : 
 mov eax , DWORD PTR -92 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ckyojnaisxvc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L11
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L17
.L11 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tvhtzhlxluob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dbmdegrltknb
 mov eax , 0
 call ueozzdnnmfyv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xmgmdgvfkhub
 mov eax , 0
 leave
 ret
dbmdegrltknb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rdx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ueozzdnnmfyv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
xmgmdgvfkhub : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -96 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zqjaektwachr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 call vawlugafkosd
 mov eax , 0
 leave
 ret
zqjaektwachr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR -56 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L9
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L10
.L9 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L10 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call axekkffjccge
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call zhthpxtaxnoc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call errjklfnnpoa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vrkfupldzmmi
 mov eax , 0
 leave
 ret
zhthpxtaxnoc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
errjklfnnpoa : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -84 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
vrkfupldzmmi : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L16
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
.L16 : 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , [ rbx+rax ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 cdqe
 add rax , rdx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call fdzikgtgutvi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L13
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tqjsjdkkghlp
 mov eax , 0
 call vtebtqzyupir
 mov eax , 0
 call xyohhucwcrgk
 mov eax , 0
 leave
 ret
 .align 8
tqjsjdkkghlp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L9
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L14
.L9 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .align 8
xyohhucwcrgk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L20 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L20
.L19 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L21
.L22 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L21 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L22
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L23
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L24
.L23 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L24 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L25
 call __stack_chk_fail @ PLT
.L25 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cyqxorzbrxuh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 call ybnzqaimubdo
 mov eax , 0
 leave
 ret
cyqxorzbrxuh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L5
.L4 : 
 mov eax , 1
 jmp .L6
.L5 : 
 mov eax , 0
.L6 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L8
.L7 : 
 mov eax , 1
 jmp .L9
.L8 : 
 mov eax , 0
.L9 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L10
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L11
.L10 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L15
.L16 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L16
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .align 8
ybnzqaimubdo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L22 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L21
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L22
.L21 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L23
.L24 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L23 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L24
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L25
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L26
.L25 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L26 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L27
 call __stack_chk_fail @ PLT
.L27 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qoujnqbeqbxh
 mov eax , 0
 call oubyowhiekru
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 leave
 ret
qoujnqbeqbxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -92 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -88 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -88 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 add eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 sub eax , DWORD PTR -84 [ rbp ] 
 sub eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -68 [ rbp ] , eax
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
oubyowhiekru : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L6
.L7 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L7
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdevzikixvga
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov eax , 0
 leave
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L13
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L13 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov eax , 0
 call pacnceapbiua
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atjofgjojwgd
 mov eax , 0
 leave
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
pacnceapbiua : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -116 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -116 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
atjofgjojwgd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L5
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L6 : 
 add DWORD PTR -20 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L11 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rfgcepgasunz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ukftfiipmfub
 mov eax , 0
 call akuyhosvenqa
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ukftfiipmfub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -8 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L7
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -4 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L9
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
akuyhosvenqa : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov BYTE PTR -117 [ rbp ] , al
 lea rax , .LC7 [ rip ] 
 mov BYTE PTR -116 [ rbp ] , al
 lea rax , .LC8 [ rip ] 
 mov BYTE PTR -115 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -117 [ rbp ] 
 lea rcx , .LC9 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -117 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yggjeznqrxnr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kalfckmrnucv
 mov eax , 0
 call pqdcitotpbfg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qptspmnzhlfu
 mov eax , 0
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
pqdcitotpbfg : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -122 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -122 [ rbp ] 
 add rax , rdx
 movabs rcx , 8031924123371070824
 mov QWORD PTR [ rax ] , rcx
 mov DWORD PTR 8 [ rax ] , 6581362
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 90
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -122 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -122 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qptspmnzhlfu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -4 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xcbaqluvlilg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 call maqnfazfvjvg
 mov eax , 0
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -4 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L9
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L12
.L9 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xfvufpmexnyz
 mov eax , 0
 call xsinehmjnsfr
 mov eax , 0
 call dowuvarprjhl
 mov eax , 0
 leave
 ret
xfvufpmexnyz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -48 [ rbp ] , -5
 mov DWORD PTR -44 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 add eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 sub eax , DWORD PTR -48 [ rbp ] 
 sub eax , DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -28 [ rbp ] , eax
 mov esi , DWORD PTR -28 [ rbp ] 
 mov ecx , DWORD PTR -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -23 [ rbp ] 
 mov esi , 35
 mov rdi , rax
 call fgets @ PLT
 lea rax , -23 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xsinehmjnsfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L9
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call esmdctvgvoaj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocbayrkmozzv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call hxzcnysforjc
 mov eax , 0
 leave
 ret
esmdctvgvoaj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ocbayrkmozzv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
hxzcnysforjc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L11 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L15
.L18 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L16
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L17
.L16 : 
 add DWORD PTR -28 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L18
.L17 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call skbqlucjwyob
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call npkandihbzew
 mov eax , 0
 call oxeggdeaemmh
 mov eax , 0
 leave
 ret
skbqlucjwyob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
npkandihbzew : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov BYTE PTR -13 [ rbp ] , al
 lea rax , .LC6 [ rip ] 
 mov BYTE PTR -12 [ rbp ] , al
 lea rax , .LC7 [ rip ] 
 mov BYTE PTR -11 [ rbp ] , al
 mov rdx , QWORD PTR -24 [ rbp ] 
 lea rax , -13 [ rbp ] 
 lea rcx , .LC8 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L4
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L9
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L14
.L9 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bgyypfcxvecb
 mov eax , 0
 call dowuvarprjhl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 leave
 ret
bgyypfcxvecb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 240
 mov DWORD PTR -244 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov QWORD PTR -224 [ rbp ] , 32
 mov QWORD PTR -216 [ rbp ] , 0
 mov QWORD PTR -208 [ rbp ] , 0
 mov QWORD PTR -200 [ rbp ] , 0
 mov QWORD PTR -192 [ rbp ] , 0
 mov QWORD PTR -184 [ rbp ] , 0
 mov QWORD PTR -176 [ rbp ] , 0
 mov QWORD PTR -168 [ rbp ] , 0
 mov QWORD PTR -160 [ rbp ] , 0
 mov QWORD PTR -152 [ rbp ] , 0
 mov QWORD PTR -144 [ rbp ] , 0
 mov QWORD PTR -136 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , 0
 mov QWORD PTR -120 [ rbp ] , 0
 mov QWORD PTR -112 [ rbp ] , 0
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov ebx , DWORD PTR -244 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -240 [ rbp ] , rax
 movsx rax , ebx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ebx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -232 [ rbp ] , rax
 mov eax , DWORD PTR -244 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -232 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 movsx rdx , ebx
 mov rcx , QWORD PTR -232 [ rbp ] 
 lea rax , -224 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 jmp .L7
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -224 [ rbp ] 
 mov esi , 200
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L11
.L7 : 
 lea rax , -224 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call strchr @ PLT
 test rax , rax
 je .L9
 jmp .L8
.L11 : 
 nop
.L8 : 
 lea rax , -224 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -224 [ rbp ] 
 mov rax , QWORD PTR -232 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -232 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -16 [ rbp ] 
 pop rbx
 pop r12
 pop rbp
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L13
.L14 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L14
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L17
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L17 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L6
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L11 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 call efqtiriukyfe
 mov eax , 0
 leave
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L14
.L15 : 
 add DWORD PTR -36 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L15
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call esmdctvgvoaj
 mov eax , 0
 call tapaqftbrqhr
 mov eax , 0
 call xytlkqgaaiey
 mov eax , 0
 leave
 ret
esmdctvgvoaj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L6
.L7 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
xytlkqgaaiey : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -96 [ rbp ] , 4
 mov DWORD PTR -92 [ rbp ] , -5
 mov DWORD PTR -88 [ rbp ] , 2
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cdq
 idiv DWORD PTR -92 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , DWORD PTR -92 [ rbp ] 
 cdq
 idiv DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov DWORD PTR -68 [ rbp ] , 35
 mov esi , DWORD PTR -72 [ rbp ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ebx , DWORD PTR -68 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -64 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 movsx rdx , ebx
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -41 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -41 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call unnplphejkbb
 mov eax , 0
 call ytzrdzzbhhhn
 mov eax , 0
 call qizkibzunqoq
 mov eax , 0
 leave
 ret
unnplphejkbb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ytzrdzzbhhhn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qizkibzunqoq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov eax , 0
 call hunrlixhxuqe
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 leave
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L8
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nxbhnpcfplks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call hlblkqnmxmod
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 leave
 ret
nxbhnpcfplks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -44 [ rbp ] , 120
 mov BYTE PTR -34 [ rbp ] , 120
 mov BYTE PTR -22 [ rbp ] , 120
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hlblkqnmxmod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 call xyohhucwcrgk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cpomxhuiqqon
 mov eax , 0
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L5
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L6
.L5 : 
 add DWORD PTR -28 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .align 8
xyohhucwcrgk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L15
.L16 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L16
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L17
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L18
.L17 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cpomxhuiqqon : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -64 [ rbp ] 
 mov edx , 50
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzphakxspyuf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L4
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L6
.L4 : 
 mov eax , 0
.L6 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L12
.L15 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L13
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L13
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L13 : 
 add DWORD PTR -16 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L14
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L15
.L14 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call psizdewpgdqt
 mov eax , 0
 call hccipipvawmb
 mov eax , 0
 call kdpaygjnvazy
 mov eax , 0
 leave
 ret
psizdewpgdqt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L6
 mov DWORD PTR -340 [ rbp ] , 256
.L6 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call aulyksuwxtcw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 call fdevzikixvga
 mov eax , 0
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L13
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L14
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ypnxxakoaims
 mov eax , 0
 call lczjvypofmvf
 mov eax , 0
 call hzlvjfetptto
 mov eax , 0
 leave
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC4 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L8
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L9
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L10
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bulpyqkklfvg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call skbqlucjwyob
 mov eax , 0
 call goaztayvxlif
 mov eax , 0
 leave
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L6
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L7
.L6 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L7 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
skbqlucjwyob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
goaztayvxlif : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L19 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L21
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L19
.L21 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ycumhbjkobjs
 mov eax , 0
 call efqtiriukyfe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdokiymitgtu
 mov eax , 0
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L15
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L16
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L16 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L15 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L17
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L17 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L20
.L21 : 
 add DWORD PTR -36 [ rbp ] , 1
.L20 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L21
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 leave
 ret
xdokiymitgtu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L24 : 
 cmp rsp , rdx
 je .L25
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L24
.L25 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L26
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L26 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L27
.L28 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L27 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L28
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L29
 call __stack_chk_fail @ PLT
.L29 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call njiazvqwcbkn
 mov eax , 0
 call qizkibzunqoq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tvhtzhlxluob
 mov eax , 0
 leave
 ret
njiazvqwcbkn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
qizkibzunqoq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
tvhtzhlxluob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call auzozyljimuk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdokiymitgtu
 mov eax , 0
 leave
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
xdokiymitgtu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L17
.L18 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L18
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call oblihoqfkqvy
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bbnrdlkananf
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call msayoeistmjf
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call usbrzgblavyn
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
bbnrdlkananf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov DWORD PTR -132 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 cmp DWORD PTR -132 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 jmp .L5
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
.L5 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
msayoeistmjf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
usbrzgblavyn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L16
.L19 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L17
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L17
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L17 : 
 add DWORD PTR -8 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L18
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L19
.L18 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call jsczuwnqybnx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov eax , 0
 call tapaqftbrqhr
 mov eax , 0
 leave
 ret
jsczuwnqybnx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -75 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -74 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -70 [ rbp ] , al
 mov ecx , DWORD PTR -100 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -96 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 movsx rax , ecx
 mov rdx , rax
 mov esi , 50
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -100 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L9
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L10
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov eax , 0
 leave
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L15
.L16 : 
 lea rax , .LC13 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC14 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L16
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L9 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L10
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 call kcgpwajdjhtx
 mov eax , 0
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L7
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L8
.L7 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L8 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
kcgpwajdjhtx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call zhthpxtaxnoc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qptspmnzhlfu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call reifnghvjdtl
 mov eax , 0
 leave
 ret
zhthpxtaxnoc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qptspmnzhlfu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -4 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L10
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
reifnghvjdtl : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vtebtqzyupir
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call otktbdpwohxx
 mov eax , 0
 call pxspvavjkgnd
 mov eax , 0
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L4 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
otktbdpwohxx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L14
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L14 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
pxspvavjkgnd : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , rdx
 mov DWORD PTR -112 [ rbp ] , 14963
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -96 [ rbp ] 
 lea rdx , -128 [ rbp ] 
 lea rax , -48 [ rbp ] 
 lea rsi , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 call nizfgrhfmzwv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC0 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L7
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L7
.L9 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L8
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 add DWORD PTR -100 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L9
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L13
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L19 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L19
.L18 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call esmdctvgvoaj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pouurdracjsj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 leave
 ret
esmdctvgvoaj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
pouurdracjsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rcx , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rcx
 xor ecx , ecx
 mov rcx , rsp
 mov r15 , rcx
 mov DWORD PTR -84 [ rbp ] , 4
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov esi , DWORD PTR -84 [ rbp ] 
 movsx rdi , ecx
 sub rdi , 1
 mov QWORD PTR -80 [ rbp ] , rdi
 movsx rdi , ecx
 mov QWORD PTR -128 [ rbp ] , rdi
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rbx , ecx
 movsx rdi , esi
 sub rdi , 1
 mov QWORD PTR -72 [ rbp ] , rdi
 movsx rdi , ecx
 mov r12 , rdi
 mov r13d , 0
 movsx rdi , esi
 mov rax , rdi
 mov edx , 0
 mov r14 , r13
 imul r14 , rax
 mov rdi , rdx
 imul rdi , r12
 add rdi , r14
 mul r12
 add rdi , rdx
 mov rdx , rdi
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , esi
 mov r8 , rax
 mov r9d , 0
 mov rdx , r11
 imul rdx , r8
 mov rax , r9
 imul rax , r10
 lea rdi , [ rdx+rax ] 
 mov rax , r10
 mul r8
 add rdi , rdx
 mov rdx , rdi
 movsx rdx , ecx
 movsx rax , esi
 imul rax , rdx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -88 [ rbp ] , 0
 jmp .L9
.L10 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR stdin [ rip ] 
 mov edx , DWORD PTR -88 [ rbp ] 
 movsx rdx , edx
 mov rcx , rdx
 imul rcx , rbx
 mov rdx , QWORD PTR -64 [ rbp ] 
 add rcx , rdx
 mov rdx , rax
 mov esi , 30
 mov rdi , rcx
 call fgets @ PLT
 mov eax , DWORD PTR -88 [ rbp ] 
 cdqe
 imul rax , rbx
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -88 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -88 [ rbp ] , 3
 jle .L10
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r15
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L13
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L19
.L13 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ugfnfnzigsrf
 mov eax , 0
 call duinkpvfxhik
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L9
.L10 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hrsdwcjqkudo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call oaxoirzmdobf
 mov eax , 0
 leave
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
oaxoirzmdobf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 119
 ja .L7
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L9
.L7 : 
 mov eax , 0
.L9 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bzvmzslneagm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tqjsjdkkghlp
 mov eax , 0
 call ukzfhpapzzcz
 mov eax , 0
 leave
 ret
bzvmzslneagm : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -108 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -144 [ rbp ] , rdx
 mov QWORD PTR -136 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L13
.L4 : 
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
.L13 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
tqjsjdkkghlp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ukzfhpapzzcz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L21 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L20
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L21
.L20 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L23
 call __stack_chk_fail @ PLT
.L23 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 call duinkpvfxhik
 mov eax , 0
 leave
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L9
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L10
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov eax , 0
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L15
.L16 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L15 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L16
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call imgbghflolaf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qpyixmxfapaz
 mov eax , 0
 call vtebtqzyupir
 mov eax , 0
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qpyixmxfapaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -64 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L10
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L15
.L10 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L13
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 call eklheveznbgh
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC2 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 call nyeugcyrmhrg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call frgtdmoaiiin
 mov eax , 0
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
nyeugcyrmhrg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
frgtdmoaiiin : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -64 [ rbp ] 
 add rax , rdx
 movabs rcx , 8245282155717748040
 mov QWORD PTR [ rax ] , rcx
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 call efqtiriukyfe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L10
.L11 : 
 add DWORD PTR -36 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L11
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L14
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L16
.L14 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L16 : 
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bimvvmxtypwo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L5
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L11
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L12
.L11 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L12 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L15
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L18
.L15 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call cmdmolbpalfx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ctrvvluihuhf
 mov eax , 0
 call vowwwcujhpyw
 mov eax , 0
 leave
 ret
 .align 8
cmdmolbpalfx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov DWORD PTR -132 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 cmp DWORD PTR -132 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 jmp .L5
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
.L5 : 
 cmp DWORD PTR -132 [ rbp ] , 49
 jg .L6
 mov DWORD PTR -132 [ rbp ] , 50
.L6 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ctrvvluihuhf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
vowwwcujhpyw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L18 : 
 call getchar @ PLT
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , -1
 jne .L18
.L17 : 
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , 9
 jg .L19
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -96 [ rbp ] 
 mov DWORD PTR -92 [ rbp ] , eax
 jmp .L20
.L19 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
.L20 : 
 mov eax , DWORD PTR -96 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L21 : 
 cmp rsp , rdx
 je .L22
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L21
.L22 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L23
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L23 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov eax , DWORD PTR -92 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L24 : 
 cmp rsp , rdx
 je .L25
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L24
.L25 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L26
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L26 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L27
 call __stack_chk_fail @ PLT
.L27 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call elpqwqavaefi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call fltowcclbbld
 mov eax , 0
 call mdncocijubzn
 mov eax , 0
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
fltowcclbbld : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
mdncocijubzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -148 [ rbp ] , 2
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rsi , rdx
 mov edi , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov BYTE PTR -149 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call mlkaqullpnnw
 mov eax , 0
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L10
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
mlkaqullpnnw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC5 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call mrjvvaeyjykc
 mov eax , 0
 call xhlaxqaxdtgg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ftxsahsrawrv
 mov eax , 0
 leave
 ret
 .align 8
mrjvvaeyjykc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
xhlaxqaxdtgg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L9
.L14 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L10
.L11 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L11
 jmp .L12
.L13 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L13
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L9 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L14
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
ftxsahsrawrv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 call ochtivcueybs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call iwauxxfxdndt
 mov eax , 0
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ochtivcueybs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
iwauxxfxdndt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov eax , 0
 call xetofklyeote
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L11
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L12
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L12
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L12 : 
 add DWORD PTR -8 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L13
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L14
.L13 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 call cyqxorzbrxuh
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
cyqxorzbrxuh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L10
.L9 : 
 mov eax , 1
 jmp .L11
.L10 : 
 mov eax , 0
.L11 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L13
.L12 : 
 mov eax , 1
 jmp .L14
.L13 : 
 mov eax , 0
.L14 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L15
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L16
.L15 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L20
.L21 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L20 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L21
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call adxolhkjnkqh
 mov eax , 0
 call fanqrfjqffpe
 mov eax , 0
 call imgbghflolaf
 mov eax , 0
 leave
 ret
adxolhkjnkqh : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rcx , [ rbx+rax ] 
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rcx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov edx , 16
 mov rsi , rcx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L14
.L15 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L15
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call jmpwobtufiul
 mov eax , 0
 call rfgcepgasunz
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 leave
 ret
 .align 8
jmpwobtufiul : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -72 [ rbp ] , 50
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -72 [ rbp ] 
 mov ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nizfgrhfmzwv
 mov eax , 0
 call gzphakxspyuf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L10
.L12 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L11
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 add DWORD PTR -100 [ rbp ] , 1
.L10 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L12
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call akuyhosvenqa
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call eajwcxrffvsv
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ctrvvluihuhf
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
akuyhosvenqa : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -117 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -116 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -115 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -117 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -117 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
eajwcxrffvsv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ctrvvluihuhf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ybnzqaimubdo
 mov eax , 0
 call yggjeznqrxnr
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
ybnzqaimubdo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L11
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L20
.L22 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L21
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L21 : 
 add DWORD PTR -20 [ rbp ] , 1
.L20 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L22
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L23
 call __stack_chk_fail @ PLT
.L23 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 call tdailylyiflh
 mov eax , 0
 call qfvuwpnppjhy
 mov eax , 0
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
tdailylyiflh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -56 [ rbp ] , 4
 mov DWORD PTR -52 [ rbp ] , 3
 mov DWORD PTR -48 [ rbp ] , -2
 mov edx , DWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -52 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -48 [ rbp ] 
 add eax , edx
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -56 [ rbp ] 
 imul eax , DWORD PTR -52 [ rbp ] 
 mov edx , DWORD PTR -48 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -56 [ rbp ] 
 add eax , edx
 mov DWORD PTR -36 [ rbp ] , eax
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , DWORD PTR -40 [ rbp ] 
 mov eax , DWORD PTR -44 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
qfvuwpnppjhy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xetofklyeote
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L12
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L13
.L12 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L13 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L16
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L17
.L16 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L18
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L18
.L17 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L19
.L18 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oblihoqfkqvy
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call errjklfnnpoa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pxsnksvbavce
 mov eax , 0
 call bfojvsbuecxe
 mov eax , 0
 leave
 ret
errjklfnnpoa : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -84 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
pxsnksvbavce : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L11
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L17
.L11 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
bfojvsbuecxe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L20
.L19 : 
 mov eax , 1
 jmp .L21
.L20 : 
 mov eax , 0
.L21 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L22
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L22
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L22
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L22
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L23
.L22 : 
 mov eax , 1
 jmp .L24
.L23 : 
 mov eax , 0
.L24 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L25
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L26
.L25 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L27
.L26 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L27 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L28
 call __stack_chk_fail @ PLT
.L28 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call efelwzeculzn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nlljivnwazob
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tqjsjdkkghlp
 mov eax , 0
 leave
 ret
efelwzeculzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nlljivnwazob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L11
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L13
.L11 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L13 : 
 nop
 leave
 ret
 .align 8
tqjsjdkkghlp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdevzikixvga
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 leave
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L8 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yhwaluyeaqfz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call fltowcclbbld
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ovmgkdegugmz
 mov eax , 0
 leave
 ret
yhwaluyeaqfz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L4
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L5
.L4 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L6
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
fltowcclbbld : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
ovmgkdegugmz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 call xetofklyeote
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jdztjpdzzrwf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call msayoeistmjf
 mov eax , 0
 call imgbghflolaf
 mov eax , 0
 leave
 ret
jdztjpdzzrwf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
msayoeistmjf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L16
.L17 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L17
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call ugfnfnzigsrf
 mov eax , 0
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xhlaxqaxdtgg
 mov eax , 0
 call xytlkqgaaiey
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 leave
 ret
xhlaxqaxdtgg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L9 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L5
.L6 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L6
 jmp .L7
.L8 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L8
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
xytlkqgaaiey : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -96 [ rbp ] , 4
 mov DWORD PTR -92 [ rbp ] , -5
 mov DWORD PTR -88 [ rbp ] , 2
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cdq
 idiv DWORD PTR -92 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , DWORD PTR -92 [ rbp ] 
 cdq
 idiv DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov DWORD PTR -68 [ rbp ] , 35
 mov esi , DWORD PTR -72 [ rbp ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ebx , DWORD PTR -68 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -64 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 movsx rdx , ebx
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -41 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -41 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlwstubxloqr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call jtvgccxnghxq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrixcktekyxz
 mov eax , 0
 leave
 ret
qlwstubxloqr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
jtvgccxnghxq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
lrixcktekyxz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pcsqarrmtecs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L11
.L12 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call arpdayuwutjh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call iwauxxfxdndt
 mov eax , 0
 leave
 ret
 .align 8
arpdayuwutjh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L9
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
iwauxxfxdndt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call chwthkpswpff
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -4 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pvtkmghmizwz
 mov eax , 0
 call ochtivcueybs
 mov eax , 0
 call njiazvqwcbkn
 mov eax , 0
 leave
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ochtivcueybs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
njiazvqwcbkn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L9
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lmhhgfjvthli
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L16 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L15
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L16
.L15 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kdpaygjnvazy
 mov eax , 0
 call mdncocijubzn
 mov eax , 0
 call qlpaezcmkarp
 mov eax , 0
 leave
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
mdncocijubzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -148 [ rbp ] , 2
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rsi , rdx
 mov edi , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov BYTE PTR -149 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qlpaezcmkarp : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oezekhzjsntn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 call eihjswapsybh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vtebtqzyupir
 mov eax , 0
 call rwunkmogttly
 mov eax , 0
 call vowwwcujhpyw
 mov eax , 0
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L4 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
vowwwcujhpyw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L20 : 
 call getchar @ PLT
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , -1
 jne .L20
.L19 : 
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , 9
 jg .L21
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -96 [ rbp ] 
 mov DWORD PTR -92 [ rbp ] , eax
 jmp .L22
.L21 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
.L22 : 
 mov eax , DWORD PTR -96 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L23 : 
 cmp rsp , rdx
 je .L24
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L23
.L24 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L25
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L25 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov eax , DWORD PTR -92 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L26 : 
 cmp rsp , rdx
 je .L27
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L26
.L27 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L28
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L28 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L29
 call __stack_chk_fail @ PLT
.L29 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call chwthkpswpff
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -4 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L8
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call xztgjedozhvw
 mov eax , 0
 call feskijsrrgxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 leave
 ret
xztgjedozhvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
.L7 : 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
feskijsrrgxh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L15
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L21
.L15 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L21 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov eax , 0
 call qrojfamadtkc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 leave
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L4
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L8
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L8 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ukftfiipmfub
 mov eax , 0
 call ksllarmyttxu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov eax , 0
 leave
 ret
ukftfiipmfub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L5
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -4 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L7
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ksllarmyttxu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L9
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L9
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ukftfiipmfub
 mov eax , 0
 call gapojmguwjub
 mov eax , 0
 call qqtyjfrsbcre
 mov eax , 0
 leave
 ret
ukftfiipmfub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L5
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -4 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L7
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
gapojmguwjub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -176 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -176 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -176 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -176 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
qqtyjfrsbcre : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov eax , 0
 call fdevzikixvga
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L11
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L17
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L21
.L17 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L21 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 call hunrlixhxuqe
 mov eax , 0
 leave
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L4
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call vcelpqujibys
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ajwknuvsqpod
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
vcelpqujibys : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov QWORD PTR -64 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ajwknuvsqpod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L18
.L20 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L19
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 add DWORD PTR -100 [ rbp ] , 1
.L18 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L20
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fanqrfjqffpe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call usugbmdolvxh
 mov eax , 0
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
usugbmdolvxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L5
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC2 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 leave
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L6
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L9
.L12 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 add DWORD PTR -12 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 call imgbghflolaf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ungufegmvgpj
 mov eax , 0
 leave
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L7
.L9 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L8
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 add DWORD PTR -100 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L9
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L12
.L13 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L13
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
ungufegmvgpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2338328219631577172
 movabs rdx , 8295758552588623969
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov DWORD PTR -32 [ rbp ] , 1852404340
 mov DWORD PTR -52 [ rbp ] , 0
 jmp .L16
.L17 : 
 lea rdx , -48 [ rbp ] 
 mov eax , DWORD PTR -52 [ rbp ] 
 cdqe
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -52 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rbx , eax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L17
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 call aulyksuwxtcw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 call hccipipvawmb
 mov eax , 0
 call nyaasqofyhfz
 mov eax , 0
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L10
 mov DWORD PTR -340 [ rbp ] , 256
.L10 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nyaasqofyhfz : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -96 [ rbp ] 
 lea rdx , -48 [ rbp ] 
 lea rcx , 20 [ rdx ] 
 mov edx , 40
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pcsqarrmtecs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -4 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L10
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call usugbmdolvxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zpvzygkpjavu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mwuvaunulaca
 mov eax , 0
 leave
 ret
usugbmdolvxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
zpvzygkpjavu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -128 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 mov edx , 50
 mov rsi , rcx
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
mwuvaunulaca : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L10
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L10 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gafcdwelorst
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov eax , 0
 call kcgpwajdjhtx
 mov eax , 0
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
kcgpwajdjhtx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptosuvlmykym
 mov eax , 0
 call hccipipvawmb
 mov eax , 0
 call vawlugafkosd
 mov eax , 0
 leave
 ret
ptosuvlmykym : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov ecx , DWORD PTR -60 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -56 [ rbp ] , rax
 movsx rax , ecx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov eax , DWORD PTR -60 [ rbp ] 
 imul eax , eax
 mov ecx , eax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L11
 mov DWORD PTR -340 [ rbp ] , 256
.L11 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L16 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L15
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L16
.L15 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wpfmvqfnircf
 mov eax , 0
 call xyohhucwcrgk
 mov eax , 0
 call xytlkqgaaiey
 mov eax , 0
 leave
 ret
wpfmvqfnircf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .align 8
xyohhucwcrgk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L15
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L16
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xytlkqgaaiey : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -96 [ rbp ] , 4
 mov DWORD PTR -92 [ rbp ] , -5
 mov DWORD PTR -88 [ rbp ] , 2
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cdq
 idiv DWORD PTR -92 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , DWORD PTR -92 [ rbp ] 
 cdq
 idiv DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov DWORD PTR -68 [ rbp ] , 35
 mov esi , DWORD PTR -72 [ rbp ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ebx , DWORD PTR -68 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -64 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L20 : 
 cmp rsp , rdx
 je .L21
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L20
.L21 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L22
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L22 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 movsx rdx , ebx
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -41 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -41 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L23
 call __stack_chk_fail @ PLT
.L23 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 call xetofklyeote
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC10 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC11 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC12 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L13
.L14 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L14
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kdpaygjnvazy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call trreknwaqrxz
 mov eax , 0
 call xsinehmjnsfr
 mov eax , 0
 leave
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
trreknwaqrxz : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -104 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rdx , -96 [ rbp ] 
 add rdx , 10
 mov rsi , rax
 mov rdi , rdx
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
xsinehmjnsfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L8
.L9 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dbmdegrltknb
 mov eax , 0
 call tvgnkflsmeqd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call cmdmolbpalfx
 mov eax , 0
 leave
 ret
dbmdegrltknb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rdx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L9
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
cmdmolbpalfx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov DWORD PTR -132 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 cmp DWORD PTR -132 [ rbp ] , 10
 jle .L14
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 jmp .L15
.L14 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
.L15 : 
 cmp DWORD PTR -132 [ rbp ] , 49
 jg .L16
 mov DWORD PTR -132 [ rbp ] , 50
.L16 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rcx , .LC7 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ueozzdnnmfyv
 mov eax , 0
 call dowuvarprjhl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qnrihtwqgbqb
 mov eax , 0
 leave
 ret
ueozzdnnmfyv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L8
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
qnrihtwqgbqb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , -84 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 4
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -80 [ rbp ] , eax
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 sal eax , 3
 sub edx , eax
 mov DWORD PTR -80 [ rbp ] , edx
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -2004318071
 shr rdx , 32
 add edx , eax
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 30
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 3
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -72 [ rbp ] , eax
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 sal eax , 2
 sub edx , eax
 mov DWORD PTR -72 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -76 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 add eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 sub eax , DWORD PTR -76 [ rbp ] 
 sub eax , DWORD PTR -72 [ rbp ] 
 mov DWORD PTR -64 [ rbp ] , eax
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -72 [ rbp ] 
 mov DWORD PTR -60 [ rbp ] , eax
 mov rdx , QWORD PTR -56 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 call akqymshefhhe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L10
.L13 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L11
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L12
.L11 : 
 add DWORD PTR -28 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L13
.L12 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov eax , 0
 call hzlvjfetptto
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call qegswzvgvtlz
 mov eax , 0
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L10
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 add DWORD PTR -20 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
qegswzvgvtlz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov QWORD PTR -56 [ rbp ] , rdi
 mov DWORD PTR -60 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qrojfamadtkc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 call vhmtfiqscpwh
 mov eax , 0
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L5
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L7
.L5 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L7 : 
 nop
 leave
 ret
vhmtfiqscpwh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L9
.L14 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L10
.L11 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L11
 jmp .L12
.L13 : 
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L13
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L9 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L14
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ymhjpxqydwol
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 leave
 ret
ymhjpxqydwol : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L9
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L10
.L9 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L10 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L13
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L15
.L13 : 
 mov eax , 0
.L15 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qizkibzunqoq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ukftfiipmfub
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ybequloshtrt
 mov eax , 0
 leave
 ret
qizkibzunqoq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ukftfiipmfub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L5
.L6 : 
 add DWORD PTR -8 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L6
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -4 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L8
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ybequloshtrt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call jamjufztgkya
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
jamjufztgkya : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L10
.L13 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L11 : 
 add DWORD PTR -16 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L12
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L13
.L12 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fvntbvkbhnxk
 mov eax , 0
 call avivpbfteemd
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 leave
 ret
fvntbvkbhnxk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
avivpbfteemd : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC2 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhkhcuurjmt
 mov eax , 0
 call avivpbfteemd
 mov eax , 0
 call ytzrdzzbhhhn
 mov eax , 0
 leave
 ret
gvhkhcuurjmt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
avivpbfteemd : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC0 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
ytzrdzzbhhhn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L6
.L8 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ukzfhpapzzcz
 mov eax , 0
 call hzlvjfetptto
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhdnsoayrdjw
 mov eax , 0
 leave
 ret
ukzfhpapzzcz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
dhdnsoayrdjw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L15
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call uwbuxsnkkwdh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L12
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L12 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ycfnquuwgwwc
 mov eax , 0
 call tapaqftbrqhr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pwsvhyxpeqcx
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
ycfnquuwgwwc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -72 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -64 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 movsx rax , ebx
 cmp rdx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L13
.L14 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L14
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
pwsvhyxpeqcx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movabs rsi , 8245282155717748040
 mov QWORD PTR [ rax ] , rsi
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 call eklheveznbgh
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ymhjpxqydwol
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ulbphpyecccp
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 leave
 ret
ymhjpxqydwol : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ulbphpyecccp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call jzxgdkaleirh
 mov eax , 0
 call lazbzpjvuxme
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call gmdnzfeepbzc
 mov eax , 0
 leave
 ret
jzxgdkaleirh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L4
.L7 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
lazbzpjvuxme : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
gmdnzfeepbzc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC5 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lmhhgfjvthli
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov eax , 0
 call duinkpvfxhik
 mov eax , 0
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L12
.L13 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L12 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L13
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call mdncocijubzn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhkhcuurjmt
 mov eax , 0
 leave
 ret
mdncocijubzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -148 [ rbp ] , 2
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rsi , rdx
 mov edi , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov BYTE PTR -149 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
gvhkhcuurjmt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L11
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qoujnqbeqbxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call fltowcclbbld
 mov eax , 0
 call mzxiycohslhk
 mov eax , 0
 leave
 ret
qoujnqbeqbxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -92 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -88 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -88 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 add eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 sub eax , DWORD PTR -84 [ rbp ] 
 sub eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -68 [ rbp ] , eax
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
fltowcclbbld : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
mzxiycohslhk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L19
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L20
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L22
.L20 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L22
.L19 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L21
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L22
.L21 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L22 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L7
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L12
.L14 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L13
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 add DWORD PTR -100 [ rbp ] , 1
.L12 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L14
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wnffthpyxcdu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 call oeyozhdsqnhj
 mov eax , 0
 leave
 ret
wnffthpyxcdu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call nizfgrhfmzwv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC4 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC5 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cbibyvccnwpj
 mov eax , 0
 call yhwaluyeaqfz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ybequloshtrt
 mov eax , 0
 leave
 ret
cbibyvccnwpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
yhwaluyeaqfz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L14
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L15
.L14 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L16
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L16
.L15 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
ybequloshtrt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 lea rsi , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L7
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L8
.L7 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L8 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L11
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L17
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L20
.L17 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L20 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nizfgrhfmzwv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L5
.L6 : 
 add DWORD PTR -4 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cgsajkqojmuc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nhuwvnktrfhj
 mov eax , 0
 call goaztayvxlif
 mov eax , 0
 leave
 ret
cgsajkqojmuc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
nhuwvnktrfhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 304
 mov DWORD PTR -292 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -292 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov QWORD PTR -280 [ rbp ] , rax
 mov esi , 8
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -272 [ rbp ] , 65
 mov BYTE PTR -271 [ rbp ] , 66
 mov BYTE PTR -270 [ rbp ] , 67
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -272 [ rbp ] 
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
goaztayvxlif : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L11
.L13 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kcgpwajdjhtx
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 call uhixokfdnayx
 mov eax , 0
 leave
 ret
kcgpwajdjhtx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L7
.L8 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L8
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call wdqgfcrzbsiz
 mov eax , 0
 call elpqwqavaefi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov eax , 0
 leave
 ret
wdqgfcrzbsiz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L12 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L13
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L16
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L19
.L16 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ahwkexxedycz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L4
.L5 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L4 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L5
 nop
 nop
 leave
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -8 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L8
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -4 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L10
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nhuwvnktrfhj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call sadkxrsuawaq
 mov eax , 0
 leave
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L4
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L6
.L4 : 
 mov eax , 0
.L6 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
nhuwvnktrfhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 304
 mov DWORD PTR -292 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -292 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov QWORD PTR -280 [ rbp ] , rax
 mov esi , 8
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -272 [ rbp ] , 65
 mov BYTE PTR -271 [ rbp ] , 66
 mov BYTE PTR -270 [ rbp ] , 67
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -272 [ rbp ] 
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
sadkxrsuawaq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mlwhovnblrse
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call clskshqphbip
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 leave
 ret
mlwhovnblrse : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 lea rcx , [ rax+rdx ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
clskshqphbip : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rax
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L17
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L18
.L17 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L18 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L10
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 add DWORD PTR -20 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eklheveznbgh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 leave
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L6
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L12
.L6 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L14
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L15
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L16
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L15 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L14 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pnxgivxtjwdh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
pnxgivxtjwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 4
 mov eax , DWORD PTR -84 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -76 [ rbp ] , eax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC4 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC5 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L4
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L14
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L19
.L14 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L16
.L17 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L17
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ftxsahsrawrv
 mov eax , 0
 call xyohhucwcrgk
 mov eax , 0
 call bfojvsbuecxe
 mov eax , 0
 leave
 ret
ftxsahsrawrv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .align 8
xyohhucwcrgk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L15
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L16
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bfojvsbuecxe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L21
.L20 : 
 mov eax , 1
 jmp .L22
.L21 : 
 mov eax , 0
.L22 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L23
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L23
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L23
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L23
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L24
.L23 : 
 mov eax , 1
 jmp .L25
.L24 : 
 mov eax , 0
.L25 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L26
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L27
.L26 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L28
.L27 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L28 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L29
 call __stack_chk_fail @ PLT
.L29 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fuhlkoweubdx
 mov eax , 0
 call ediyavermwpa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call sadkxrsuawaq
 mov eax , 0
 leave
 ret
fuhlkoweubdx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR stdin [ rip ] 
 lea rdx , -32 [ rbp ] 
 lea rcx , 15 [ rdx ] 
 mov rdx , rax
 mov esi , 20
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L6
.L7 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
sadkxrsuawaq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L4
.L5 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L4 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L5
 nop
 nop
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ycumhbjkobjs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L15
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L16
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L16 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L15 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L17
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L17 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L20
.L21 : 
 add DWORD PTR -8 [ rbp ] , 1
.L20 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L21
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L22
.L23 : 
 add DWORD PTR -4 [ rbp ] , 1
.L22 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L23
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L25
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L26
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L27
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L28
.L27 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L28
.L26 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L28
.L25 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L28 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call hxilerknljqo
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wwudzaktnwvo
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call usugbmdolvxh
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
hxilerknljqo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L7
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L11
.L7 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L11 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
wwudzaktnwvo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov QWORD PTR -152 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -140 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -136 [ rbp ] , edx
 mov edx , DWORD PTR -136 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -136 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -132 [ rbp ] , edx
 mov edx , DWORD PTR -132 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -132 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -128 [ rbp ] , eax
 mov ecx , DWORD PTR -128 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -128 [ rbp ] , edx
 mov edx , DWORD PTR -136 [ rbp ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -128 [ rbp ] 
 add eax , edx
 mov DWORD PTR -124 [ rbp ] , eax
 mov eax , DWORD PTR -136 [ rbp ] 
 sub eax , DWORD PTR -132 [ rbp ] 
 sub eax , DWORD PTR -128 [ rbp ] 
 mov DWORD PTR -120 [ rbp ] , eax
 mov edx , DWORD PTR -136 [ rbp ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -128 [ rbp ] 
 mov DWORD PTR -116 [ rbp ] , eax
 mov rdx , QWORD PTR -152 [ rbp ] 
 lea rax , -112 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
usugbmdolvxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call duinkpvfxhik
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call elpqwqavaefi
 mov eax , 0
 call clketioynbyj
 mov eax , 0
 call hrvcejglwvwz
 mov eax , 0
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
clketioynbyj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -76 [ rbp ] 
 mov ecx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
hrvcejglwvwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call arpdayuwutjh
 mov eax , 0
 call clketioynbyj
 mov eax , 0
 leave
 ret
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
arpdayuwutjh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L10
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
clketioynbyj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L18 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L18
.L17 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -76 [ rbp ] 
 mov ecx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L6
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nlljivnwazob
 mov eax , 0
 call gmevqtnfsdog
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov eax , 0
 leave
 ret
nlljivnwazob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L6
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 nop
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L6
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -132 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L10
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L12
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L15
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L18
.L15 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dowuvarprjhl
 mov eax , 0
 call kalfckmrnucv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call njibzicktiyl
 mov eax , 0
 leave
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L5
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
njibzicktiyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov QWORD PTR -168 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -168 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 call tmrojhkarojb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L11
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L17
.L18 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L18
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dqolmbfqphap
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call mrjvvaeyjykc
 mov eax , 0
 call mdncocijubzn
 mov eax , 0
 call vawlugafkosd
 mov eax , 0
 leave
 ret
 .align 8
mrjvvaeyjykc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
mdncocijubzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -148 [ rbp ] , 2
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rsi , rdx
 mov edi , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov BYTE PTR -149 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC2 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L6
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L6 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vtebtqzyupir
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call jtvgccxnghxq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjnkaektojbk
 mov eax , 0
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L4 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
jtvgccxnghxq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
mjnkaektojbk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -88 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call jsczuwnqybnx
 mov eax , 0
 call vtebtqzyupir
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mwuvaunulaca
 mov eax , 0
 leave
 ret
jsczuwnqybnx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -75 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -74 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -70 [ rbp ] , al
 mov ecx , DWORD PTR -100 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -96 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 movsx rax , ecx
 mov rdx , rax
 mov esi , 50
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -100 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L9
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L14
.L9 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
mwuvaunulaca : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L16
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L16 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 call xetofklyeote
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -132 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L5
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L15
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L18
.L15 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 call gzphakxspyuf
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xhlaxqaxdtgg
 mov eax , 0
 call ochtivcueybs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call xztgjedozhvw
 mov eax , 0
 leave
 ret
xhlaxqaxdtgg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L9 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L5
.L6 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L6
 jmp .L7
.L8 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L8
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
ochtivcueybs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
xztgjedozhvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
.L17 : 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gieykwwdqsih
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 call oblihoqfkqvy
 mov eax , 0
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L6
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L7
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L8 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 mov eax , 0
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mwuvaunulaca
 mov eax , 0
 call fvszvmuqfdjj
 mov eax , 0
 call gapojmguwjub
 mov eax , 0
 leave
 ret
 .align 8
mwuvaunulaca : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L4
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
fvszvmuqfdjj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
gapojmguwjub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -176 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -176 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -176 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -176 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC4 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qqtyjfrsbcre
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 call xfvufpmexnyz
 mov eax , 0
 leave
 ret
qqtyjfrsbcre : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L6
.L9 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L7
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L8
.L7 : 
 add DWORD PTR -28 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L9
.L8 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
xfvufpmexnyz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -48 [ rbp ] , -5
 mov DWORD PTR -44 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 add eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 sub eax , DWORD PTR -48 [ rbp ] 
 sub eax , DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -28 [ rbp ] , eax
 mov esi , DWORD PTR -28 [ rbp ] 
 mov ecx , DWORD PTR -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -23 [ rbp ] 
 mov esi , 35
 mov rdi , rax
 call fgets @ PLT
 lea rax , -23 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhpxpgjtbhtc
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call eajwcxrffvsv
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call cmdmolbpalfx
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
dhpxpgjtbhtc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
eajwcxrffvsv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
cmdmolbpalfx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov DWORD PTR -132 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 cmp DWORD PTR -132 [ rbp ] , 10
 jle .L15
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 jmp .L16
.L15 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
.L16 : 
 cmp DWORD PTR -132 [ rbp ] , 49
 jg .L17
 mov DWORD PTR -132 [ rbp ] , 50
.L17 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xetofklyeote
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L14 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov eax , 0
 call elpqwqavaefi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L10
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L13
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L19
.L13 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call nizfgrhfmzwv
 mov eax , 0
 leave
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kdpaygjnvazy
 mov eax , 0
 call jmpwobtufiul
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atjofgjojwgd
 mov eax , 0
 leave
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
jmpwobtufiul : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -72 [ rbp ] , 50
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -72 [ rbp ] 
 mov ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
atjofgjojwgd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call chwthkpswpff
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC4 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yggjeznqrxnr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L9
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L9 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L11 : 
 nop
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nlljivnwazob
 mov eax , 0
 call ajwrumhrlzgy
 mov eax , 0
 call rwunkmogttly
 mov eax , 0
 leave
 ret
nlljivnwazob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L6
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 nop
 leave
 ret
ajwrumhrlzgy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 jle .L10
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L11
.L10 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 add eax , eax
 mov DWORD PTR -76 [ rbp ] , eax
.L11 : 
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L21 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L20
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L21
.L20 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L23
 call __stack_chk_fail @ PLT
.L23 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlwstubxloqr
 mov eax , 0
 call rwunkmogttly
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrixcktekyxz
 mov eax , 0
 leave
 ret
qlwstubxloqr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
lrixcktekyxz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC10 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 call avoaylvgqsvm
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
avoaylvgqsvm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 2208
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -2192 [ rbp ] , 0
 mov QWORD PTR -2184 [ rbp ] , 0
 mov QWORD PTR -2176 [ rbp ] , 0
 mov QWORD PTR -2168 [ rbp ] , 0
 mov QWORD PTR -2160 [ rbp ] , 0
 mov QWORD PTR -2152 [ rbp ] , 0
 mov QWORD PTR -2144 [ rbp ] , 0
 mov QWORD PTR -2136 [ rbp ] , 0
 mov QWORD PTR -2128 [ rbp ] , 0
 mov QWORD PTR -2120 [ rbp ] , 0
 mov QWORD PTR -2112 [ rbp ] , 0
 mov QWORD PTR -2104 [ rbp ] , 0
 mov QWORD PTR -2096 [ rbp ] , 0
 mov QWORD PTR -2088 [ rbp ] , 0
 mov QWORD PTR -2080 [ rbp ] , 0
 mov QWORD PTR -2072 [ rbp ] , 0
 lea rax , -2192 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov QWORD PTR -2064 [ rbp ] , 0
 mov QWORD PTR -2056 [ rbp ] , 0
 lea rdx , -2048 [ rbp ] 
 mov eax , 0
 mov ecx , 254
 mov rdi , rdx
 rep stosq
 lea rax , -2192 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -2064 [ rbp ] 
 mov edx , 2047
 mov rsi , rax
 mov rax , QWORD PTR __isoc99_scanf @ GOTPCREL [ rip ] 
 mov rdi , rax
 mov eax , 0
 call read @ PLT
 mov DWORD PTR -2196 [ rbp ] , eax
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L8
.L11 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L9
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L10
.L9 : 
 add DWORD PTR -28 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L11
.L10 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gieykwwdqsih
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L7
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L14
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L14 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 call ewyehunrwfkm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L8
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L10
.L8 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L10 : 
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xyohhucwcrgk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call omgntkvpmgjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nlljivnwazob
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
xyohhucwcrgk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L11
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
omgntkvpmgjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
nlljivnwazob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L16
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L18
.L16 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L18 : 
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tdailylyiflh
 mov eax , 0
 call feskijsrrgxh
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 leave
 ret
 .align 8
tdailylyiflh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -56 [ rbp ] , 4
 mov DWORD PTR -52 [ rbp ] , 3
 mov DWORD PTR -48 [ rbp ] , -2
 mov edx , DWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -52 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -48 [ rbp ] 
 add eax , edx
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -56 [ rbp ] 
 imul eax , DWORD PTR -52 [ rbp ] 
 mov edx , DWORD PTR -48 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -56 [ rbp ] 
 add eax , edx
 mov DWORD PTR -36 [ rbp ] , eax
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , DWORD PTR -40 [ rbp ] 
 mov eax , DWORD PTR -44 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
feskijsrrgxh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call maqnfazfvjvg
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L11
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L14
.L11 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call jmpwobtufiul
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 call oxeggdeaemmh
 mov eax , 0
 leave
 ret
 .align 8
jmpwobtufiul : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -72 [ rbp ] , 50
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -72 [ rbp ] 
 mov ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call ahwkexxedycz
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call fnxvslegfewd
 mov eax , 0
 call maqnfazfvjvg
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L4
.L5 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L4 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L5
 nop
 nop
 leave
 ret
fnxvslegfewd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L8
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L8 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pxltobqakjeu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qnrihtwqgbqb
 mov eax , 0
 call qfvuwpnppjhy
 mov eax , 0
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L5
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L6
.L5 : 
 add DWORD PTR -28 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
qnrihtwqgbqb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , -84 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 4
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -80 [ rbp ] , eax
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 sal eax , 3
 sub edx , eax
 mov DWORD PTR -80 [ rbp ] , edx
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -2004318071
 shr rdx , 32
 add edx , eax
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 30
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 3
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -72 [ rbp ] , eax
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 sal eax , 2
 sub edx , eax
 mov DWORD PTR -72 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -76 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 add eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 sub eax , DWORD PTR -76 [ rbp ] 
 sub eax , DWORD PTR -72 [ rbp ] 
 mov DWORD PTR -64 [ rbp ] , eax
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -72 [ rbp ] 
 mov DWORD PTR -60 [ rbp ] , eax
 mov rdx , QWORD PTR -56 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
qfvuwpnppjhy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call uhixokfdnayx
 mov eax , 0
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L14
.L15 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L15
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC5 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC6 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC7 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L11
.L12 : 
 add DWORD PTR -8 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L12
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L13
.L14 : 
 add DWORD PTR -4 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L14
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ediyavermwpa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call omgntkvpmgjk
 mov eax , 0
 call tapaqftbrqhr
 mov eax , 0
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
omgntkvpmgjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L9
.L10 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L10
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov eax , 0
 call bulpyqkklfvg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call gmdnzfeepbzc
 mov eax , 0
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L4
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L11
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L12
.L11 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L12 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
gmdnzfeepbzc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC6 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call duinkpvfxhik
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 call xetofklyeote
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L8
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L8 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uwbuxsnkkwdh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L8
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L9
.L8 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L9 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L12
.L13 : 
 add DWORD PTR -132 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L13
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L15
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call fltowcclbbld
 mov eax , 0
 call ksllarmyttxu
 mov eax , 0
 call nyeugcyrmhrg
 mov eax , 0
 leave
 ret
fltowcclbbld : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ksllarmyttxu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L6
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L6
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
nyeugcyrmhrg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L7
.L8 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L8
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tvgnkflsmeqd
 mov eax , 0
 call lazbzpjvuxme
 mov eax , 0
 call dsrrkpoeqzzd
 mov eax , 0
 leave
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
lazbzpjvuxme : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dsrrkpoeqzzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xyohhucwcrgk
 mov eax , 0
 call xgwrjmbefokw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eiytlelnfqwa
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
xyohhucwcrgk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L11
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xgwrjmbefokw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
eiytlelnfqwa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L18 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L18
.L17 : 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L6
.L8 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L8
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nyeugcyrmhrg
 mov eax , 0
 call bulpyqkklfvg
 mov eax , 0
 call tapaqftbrqhr
 mov eax , 0
 leave
 ret
nyeugcyrmhrg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L8
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L9
.L8 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC13 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L15
.L16 : 
 lea rax , .LC14 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC15 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L16
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L15
.L16 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L15 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L16
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hzlvjfetptto
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjnkaektojbk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qptspmnzhlfu
 mov eax , 0
 leave
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
mjnkaektojbk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -88 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qptspmnzhlfu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L14
.L15 : 
 add DWORD PTR -4 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L15
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 call gafcdwelorst
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC4 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L13
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L15
.L13 : 
 mov eax , 0
.L15 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cgsajkqojmuc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call jujchwfcxryk
 mov eax , 0
 call fvszvmuqfdjj
 mov eax , 0
 leave
 ret
cgsajkqojmuc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
jujchwfcxryk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fvszvmuqfdjj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 call xetofklyeote
 mov eax , 0
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -132 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L8
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L10
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vrkfupldzmmi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call njibzicktiyl
 mov eax , 0
 leave
 ret
vrkfupldzmmi : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
.L4 : 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , [ rbx+rax ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 cdqe
 add rax , rdx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
njibzicktiyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov QWORD PTR -168 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -168 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eselciymzxdd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wnffthpyxcdu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tzvjbtvkejes
 mov eax , 0
 leave
 ret
eselciymzxdd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
wnffthpyxcdu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rsi , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tzvjbtvkejes : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -100 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -100 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 cmp DWORD PTR -92 [ rbp ] , 99
 jle .L12
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L13
.L12 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L13 : 
 mov eax , DWORD PTR -92 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 call ccynxwluinnu
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ccynxwluinnu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC11 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 call qwumzdsvanfg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ymhjpxqydwol
 mov eax , 0
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ymhjpxqydwol : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call ypnxxakoaims
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call vtkrdwxiqbsl
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
vtkrdwxiqbsl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fvszvmuqfdjj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocbayrkmozzv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 leave
 ret
fvszvmuqfdjj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ocbayrkmozzv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -8 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L10
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L11
.L12 : 
 add DWORD PTR -4 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L12
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 call maqnfazfvjvg
 mov eax , 0
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L12
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L15
.L12 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oubyowhiekru
 mov eax , 0
 call porcuauvtqpr
 mov eax , 0
 call njlcwifctwfx
 mov eax , 0
 leave
 ret
 .align 8
oubyowhiekru : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L5
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
porcuauvtqpr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -120 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -64 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 lea rax , -112 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
njlcwifctwfx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pqdcitotpbfg
 mov eax , 0
 call vawlugafkosd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ukftfiipmfub
 mov eax , 0
 leave
 ret
pqdcitotpbfg : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -122 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -122 [ rbp ] 
 add rax , rdx
 movabs rcx , 8031924123371070824
 mov QWORD PTR [ rax ] , rcx
 mov DWORD PTR 8 [ rax ] , 6581362
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 90
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -122 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -122 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ukftfiipmfub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -8 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L9
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L10
.L11 : 
 add DWORD PTR -4 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L11
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L7
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L11
.L7 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L11 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L14
.L16 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L15
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 add DWORD PTR -20 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L16
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L20 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L20
.L19 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yhwaluyeaqfz
 mov eax , 0
 call eselciymzxdd
 mov eax , 0
 call gyjxvpsicrtv
 mov eax , 0
 leave
 ret
yhwaluyeaqfz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L4
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L5
.L4 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L6
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
eselciymzxdd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
gyjxvpsicrtv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -36 [ rbp ] , 64
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ahwkexxedycz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L4
.L5 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L4 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L5
 nop
 nop
 leave
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L7
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L7 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dbmdegrltknb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrixcktekyxz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call otktbdpwohxx
 mov eax , 0
 leave
 ret
dbmdegrltknb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rdx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
lrixcktekyxz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
otktbdpwohxx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L17
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L18
.L17 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC4 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L11
.L12 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L11 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L12
 nop
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rwunkmogttly
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call jtvgccxnghxq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call kurvnplwrsho
 mov eax , 0
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
jtvgccxnghxq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kurvnplwrsho : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov DWORD PTR -124 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -88 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -88 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -124 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call fltowcclbbld
 mov eax , 0
 call ksllarmyttxu
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 leave
 ret
fltowcclbbld : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ksllarmyttxu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L6
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L6
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 leave
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L6
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L7
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L8 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 call efqtiriukyfe
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L6
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 nop
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -36 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zqjaektwachr
 mov eax , 0
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
zqjaektwachr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR -56 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ckyojnaisxvc
 mov eax , 0
 call fanqrfjqffpe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhdnsoayrdjw
 mov eax , 0
 leave
 ret
ckyojnaisxvc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
dhdnsoayrdjw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L17
.L18 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L18
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L19 : 
 cmp rsp , rdx
 je .L20
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L19
.L20 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L21
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L21 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 leave
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L7
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L9
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L10
.L9 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L11
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L11
.L10 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call esmdctvgvoaj
 mov eax , 0
 call qqqbuaxeonwf
 mov eax , 0
 call nrerqliryzop
 mov eax , 0
 leave
 ret
esmdctvgvoaj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qqqbuaxeonwf : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
nrerqliryzop : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 192
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -192 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rax , -192 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 add rdx , 70
 mov rsi , rax
 mov rdi , rdx
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -132 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L7
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC6 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uxyqvuarcqyt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call hxzcnysforjc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov eax , 0
 leave
 ret
uxyqvuarcqyt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
hxzcnysforjc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 call uwbuxsnkkwdh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hunrlixhxuqe
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 call ztzaowjbnoed
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjnkaektojbk
 mov eax , 0
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ztzaowjbnoed : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L10
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L13
.L10 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L13 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
mjnkaektojbk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -88 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tapaqftbrqhr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 call nyaasqofyhfz
 mov eax , 0
 leave
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L8
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L14
.L8 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nyaasqofyhfz : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -96 [ rbp ] 
 lea rdx , -48 [ rbp ] 
 lea rcx , 20 [ rdx ] 
 mov edx , 40
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 call duinkpvfxhik
 mov eax , 0
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC3 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L7
.L8 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L7 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L8
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 call vhmtfiqscpwh
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
vhmtfiqscpwh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L11 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L7
.L8 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L8
 jmp .L9
.L10 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L10
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L14
.L15 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L15
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wnffthpyxcdu
 mov eax , 0
 call yhwaluyeaqfz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tqjsjdkkghlp
 mov eax , 0
 leave
 ret
wnffthpyxcdu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
yhwaluyeaqfz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L9
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L10
.L9 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L11
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L11
.L10 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
tqjsjdkkghlp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eihjswapsybh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L12
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L13
.L12 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L13 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L17
.L19 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tzvjbtvkejes
 mov eax , 0
 call agfrdqbfvanm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call otktbdpwohxx
 mov eax , 0
 leave
 ret
tzvjbtvkejes : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -100 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -100 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 cmp DWORD PTR -92 [ rbp ] , 99
 jle .L4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L5
.L4 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L5 : 
 mov eax , DWORD PTR -92 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
agfrdqbfvanm : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
otktbdpwohxx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L15
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L16
.L15 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L16 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qqqbuaxeonwf
 mov eax , 0
 call oeyozhdsqnhj
 mov eax , 0
 call rfgcepgasunz
 mov eax , 0
 leave
 ret
qqqbuaxeonwf : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L6 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L7
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L10
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L10 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L16 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L15
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L16
.L15 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call syefzucomzey
 mov eax , 0
 call bjsoljbxvyai
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zpvzygkpjavu
 mov eax , 0
 leave
 ret
syefzucomzey : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L4 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
bjsoljbxvyai : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -132 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L9
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L11
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
zpvzygkpjavu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -128 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 mov edx , 50
 mov rsi , rcx
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bzvmzslneagm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ungufegmvgpj
 mov eax , 0
 call lczjvypofmvf
 mov eax , 0
 leave
 ret
bzvmzslneagm : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -108 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -144 [ rbp ] , rdx
 mov QWORD PTR -136 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L13
.L4 : 
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
.L13 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ungufegmvgpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2338328219631577172
 movabs rdx , 8295758552588623969
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov DWORD PTR -32 [ rbp ] , 1852404340
 mov DWORD PTR -52 [ rbp ] , 0
 jmp .L15
.L16 : 
 lea rdx , -48 [ rbp ] 
 mov eax , DWORD PTR -52 [ rbp ] 
 cdqe
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -52 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rbx , eax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L16
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC3 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ycumhbjkobjs
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call eklheveznbgh
 mov eax , 0
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L15
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L16
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L16 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L15 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L17
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L17 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L20
.L21 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L20 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L21
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 leave
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L24
 call __stack_chk_fail @ PLT
.L24 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gmxvduowojve
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov eax , 0
 call xgwrjmbefokw
 mov eax , 0
 leave
 ret
gmxvduowojve : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -80 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
xgwrjmbefokw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 call xetofklyeote
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 call tguldezdfcwl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L4 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L11
.L8 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rwunkmogttly
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call mrjvvaeyjykc
 mov eax , 0
 call ajwrumhrlzgy
 mov eax , 0
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
mrjvvaeyjykc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ajwrumhrlzgy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L18 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L18
.L17 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 jle .L19
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L20
.L19 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 add eax , eax
 mov DWORD PTR -76 [ rbp ] , eax
.L20 : 
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L21 : 
 cmp rsp , rdx
 je .L22
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L21
.L22 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L23
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L23 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L24
 call __stack_chk_fail @ PLT
.L24 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 leave
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call unnplphejkbb
 mov eax , 0
 call oeyozhdsqnhj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov eax , 0
 leave
 ret
unnplphejkbb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L10
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pwsvhyxpeqcx
 mov eax , 0
 call feizjbvxxfjo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gmxvduowojve
 mov eax , 0
 leave
 ret
pwsvhyxpeqcx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movabs rsi , 8245282155717748040
 mov QWORD PTR [ rax ] , rsi
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
feizjbvxxfjo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
gmxvduowojve : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -80 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call usbrzgblavyn
 mov eax , 0
 call cisrwjzhexat
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bgyypfcxvecb
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
usbrzgblavyn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L6
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
bgyypfcxvecb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 240
 mov DWORD PTR -244 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov QWORD PTR -224 [ rbp ] , 32
 mov QWORD PTR -216 [ rbp ] , 0
 mov QWORD PTR -208 [ rbp ] , 0
 mov QWORD PTR -200 [ rbp ] , 0
 mov QWORD PTR -192 [ rbp ] , 0
 mov QWORD PTR -184 [ rbp ] , 0
 mov QWORD PTR -176 [ rbp ] , 0
 mov QWORD PTR -168 [ rbp ] , 0
 mov QWORD PTR -160 [ rbp ] , 0
 mov QWORD PTR -152 [ rbp ] , 0
 mov QWORD PTR -144 [ rbp ] , 0
 mov QWORD PTR -136 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , 0
 mov QWORD PTR -120 [ rbp ] , 0
 mov QWORD PTR -112 [ rbp ] , 0
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov ebx , DWORD PTR -244 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -240 [ rbp ] , rax
 movsx rax , ebx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ebx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -232 [ rbp ] , rax
 mov eax , DWORD PTR -244 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -232 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 movsx rdx , ebx
 mov rcx , QWORD PTR -232 [ rbp ] 
 lea rax , -224 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 jmp .L14
.L16 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -224 [ rbp ] 
 mov esi , 200
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L18
.L14 : 
 lea rax , -224 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call strchr @ PLT
 test rax , rax
 je .L16
 jmp .L15
.L18 : 
 nop
.L15 : 
 lea rax , -224 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -224 [ rbp ] 
 mov rax , QWORD PTR -232 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -232 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -16 [ rbp ] 
 pop rbx
 pop r12
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vhmtfiqscpwh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
vhmtfiqscpwh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L9 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L5
.L6 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L6
 jmp .L7
.L8 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L8
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L15
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L16
.L15 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L16 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L19
.L20 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L19 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L20
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uhixokfdnayx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L15
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L15 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qqqbuaxeonwf
 mov eax , 0
 call pxspvavjkgnd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 leave
 ret
qqqbuaxeonwf : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
pxspvavjkgnd : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , rdx
 mov DWORD PTR -112 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -96 [ rbp ] 
 lea rdx , -128 [ rbp ] 
 lea rax , -48 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L7
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L7 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 call bulpyqkklfvg
 mov eax , 0
 call gmevqtnfsdog
 mov eax , 0
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L8
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L9
.L8 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 call ycumhbjkobjs
 mov eax , 0
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L23
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L24
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L26
.L24 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L26
.L23 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L25
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L26
.L25 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L26 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call zyyshkqdgbgs
 mov eax , 0
 call znwclqgmeejm
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 leave
 ret
zyyshkqdgbgs : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
znwclqgmeejm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L4
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L6
.L4 : 
 mov eax , 0
.L6 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call imgbghflolaf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call czuimwoyoujn
 mov eax , 0
 call ochtivcueybs
 mov eax , 0
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
czuimwoyoujn : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -48 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -48 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ochtivcueybs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 call oezekhzjsntn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L5
.L6 : 
 add DWORD PTR -8 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L6
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -4 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L8
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC3 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzwfqggxadbq
 mov eax , 0
 call njlcwifctwfx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nhuwvnktrfhj
 mov eax , 0
 leave
 ret
gzwfqggxadbq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
njlcwifctwfx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
nhuwvnktrfhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 304
 mov DWORD PTR -292 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -292 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov QWORD PTR -280 [ rbp ] , rax
 mov esi , 8
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -272 [ rbp ] , 65
 mov BYTE PTR -271 [ rbp ] , 66
 mov BYTE PTR -270 [ rbp ] , 67
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -272 [ rbp ] 
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L4
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC9 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call oaxoirzmdobf
 mov eax , 0
 call jzxgdkaleirh
 mov eax , 0
 leave
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
oaxoirzmdobf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 119
 ja .L11
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L13
.L11 : 
 mov eax , 0
.L13 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
jzxgdkaleirh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L16
.L19 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L18 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L18
.L17 : 
 add DWORD PTR -12 [ rbp ] , 1
.L16 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L19
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC3 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tvgnkflsmeqd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wwudzaktnwvo
 mov eax , 0
 call lczjvypofmvf
 mov eax , 0
 leave
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
wwudzaktnwvo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov QWORD PTR -152 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -140 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -136 [ rbp ] , edx
 mov edx , DWORD PTR -136 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -136 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -132 [ rbp ] , edx
 mov edx , DWORD PTR -132 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -132 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -128 [ rbp ] , eax
 mov ecx , DWORD PTR -128 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -128 [ rbp ] , edx
 mov edx , DWORD PTR -136 [ rbp ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -128 [ rbp ] 
 add eax , edx
 mov DWORD PTR -124 [ rbp ] , eax
 mov eax , DWORD PTR -136 [ rbp ] 
 sub eax , DWORD PTR -132 [ rbp ] 
 sub eax , DWORD PTR -128 [ rbp ] 
 mov DWORD PTR -120 [ rbp ] , eax
 mov edx , DWORD PTR -136 [ rbp ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -128 [ rbp ] 
 mov DWORD PTR -116 [ rbp ] , eax
 mov rdx , QWORD PTR -152 [ rbp ] 
 lea rax , -112 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC6 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call aulyksuwxtcw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L5
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L6
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call njibzicktiyl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call syefzucomzey
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 leave
 ret
njibzicktiyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov QWORD PTR -168 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -168 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
syefzucomzey : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L6 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L7
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L13
.L15 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L14
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 add DWORD PTR -100 [ rbp ] , 1
.L13 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L15
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 call dbyrevqalfqh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L10
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L13
.L14 : 
 add DWORD PTR -4 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L14
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov eax , 0
 call rwunkmogttly
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uiwjurnzzcev
 mov eax , 0
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
uiwjurnzzcev : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov ecx , DWORD PTR -52 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -52 [ rbp ] 
 mov ecx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 call bimvvmxtypwo
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call fnxvslegfewd
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L8
.L9 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L9
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
fnxvslegfewd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov eax , 0
 call hccipipvawmb
 mov eax , 0
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L14
 mov DWORD PTR -340 [ rbp ] , 256
.L14 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L19 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L19
.L18 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bhmoayxwvyqw
 mov eax , 0
 call ediyavermwpa
 mov eax , 0
 call hrvcejglwvwz
 mov eax , 0
 leave
 ret
bhmoayxwvyqw : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 312
 mov QWORD PTR -312 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -292 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -292 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -312 [ rbp ] 
 lea rax , -288 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L8
.L9 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L9
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
hrvcejglwvwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L10
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call vtkrdwxiqbsl
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call njdyjgaulnlv
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
vtkrdwxiqbsl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
njdyjgaulnlv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 312
 mov DWORD PTR -308 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -308 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -304 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -296 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -288 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -288 [ rbp ] , 65
 mov BYTE PTR -287 [ rbp ] , 66
 mov BYTE PTR -286 [ rbp ] , 67
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -288 [ rbp ] 
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L10
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L13
.L10 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vtebtqzyupir
 mov eax , 0
 call elpqwqavaefi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhpxpgjtbhtc
 mov eax , 0
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L4 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L11 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
dhpxpgjtbhtc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cyqxorzbrxuh
 mov eax , 0
 call efqtiriukyfe
 mov eax , 0
 call uhixokfdnayx
 mov eax , 0
 leave
 ret
cyqxorzbrxuh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L5
.L4 : 
 mov eax , 1
 jmp .L6
.L5 : 
 mov eax , 0
.L6 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L8
.L7 : 
 mov eax , 1
 jmp .L9
.L8 : 
 mov eax , 0
.L9 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L10
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L11
.L10 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L15
.L16 : 
 add DWORD PTR -36 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L16
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L19
.L20 : 
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L19 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L20
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nlljivnwazob
 mov eax , 0
 call ypnxxakoaims
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call hlblkqnmxmod
 mov eax , 0
 leave
 ret
nlljivnwazob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L6
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 nop
 leave
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
hlblkqnmxmod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 call pcsqarrmtecs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L4
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L6
.L4 : 
 mov eax , 0
.L6 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pvtkmghmizwz
 mov eax , 0
 call gzwfqggxadbq
 mov eax , 0
 call vowwwcujhpyw
 mov eax , 0
 leave
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
gzwfqggxadbq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
vowwwcujhpyw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , DWORD PTR -96 [ rbp ] 
 cmp eax , 9
 jg .L13
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -96 [ rbp ] 
 mov DWORD PTR -92 [ rbp ] , eax
 jmp .L14
.L13 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -96 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
.L14 : 
 mov eax , DWORD PTR -96 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov eax , DWORD PTR -92 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 leave
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L4
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L7
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L12
.L7 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L10
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yggjeznqrxnr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 call efqtiriukyfe
 mov eax , 0
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L12
.L13 : 
 add DWORD PTR -36 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L13
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ftxsahsrawrv
 mov eax , 0
 call dowuvarprjhl
 mov eax , 0
 call qfvuwpnppjhy
 mov eax , 0
 leave
 ret
ftxsahsrawrv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L10
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
qfvuwpnppjhy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 call nqmosrsophxy
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L14
.L17 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L15
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L15
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L15 : 
 add DWORD PTR -8 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L16
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L17
.L16 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xpenjovrtczl
 mov eax , 0
 call hccipipvawmb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 leave
 ret
xpenjovrtczl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7863333806460921160
 movabs rdx , 495753047666
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -48 [ rbp ] 
 add rax , 20
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L6
 mov DWORD PTR -340 [ rbp ] , 256
.L6 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L14
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L14 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L11 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L16
.L19 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L17
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L17
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L17 : 
 add DWORD PTR -16 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L18
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L19
.L18 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gmevqtnfsdog
 mov eax , 0
 call fanqrfjqffpe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zpvzygkpjavu
 mov eax , 0
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
zpvzygkpjavu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -128 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 mov edx , 50
 mov rsi , rcx
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wlhksrtprwvo
 mov eax , 0
 call lzhuvpopmudj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lyulcezkytfy
 mov eax , 0
 leave
 ret
wlhksrtprwvo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
lzhuvpopmudj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L9
.L12 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L10
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L10 : 
 add DWORD PTR -16 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L11
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L12
.L11 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
lyulcezkytfy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdzikgtgutvi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L7 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L8
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call maqnfazfvjvg
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L7
.L4 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L10
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L11
.L10 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L12
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L12
.L11 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L13
.L12 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zqjaektwachr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ajwknuvsqpod
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov eax , 0
 leave
 ret
zqjaektwachr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR -56 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ajwknuvsqpod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L15
.L16 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L16
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 call elpqwqavaefi
 mov eax , 0
 call mlxkhxhtntmv
 mov eax , 0
 leave
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L6 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
mlxkhxhtntmv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -48 [ rbp ] 
 add rax , rdx
 movabs rsi , 2334392307038315863
 movabs rdi , 8079569230801956724
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 2318348173487599474
 mov QWORD PTR 16 [ rax ] , rcx
 mov BYTE PTR 24 [ rax ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call fdevzikixvga
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ymhjpxqydwol
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L10
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ymhjpxqydwol : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 call ugfnfnzigsrf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L12
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L14
.L12 : 
 mov eax , 0
.L14 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dbmdegrltknb
 mov eax , 0
 call hccipipvawmb
 mov eax , 0
 call bfojvsbuecxe
 mov eax , 0
 leave
 ret
dbmdegrltknb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rdx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L9
 mov DWORD PTR -340 [ rbp ] , 256
.L9 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
bfojvsbuecxe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L17
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L17
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L17
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L17
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L18
.L17 : 
 mov eax , 1
 jmp .L19
.L18 : 
 mov eax , 0
.L19 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L20
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L21
.L20 : 
 mov eax , 1
 jmp .L22
.L21 : 
 mov eax , 0
.L22 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L23
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L24
.L23 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L25
.L24 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L25 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L26
 call __stack_chk_fail @ PLT
.L26 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 call duinkpvfxhik
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L14
.L15 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L14 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L15
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bulpyqkklfvg
 mov eax , 0
 call yhwaluyeaqfz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrixcktekyxz
 mov eax , 0
 leave
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L6
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L7
.L6 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L7 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
yhwaluyeaqfz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L13
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L14
.L13 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L15
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L15
.L14 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L16
.L15 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L16 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
lrixcktekyxz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L19 : 
 cmp rsp , rdx
 je .L20
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L19
.L20 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L21
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L21 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cspvzrbidecv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L4
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L5
.L4 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L6
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L19 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L19
.L18 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gmevqtnfsdog
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call errjklfnnpoa
 mov eax , 0
 call kdpaygjnvazy
 mov eax , 0
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
errjklfnnpoa : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -84 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call fdzikgtgutvi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov eax , 0
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ediyavermwpa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call fltowcclbbld
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nhuwvnktrfhj
 mov eax , 0
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
fltowcclbbld : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
nhuwvnktrfhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 304
 mov DWORD PTR -292 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -292 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov QWORD PTR -280 [ rbp ] , rax
 mov esi , 8
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -272 [ rbp ] , 65
 mov BYTE PTR -271 [ rbp ] , 66
 mov BYTE PTR -270 [ rbp ] , 67
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -272 [ rbp ] 
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ksllarmyttxu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call fltowcclbbld
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov eax , 0
 leave
 ret
ksllarmyttxu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L4
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L4
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
.L4 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
fltowcclbbld : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC5 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC7 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call fdzikgtgutvi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L10
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L14
.L10 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L14 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call otktbdpwohxx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ckyojnaisxvc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call wdqgfcrzbsiz
 mov eax , 0
 leave
 ret
otktbdpwohxx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ckyojnaisxvc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L11
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L17
.L11 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
wdqgfcrzbsiz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L19 : 
 cmp rsp , rdx
 je .L20
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L19
.L20 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L21
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L21 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L22 : 
 cmp rsp , rdx
 je .L23
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L22
.L23 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L24
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L24 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L25
 call __stack_chk_fail @ PLT
.L25 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wpfmvqfnircf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pnxgivxtjwdh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov eax , 0
 leave
 ret
wpfmvqfnircf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
pnxgivxtjwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 4
 mov eax , DWORD PTR -84 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -76 [ rbp ] , eax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L11
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L11 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzphakxspyuf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdokiymitgtu
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xdokiymitgtu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nxbhnpcfplks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qptspmnzhlfu
 mov eax , 0
 call wpfmvqfnircf
 mov eax , 0
 leave
 ret
nxbhnpcfplks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -44 [ rbp ] , 120
 mov BYTE PTR -34 [ rbp ] , 120
 mov BYTE PTR -22 [ rbp ] , 120
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qptspmnzhlfu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -4 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
wpfmvqfnircf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sdacdnszrrgx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 call ccynxwluinnu
 mov eax , 0
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -132 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L7
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
ccynxwluinnu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call vcelpqujibys
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 call rfgcepgasunz
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
vcelpqujibys : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov QWORD PTR -64 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L5
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L8
.L9 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L16 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L15
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L16
.L15 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ediyavermwpa
 mov eax , 0
 call feskijsrrgxh
 mov eax , 0
 call kwjypsxtjxpr
 mov eax , 0
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
feskijsrrgxh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
kwjypsxtjxpr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L13
.L15 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 49
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L14
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 add DWORD PTR -132 [ rbp ] , 1
.L13 : 
 cmp DWORD PTR -132 [ rbp ] , 2
 jle .L15
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uhixokfdnayx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -4 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ukzfhpapzzcz
 mov eax , 0
 call unnplphejkbb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhdnsoayrdjw
 mov eax , 0
 leave
 ret
ukzfhpapzzcz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
unnplphejkbb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC6 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
dhdnsoayrdjw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oblihoqfkqvy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC3 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L11
.L12 : 
 add DWORD PTR -4 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L12
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call esmdctvgvoaj
 mov eax , 0
 call ycfnquuwgwwc
 mov eax , 0
 call efelwzeculzn
 mov eax , 0
 leave
 ret
esmdctvgvoaj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .align 8
ycfnquuwgwwc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -72 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -64 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rax , ebx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 movsx rax , ebx
 cmp rdx , rax
 jb .L12
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
efelwzeculzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L19 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L19
.L18 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uhixokfdnayx
 mov eax , 0
 call nizfgrhfmzwv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L9
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L11
.L9 : 
 mov eax , 0
.L11 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov eax , 0
 call uxyqvuarcqyt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 leave
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
uxyqvuarcqyt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L11
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L17
.L11 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cyqxorzbrxuh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 leave
 ret
cyqxorzbrxuh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L5
.L4 : 
 mov eax , 1
 jmp .L6
.L5 : 
 mov eax , 0
.L6 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L8
.L7 : 
 mov eax , 1
 jmp .L9
.L8 : 
 mov eax , 0
.L9 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L10
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L11
.L10 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xpenjovrtczl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qitjlbmnliwr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qptspmnzhlfu
 mov eax , 0
 leave
 ret
xpenjovrtczl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7863333806460921160
 movabs rdx , 495753047666
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -48 [ rbp ] 
 add rax , 20
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qitjlbmnliwr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L7
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qptspmnzhlfu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -4 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L10
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 call feskijsrrgxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call kurvnplwrsho
 mov eax , 0
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
feskijsrrgxh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
kurvnplwrsho : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov DWORD PTR -124 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -88 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -88 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -124 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC3 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L13
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L13 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hrvcejglwvwz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ovmgkdegugmz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cbibyvccnwpj
 mov eax , 0
 leave
 ret
hrvcejglwvwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ovmgkdegugmz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cbibyvccnwpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nizfgrhfmzwv
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 call kcgpwajdjhtx
 mov eax , 0
 leave
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
kcgpwajdjhtx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call jsczuwnqybnx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov eax , 0
 call xsinehmjnsfr
 mov eax , 0
 leave
 ret
jsczuwnqybnx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -75 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -74 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -70 [ rbp ] , al
 mov ecx , DWORD PTR -100 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -96 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 movsx rax , ecx
 mov rdx , rax
 mov esi , 50
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -100 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
xsinehmjnsfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ukftfiipmfub
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjnkaektojbk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call gmdnzfeepbzc
 mov eax , 0
 leave
 ret
ukftfiipmfub : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -8 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L5
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -4 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L7
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
mjnkaektojbk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -88 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
gmdnzfeepbzc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC2 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eklheveznbgh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 leave
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L14
.L16 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L15
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 add DWORD PTR -20 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L16
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fmhzuinagzwq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 call nrerqliryzop
 mov eax , 0
 leave
 ret
fmhzuinagzwq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -36 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L5
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L11
.L13 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L12
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 add DWORD PTR -100 [ rbp ] , 1
.L11 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L13
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
nrerqliryzop : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 192
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -192 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rax , -192 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 add rdx , 70
 mov rsi , rax
 mov rdi , rdx
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call jamjufztgkya
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm2 , xmm2
 cvtsd2ss xmm2 , xmm0
 movd eax , xmm2
 movd xmm0 , eax
 call wgluyxdocdib
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
jamjufztgkya : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 call ccynxwluinnu
 mov eax , 0
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L4
.L7 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ccynxwluinnu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nlljivnwazob
 mov eax , 0
 call hrsdwcjqkudo
 mov eax , 0
 call smcgypmoszwd
 mov eax , 0
 leave
 ret
nlljivnwazob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L6
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 nop
 leave
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
smcgypmoszwd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -48 [ rbp ] , 10
 mov DWORD PTR -52 [ rbp ] , 0
 mov eax , DWORD PTR -48 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rsi , rdx
 mov edi , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -52 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -52 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -52 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -52 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -24 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call zyyshkqdgbgs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call omgntkvpmgjk
 mov eax , 0
 call gmevqtnfsdog
 mov eax , 0
 leave
 ret
zyyshkqdgbgs : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
omgntkvpmgjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call cspvzrbidecv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L5
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L7
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L11
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L11 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vtebtqzyupir
 mov eax , 0
 call xfvufpmexnyz
 mov eax , 0
 call ijfhuvyfujdf
 mov eax , 0
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L4 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
xfvufpmexnyz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -48 [ rbp ] , -5
 mov DWORD PTR -44 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 add eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 sub eax , DWORD PTR -48 [ rbp ] 
 sub eax , DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -28 [ rbp ] , eax
 mov esi , DWORD PTR -28 [ rbp ] 
 mov ecx , DWORD PTR -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -23 [ rbp ] 
 mov esi , 35
 mov rdi , rax
 call fgets @ PLT
 lea rax , -23 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ijfhuvyfujdf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L13
.L14 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L13 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L14
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call yggjeznqrxnr
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ksllarmyttxu
 mov eax , 0
 call jzxgdkaleirh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tvhtzhlxluob
 mov eax , 0
 leave
 ret
ksllarmyttxu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L4
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L4
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
.L4 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
jzxgdkaleirh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L7
.L10 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 add DWORD PTR -12 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L10
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
tvhtzhlxluob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 call efqtiriukyfe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -36 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L10
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L12
.L10 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L12 : 
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov eax , 0
 call bfojvsbuecxe
 mov eax , 0
 call kalfckmrnucv
 mov eax , 0
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
bfojvsbuecxe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L9
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L10
.L9 : 
 mov eax , 1
 jmp .L11
.L10 : 
 mov eax , 0
.L11 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L12
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L13
.L12 : 
 mov eax , 1
 jmp .L14
.L13 : 
 mov eax , 0
.L14 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L15
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L16
.L15 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ediyavermwpa
 mov eax , 0
 call zhthpxtaxnoc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov eax , 0
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
zhthpxtaxnoc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call duinkpvfxhik
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC4 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC5 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L13
.L14 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L13 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L14
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call havbqmnhsvpz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -132 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L5
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L10
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L12
.L10 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L12 : 
 nop
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L14
.L15 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L15
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gmevqtnfsdog
 mov eax , 0
 call lczjvypofmvf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call xztgjedozhvw
 mov eax , 0
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC5 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
xztgjedozhvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
.L11 : 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L11
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call maqnfazfvjvg
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L6
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L6 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L11
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrixcktekyxz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call clskshqphbip
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 leave
 ret
 .align 8
lrixcktekyxz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
clskshqphbip : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rax
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 leave
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L5
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L7
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tapaqftbrqhr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tvhtzhlxluob
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tisjysstguln
 mov eax , 0
 leave
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
tvhtzhlxluob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
tisjysstguln : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -68 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L4
.L7 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nrerqliryzop
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pxsnksvbavce
 mov eax , 0
 call tvgnkflsmeqd
 mov eax , 0
 leave
 ret
nrerqliryzop : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 192
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -192 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rax , -192 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 add rdx , 70
 mov rsi , rax
 mov rdi , rdx
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
pxsnksvbavce : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L6
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L12
.L6 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L14 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ztzaowjbnoed
 mov eax , 0
 call uxyqvuarcqyt
 mov eax , 0
 call gzwfqggxadbq
 mov eax , 0
 leave
 ret
ztzaowjbnoed : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L7
.L4 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
uxyqvuarcqyt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
gzwfqggxadbq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 call auzozyljimuk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov eax , 0
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L7
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L8
.L7 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L8 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L12
.L14 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call akuyhosvenqa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qitjlbmnliwr
 mov eax , 0
 leave
 ret
akuyhosvenqa : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -117 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -116 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -115 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -117 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -117 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L6
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qitjlbmnliwr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ulbphpyecccp
 mov eax , 0
 call fdzikgtgutvi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ulbphpyecccp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L17
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L17 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 call yggjeznqrxnr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov eax , 0
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L10
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L10 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zpvzygkpjavu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vrkfupldzmmi
 mov eax , 0
 leave
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
zpvzygkpjavu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -128 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 mov edx , 50
 mov rsi , rcx
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vrkfupldzmmi : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L11
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
.L11 : 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , [ rbx+rax ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 cdqe
 add rax , rdx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wnffthpyxcdu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call npkandihbzew
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 leave
 ret
wnffthpyxcdu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
npkandihbzew : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -13 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -12 [ rbp ] , al
 lea rax , .LC3 [ rip ] 
 mov BYTE PTR -11 [ rbp ] , al
 mov rdx , QWORD PTR -24 [ rbp ] 
 lea rax , -13 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L11
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bulpyqkklfvg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mlwhovnblrse
 mov eax , 0
 call qlpaezcmkarp
 mov eax , 0
 leave
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L6
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L7
.L6 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L7 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
mlwhovnblrse : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 lea rcx , [ rax+rdx ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
qlpaezcmkarp : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC5 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L17
.L18 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L17 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L18
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ypnxxakoaims
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov eax , 0
 leave
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L7
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L10
.L7 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yaewxkwxmrqk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bhmoayxwvyqw
 mov eax , 0
 leave
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L9
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
bhmoayxwvyqw : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 312
 mov QWORD PTR -312 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -292 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -292 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L15
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -312 [ rbp ] 
 lea rax , -288 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call oblihoqfkqvy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L16
.L17 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L17
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qlpaezcmkarp
 mov eax , 0
 call njlcwifctwfx
 mov eax , 0
 call uxyqvuarcqyt
 mov eax , 0
 leave
 ret
qlpaezcmkarp : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
njlcwifctwfx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
uxyqvuarcqyt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L7
.L8 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L8
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 call fvszvmuqfdjj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call iwauxxfxdndt
 mov eax , 0
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
fvszvmuqfdjj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
iwauxxfxdndt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call auzozyljimuk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L9
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L11
.L9 : 
 mov eax , 0
.L11 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call iwauxxfxdndt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qitjlbmnliwr
 mov eax , 0
 leave
 ret
iwauxxfxdndt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
qitjlbmnliwr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L13
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eklheveznbgh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 leave
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC3 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC4 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC5 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC8 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hrsdwcjqkudo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call adxolhkjnkqh
 mov eax , 0
 call ochtivcueybs
 mov eax , 0
 leave
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
adxolhkjnkqh : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rcx , [ rbx+rax ] 
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rcx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov edx , 16
 mov rsi , rcx
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ochtivcueybs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov eax , 0
 call dqolmbfqphap
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC3 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L17
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L21
.L17 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L21 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cgsajkqojmuc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gmxvduowojve
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 leave
 ret
cgsajkqojmuc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
gmxvduowojve : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -80 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call duinkpvfxhik
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov eax , 0
 leave
 ret
duinkpvfxhik : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L4
.L5 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L17
.L19 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gyjxvpsicrtv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 call lzhuvpopmudj
 mov eax , 0
 leave
 ret
gyjxvpsicrtv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -36 [ rbp ] , 64
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
lzhuvpopmudj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L7
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L8 : 
 add DWORD PTR -16 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L9
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L10
.L9 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xgwrjmbefokw
 mov eax , 0
 call porcuauvtqpr
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 leave
 ret
xgwrjmbefokw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
porcuauvtqpr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -120 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -64 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 lea rax , -112 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call mlkaqullpnnw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
mlkaqullpnnw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC0 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lyulcezkytfy
 mov eax , 0
 call vawlugafkosd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gfkmjyowtube
 mov eax , 0
 leave
 ret
lyulcezkytfy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
gfkmjyowtube : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -88 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -84 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call fnxvslegfewd
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
fnxvslegfewd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L7
.L8 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L7 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L8
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lczjvypofmvf
 mov eax , 0
 call fanqrfjqffpe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pnxgivxtjwdh
 mov eax , 0
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
pnxgivxtjwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 4
 mov eax , DWORD PTR -84 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -76 [ rbp ] , eax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC5 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L8
.L9 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L9
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dsrrkpoeqzzd
 mov eax , 0
 call uxyqvuarcqyt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call gmdnzfeepbzc
 mov eax , 0
 leave
 ret
dsrrkpoeqzzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
uxyqvuarcqyt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
gmdnzfeepbzc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC5 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call hxilerknljqo
 mov eax , 0
 call smytpxhigvcy
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
hxilerknljqo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L7
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L11
.L7 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L11 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
smytpxhigvcy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L14
.L17 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L15
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L16
.L15 : 
 add DWORD PTR -28 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L17
.L16 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L20
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L21
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L22
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L23
.L22 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L23
.L21 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L23
.L20 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L23 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L4
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ybnzqaimubdo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
ybnzqaimubdo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L11
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ueozzdnnmfyv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qptspmnzhlfu
 mov eax , 0
 call ypnxxakoaims
 mov eax , 0
 leave
 ret
ueozzdnnmfyv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
qptspmnzhlfu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -4 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L8
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wpfmvqfnircf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qpyixmxfapaz
 mov eax , 0
 call feskijsrrgxh
 mov eax , 0
 leave
 ret
wpfmvqfnircf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qpyixmxfapaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -64 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
feskijsrrgxh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L8
.L10 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L9
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 add DWORD PTR -100 [ rbp ] , 1
.L8 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L10
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L13
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L14
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 call sdacdnszrrgx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L6
.L7 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L13
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L14
.L13 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L14 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 call akuyhosvenqa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov eax , 0
 leave
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
akuyhosvenqa : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -117 [ rbp ] , al
 lea rax , .LC3 [ rip ] 
 mov BYTE PTR -116 [ rbp ] , al
 lea rax , .LC4 [ rip ] 
 mov BYTE PTR -115 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -117 [ rbp ] 
 lea rcx , .LC5 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -117 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L14
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L16
.L14 : 
 mov eax , 0
.L16 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call msayoeistmjf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhpxpgjtbhtc
 mov eax , 0
 call rfgcepgasunz
 mov eax , 0
 leave
 ret
msayoeistmjf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dhpxpgjtbhtc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call xztgjedozhvw
 mov eax , 0
 call hrsdwcjqkudo
 mov eax , 0
 call pvtkmghmizwz
 mov eax , 0
 leave
 ret
xztgjedozhvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
.L7 : 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC3 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nqmosrsophxy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call gmdnzfeepbzc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrixcktekyxz
 mov eax , 0
 call gyjxvpsicrtv
 mov eax , 0
 leave
 ret
 .align 8
gmdnzfeepbzc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC0 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
lrixcktekyxz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gyjxvpsicrtv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -36 [ rbp ] , 64
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uwbuxsnkkwdh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L5
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L5 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 call jamjufztgkya
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
jamjufztgkya : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L10 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov eax , 0
 call fvszvmuqfdjj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call vabvugukmimh
 mov eax , 0
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fvszvmuqfdjj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
vabvugukmimh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L15
.L17 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L16
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L16 : 
 add DWORD PTR -100 [ rbp ] , 1
.L15 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L17
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov edx , 100
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gyjxvpsicrtv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call sadkxrsuawaq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vrkfupldzmmi
 mov eax , 0
 leave
 ret
gyjxvpsicrtv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -36 [ rbp ] , 64
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
sadkxrsuawaq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vrkfupldzmmi : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L11
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
.L11 : 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , [ rbx+rax ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 cdqe
 add rax , rdx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xfvufpmexnyz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wnffthpyxcdu
 mov eax , 0
 leave
 ret
xfvufpmexnyz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -48 [ rbp ] , -5
 mov DWORD PTR -44 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 add eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 sub eax , DWORD PTR -48 [ rbp ] 
 sub eax , DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -28 [ rbp ] , eax
 mov esi , DWORD PTR -28 [ rbp ] 
 mov ecx , DWORD PTR -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -23 [ rbp ] 
 mov esi , 35
 mov rdi , rax
 call fgets @ PLT
 lea rax , -23 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
wnffthpyxcdu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ugfnfnzigsrf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov eax , 0
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L6
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 nop
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L12
.L13 : 
 add DWORD PTR -8 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L13
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L14
.L15 : 
 add DWORD PTR -4 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L15
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fvntbvkbhnxk
 mov eax , 0
 call kdpaygjnvazy
 mov eax , 0
 call gmevqtnfsdog
 mov eax , 0
 leave
 ret
fvntbvkbhnxk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call efqtiriukyfe
 mov eax , 0
 call qrojfamadtkc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov eax , 0
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -36 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L5
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptosuvlmykym
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 call goaztayvxlif
 mov eax , 0
 leave
 ret
ptosuvlmykym : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov ecx , DWORD PTR -60 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -56 [ rbp ] , rax
 movsx rax , ecx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov eax , DWORD PTR -60 [ rbp ] 
 imul eax , eax
 mov ecx , eax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
goaztayvxlif : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L20 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L22
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L20
.L22 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xajmzkxxrzyn
 mov eax , 0
 call hrsdwcjqkudo
 mov eax , 0
 call dsrrkpoeqzzd
 mov eax , 0
 leave
 ret
xajmzkxxrzyn : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 40
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -64 [ rbp ] 
 mov edx , 50
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -112 [ rbp ] 
 add rax , rdx
 movabs rsi , 2338328219631577172
 movabs rdi , 7090169281335873121
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rsi , 7885630523470801235
 movabs rdi , 5269326340202985248
 mov QWORD PTR 16 [ rax ] , rsi
 mov QWORD PTR 24 [ rax ] , rdi
 mov DWORD PTR 32 [ rax ] , 1802071072
 mov WORD PTR 36 [ rax ] , 101
 lea rdx , -112 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -120 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
dsrrkpoeqzzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 call xpenjovrtczl
 mov eax , 0
 leave
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L6
.L9 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L7
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L8
.L7 : 
 add DWORD PTR -28 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L9
.L8 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
xpenjovrtczl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7863333806460921160
 movabs rdx , 495753047666
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -48 [ rbp ] 
 add rax , 20
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 call ytrwssegkbaq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L4
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L5
.L4 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L6
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L18
.L19 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L18 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L19
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC2 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call elpqwqavaefi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eapcwvbyuhrl
 mov eax , 0
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
eapcwvbyuhrl : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 248
 mov QWORD PTR -248 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -232 [ rbp ] , 0
 mov DWORD PTR -228 [ rbp ] , 0
 jmp .L15
.L16 : 
 mov eax , DWORD PTR -228 [ rbp ] 
 add DWORD PTR -232 [ rbp ] , eax
 add DWORD PTR -228 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -228 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -248 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L16
 mov rax , QWORD PTR -248 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -248 [ rbp ] 
 lea rax , -224 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -224 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rwunkmogttly
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov eax , 0
 call thuwyekadomr
 mov eax , 0
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L12
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L12 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
thuwyekadomr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -40 [ rbp ] 
 lea rax , -44 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L18 : 
 call getchar @ PLT
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -40 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -40 [ rbp ] 
 cmp eax , -1
 jne .L18
.L17 : 
 mov edx , DWORD PTR -44 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 add eax , edx
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tmrojhkarojb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov eax , 0
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L5
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kcgpwajdjhtx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 leave
 ret
kcgpwajdjhtx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nxbhnpcfplks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 call ochtivcueybs
 mov eax , 0
 leave
 ret
nxbhnpcfplks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -44 [ rbp ] , 120
 mov BYTE PTR -34 [ rbp ] , 120
 mov BYTE PTR -22 [ rbp ] , 120
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L9
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L10
.L9 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L10 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ochtivcueybs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uiwjurnzzcev
 mov eax , 0
 call jzxgdkaleirh
 mov eax , 0
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
uiwjurnzzcev : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov ecx , DWORD PTR -52 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -52 [ rbp ] 
 mov ecx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
jzxgdkaleirh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L15
.L18 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L16
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L17
.L16 : 
 add DWORD PTR -12 [ rbp ] , 1
.L15 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L18
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call vdqqmxeirsbx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call mlkaqullpnnw
 mov eax , 0
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
mlkaqullpnnw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC4 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 call ccynxwluinnu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ccynxwluinnu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bjsoljbxvyai
 mov eax , 0
 call lczjvypofmvf
 mov eax , 0
 call auxounomwhgn
 mov eax , 0
 leave
 ret
bjsoljbxvyai : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -132 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L5
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC3 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
auxounomwhgn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 call qekjcxmkxvgo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call jujchwfcxryk
 mov eax , 0
 call bjsoljbxvyai
 mov eax , 0
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
jujchwfcxryk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bjsoljbxvyai : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L14
.L15 : 
 add DWORD PTR -132 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L15
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L16
.L17 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L17
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhdnsoayrdjw
 mov eax , 0
 call unnplphejkbb
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 leave
 ret
dhdnsoayrdjw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
unnplphejkbb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L13
.L16 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L14
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L15
.L14 : 
 add DWORD PTR -28 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L16
.L15 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L4 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L16
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L14
.L16 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xgwrjmbefokw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call njdyjgaulnlv
 mov eax , 0
 call qqqbuaxeonwf
 mov eax , 0
 leave
 ret
xgwrjmbefokw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
njdyjgaulnlv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 312
 mov DWORD PTR -308 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -308 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -304 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -296 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -288 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -288 [ rbp ] , 65
 mov BYTE PTR -287 [ rbp ] , 66
 mov BYTE PTR -286 [ rbp ] , 67
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -288 [ rbp ] 
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qqqbuaxeonwf : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC4 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L8
.L9 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ycumhbjkobjs
 mov eax , 0
 call fdzikgtgutvi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov eax , 0
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L15
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L16
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L16 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L15 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L17
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L18
.L17 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L23
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L24 : 
 cmp rsp , rdx
 je .L25
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L24
.L25 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L26
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L26 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L29
.L23 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L29 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L28
 call __stack_chk_fail @ PLT
.L28 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pxsnksvbavce
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call clskshqphbip
 mov eax , 0
 leave
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L4
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L6
.L4 : 
 mov eax , 0
.L6 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
pxsnksvbavce : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
clskshqphbip : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rax
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fmhzuinagzwq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zqjaektwachr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov eax , 0
 leave
 ret
fmhzuinagzwq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -36 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L5
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
zqjaektwachr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 mov rdx , QWORD PTR -56 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call tmrojhkarojb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L10
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC5 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call adxolhkjnkqh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call syefzucomzey
 mov eax , 0
 leave
 ret
adxolhkjnkqh : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rcx , [ rbx+rax ] 
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rcx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov edx , 16
 mov rsi , rcx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
syefzucomzey : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L10
.L11 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L10 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L11
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oblihoqfkqvy
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L6
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L6 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov eax , 0
 call gieykwwdqsih
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tqjsjdkkghlp
 mov eax , 0
 call xgwrjmbefokw
 mov eax , 0
 leave
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L4
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L5
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L5 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 mov eax , 0
 leave
 ret
 .align 8
tqjsjdkkghlp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
xgwrjmbefokw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wlhksrtprwvo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tjuxaxczdlks
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ctrvvluihuhf
 mov eax , 0
 leave
 ret
wlhksrtprwvo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tjuxaxczdlks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L9
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L10
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov eax , 0
 leave
 ret
ctrvvluihuhf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call oblihoqfkqvy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nyaasqofyhfz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 call hrsdwcjqkudo
 mov eax , 0
 leave
 ret
nyaasqofyhfz : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -96 [ rbp ] 
 lea rdx , -48 [ rbp ] 
 lea rcx , 20 [ rdx ] 
 mov edx , 40
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gafcdwelorst
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L6
.L7 : 
 add DWORD PTR -4 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 call bulpyqkklfvg
 mov eax , 0
 leave
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L7
.L9 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L8
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 add DWORD PTR -100 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L9
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L15
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L16
.L15 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L16 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L6
.L9 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 add DWORD PTR -12 [ rbp ] , 1
.L6 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atjofgjojwgd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhkhcuurjmt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call wdqgfcrzbsiz
 mov eax , 0
 leave
 ret
atjofgjojwgd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gvhkhcuurjmt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
wdqgfcrzbsiz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdevzikixvga
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 leave
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC5 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call lesmwaypwpvk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cbibyvccnwpj
 mov eax , 0
 call cgsajkqojmuc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call jujchwfcxryk
 mov eax , 0
 leave
 ret
cbibyvccnwpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cgsajkqojmuc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L14
.L15 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L15
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
jujchwfcxryk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call jmpwobtufiul
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 leave
 ret
 .align 8
jmpwobtufiul : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -72 [ rbp ] , 50
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -72 [ rbp ] 
 mov ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L16
.L18 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L17
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 add DWORD PTR -100 [ rbp ] , 1
.L16 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L18
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call bimvvmxtypwo
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L5
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L8
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L9
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L9
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L9 : 
 add DWORD PTR -8 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L10
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L11
.L10 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call yggjeznqrxnr
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov eax , 0
 call hccipipvawmb
 mov eax , 0
 call pacnceapbiua
 mov eax , 0
 leave
 ret
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L9
 mov DWORD PTR -340 [ rbp ] , 256
.L9 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
pacnceapbiua : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -116 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -116 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call elpqwqavaefi
 mov eax , 0
 call smytpxhigvcy
 mov eax , 0
 call gzwfqggxadbq
 mov eax , 0
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L5
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
smytpxhigvcy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L8
.L11 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L9
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L10
.L9 : 
 add DWORD PTR -28 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L11
.L10 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
gzwfqggxadbq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vdqqmxeirsbx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L15
.L17 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L16
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L16 : 
 add DWORD PTR -100 [ rbp ] , 1
.L15 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L17
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L20
.L23 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L21
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L22
.L21 : 
 add DWORD PTR -28 [ rbp ] , 1
.L20 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L23
.L22 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L24
 call __stack_chk_fail @ PLT
.L24 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wrziecznhrgd
 mov eax , 0
 call nyeugcyrmhrg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pxsnksvbavce
 mov eax , 0
 leave
 ret
wrziecznhrgd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
nyeugcyrmhrg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
pxsnksvbavce : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L8
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L14
.L8 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzphakxspyuf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L12
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L13
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L14 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L13 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L12 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ybnzqaimubdo
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
ybnzqaimubdo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L11
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L16 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L16
.L18 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L20
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L23
.L20 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L23 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atjofgjojwgd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call gaekgwmgwdud
 mov eax , 0
 leave
 ret
atjofgjojwgd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L9
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L11
.L9 : 
 mov eax , 0
.L11 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
gaekgwmgwdud : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , 20
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rcx , -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov edx , 20
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ajwknuvsqpod
 mov eax , 0
 call xfvufpmexnyz
 mov eax , 0
 call xhlaxqaxdtgg
 mov eax , 0
 leave
 ret
ajwknuvsqpod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xfvufpmexnyz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -48 [ rbp ] , -5
 mov DWORD PTR -44 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 add eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 sub eax , DWORD PTR -48 [ rbp ] 
 sub eax , DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 cdq
 idiv DWORD PTR -48 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -44 [ rbp ] 
 mov DWORD PTR -28 [ rbp ] , eax
 mov esi , DWORD PTR -28 [ rbp ] 
 mov ecx , DWORD PTR -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -23 [ rbp ] 
 mov esi , 35
 mov rdi , rax
 call fgets @ PLT
 lea rax , -23 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
xhlaxqaxdtgg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L12
.L17 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L13
.L14 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L14
 jmp .L15
.L16 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L16
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L12 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L17
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ewyehunrwfkm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -4 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L8
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L10
.L13 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 add DWORD PTR -12 [ rbp ] , 1
.L10 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L13
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call axekkffjccge
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call fnxvslegfewd
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
fnxvslegfewd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L10
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L14
.L10 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L14 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call skbqlucjwyob
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call npkandihbzew
 mov eax , 0
 call dowuvarprjhl
 mov eax , 0
 leave
 ret
skbqlucjwyob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
npkandihbzew : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov BYTE PTR -13 [ rbp ] , al
 lea rax , .LC6 [ rip ] 
 mov BYTE PTR -12 [ rbp ] , al
 lea rax , .LC7 [ rip ] 
 mov BYTE PTR -11 [ rbp ] , al
 mov rdx , QWORD PTR -24 [ rbp ] 
 lea rax , -13 [ rbp ] 
 lea rcx , .LC8 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mwuvaunulaca
 mov eax , 0
 call yhwaluyeaqfz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ybequloshtrt
 mov eax , 0
 leave
 ret
 .align 8
mwuvaunulaca : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L4
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
yhwaluyeaqfz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L7
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L8
.L7 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L9
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L9
.L8 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L10
.L9 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ybequloshtrt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 lea rsi , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L10
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L16
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L17
.L16 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L4 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L8
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L13
.L8 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L11
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call ukzfhpapzzcz
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qptspmnzhlfu
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rdx , rbx
 mov esi , r12d
 mov edi , eax
 call nojzdgnunvgm
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
ukzfhpapzzcz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qptspmnzhlfu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L9
.L10 : 
 add DWORD PTR -4 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L10
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
nojzdgnunvgm : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov DWORD PTR -56 [ rbp ] , esi
 mov QWORD PTR -64 [ rbp ] , rdx
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -56 [ rbp ] 
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -44 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 lea rcx , .LC5 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ugfnfnzigsrf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bdiksjilccqg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
bdiksjilccqg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L10
.L11 : 
 add DWORD PTR -4 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L11
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mwuvaunulaca
 mov eax , 0
 call imgbghflolaf
 mov eax , 0
 call wlhksrtprwvo
 mov eax , 0
 leave
 ret
 .align 8
mwuvaunulaca : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L4
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L7
.L8 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L8
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
wlhksrtprwvo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ctrvvluihuhf
 mov eax , 0
 call ueozzdnnmfyv
 mov eax , 0
 call pacnceapbiua
 mov eax , 0
 leave
 ret
ctrvvluihuhf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ueozzdnnmfyv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
pacnceapbiua : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -116 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -116 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L6 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L10
.L13 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 add DWORD PTR -12 [ rbp ] , 1
.L10 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L13
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 call ccynxwluinnu
 mov eax , 0
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ccynxwluinnu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qlpaezcmkarp
 mov eax , 0
 call ypnxxakoaims
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov eax , 0
 leave
 ret
qlpaezcmkarp : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call wauqsypwducv
 mov eax , 0
 call tvgnkflsmeqd
 mov eax , 0
 call elpqwqavaefi
 mov eax , 0
 leave
 ret
wauqsypwducv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 15
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -32 [ rbp ] 
 lea rax , -46 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -46 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L11 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pcsqarrmtecs
 mov eax , 0
 call azlvpnldpdww
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call mlkaqullpnnw
 mov eax , 0
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
mlkaqullpnnw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC7 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L11
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L12
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 add DWORD PTR -20 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L13
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fanqrfjqffpe
 mov eax , 0
 call vjzunlqqzsyj
 mov eax , 0
 call mzxiycohslhk
 mov eax , 0
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
vjzunlqqzsyj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
mzxiycohslhk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L22
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L23
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L25
.L23 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L25
.L22 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L24
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L25
.L24 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L25 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 call oblihoqfkqvy
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 call ytzrdzzbhhhn
 mov eax , 0
 call tvgnkflsmeqd
 mov eax , 0
 leave
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L7
.L9 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L8
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 add DWORD PTR -100 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L9
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ytzrdzzbhhhn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L14 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call dbyrevqalfqh
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L6 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qfvuwpnppjhy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call jujchwfcxryk
 mov eax , 0
 leave
 ret
qfvuwpnppjhy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L6
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L9
.L6 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
jujchwfcxryk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call mrjvvaeyjykc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
mrjvvaeyjykc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L17
.L19 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L18
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 add DWORD PTR -100 [ rbp ] , 1
.L17 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L19
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call havbqmnhsvpz
 mov eax , 0
 call vdpkphetvxfl
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 leave
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -132 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L5
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L7
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L14 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L13
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L14
.L13 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L17
.L20 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L18
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L18
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L18 : 
 add DWORD PTR -16 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L19
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L20
.L19 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 call nizfgrhfmzwv
 mov eax , 0
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L5
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nizfgrhfmzwv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call jtvgccxnghxq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call adxolhkjnkqh
 mov eax , 0
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
jtvgccxnghxq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 add eax , eax
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
adxolhkjnkqh : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rcx , [ rbx+rax ] 
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rcx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov edx , 16
 mov rsi , rcx
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cyqxorzbrxuh
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 leave
 ret
cyqxorzbrxuh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L5
.L4 : 
 mov eax , 1
 jmp .L6
.L5 : 
 mov eax , 0
.L6 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L8
.L7 : 
 mov eax , 1
 jmp .L9
.L8 : 
 mov eax , 0
.L9 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L10
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L11
.L10 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L15
.L18 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L16
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L17
.L16 : 
 add DWORD PTR -28 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L18
.L17 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L21
.L22 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L21 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L22
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L23
 call __stack_chk_fail @ PLT
.L23 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call hxzcnysforjc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov eax , 0
 call xgwrjmbefokw
 mov eax , 0
 leave
 ret
hxzcnysforjc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
xgwrjmbefokw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call frvpjawivwgo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 leave
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L11
.L12 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L12
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zpvzygkpjavu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrixcktekyxz
 mov eax , 0
 call rfgcepgasunz
 mov eax , 0
 leave
 ret
zpvzygkpjavu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -128 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 mov edx , 50
 mov rsi , rcx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
lrixcktekyxz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -76 [ rbp ] , 4
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -68 [ rbp ] , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .align 8
rfgcepgasunz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kalfckmrnucv
 mov eax , 0
 call zyyshkqdgbgs
 mov eax , 0
 call thuwyekadomr
 mov eax , 0
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
zyyshkqdgbgs : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
thuwyekadomr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -40 [ rbp ] 
 lea rax , -44 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -40 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -40 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov edx , DWORD PTR -44 [ rbp ] 
 mov eax , DWORD PTR -40 [ rbp ] 
 add eax , edx
 mov DWORD PTR -36 [ rbp ] , eax
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call chwthkpswpff
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 leave
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L6
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L8
.L6 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L8 : 
 nop
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ztzaowjbnoed
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atjofgjojwgd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call adxolhkjnkqh
 mov eax , 0
 leave
 ret
ztzaowjbnoed : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L7
.L4 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
atjofgjojwgd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
adxolhkjnkqh : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rcx , [ rbx+rax ] 
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rcx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov edx , 16
 mov rsi , rcx
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov eax , 0
 call auzozyljimuk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ulbphpyecccp
 mov eax , 0
 leave
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ulbphpyecccp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call eselciymzxdd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uonoehsrnmfb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 leave
 ret
eselciymzxdd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
uonoehsrnmfb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -23 [ rbp ] , rax
 mov DWORD PTR -15 [ rbp ] , 1868785011
 mov WORD PTR -11 [ rbp ] , 25710
 mov BYTE PTR -9 [ rbp ] , 0
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -23 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gieykwwdqsih
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qlpaezcmkarp
 mov eax , 0
 call bjsoljbxvyai
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call vabvugukmimh
 mov eax , 0
 leave
 ret
qlpaezcmkarp : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
bjsoljbxvyai : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L5
.L6 : 
 add DWORD PTR -132 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L6
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L8
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
vabvugukmimh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L14
.L16 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L15
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 add DWORD PTR -100 [ rbp ] , 1
.L14 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L16
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov edx , 100
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call jmpwobtufiul
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov eax , 0
 call imgbghflolaf
 mov eax , 0
 leave
 ret
 .align 8
jmpwobtufiul : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -72 [ rbp ] , 50
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -72 [ rbp ] 
 mov ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L6
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L8
.L6 : 
 mov eax , 0
.L8 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L11
.L12 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call auzozyljimuk
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call nqmosrsophxy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 leave
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L14
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L15
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L16
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L15 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L14 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 mov eax , 0
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dsrrkpoeqzzd
 mov eax , 0
 call ediyavermwpa
 mov eax , 0
 call ftcpcqtptiid
 mov eax , 0
 leave
 ret
dsrrkpoeqzzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L9
.L10 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ftcpcqtptiid : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 184
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -192 [ rbp ] 
 lea rax , -128 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -128 [ rbp ] 
 add rax , rdx
 mov rdx , rbx
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uxyqvuarcqyt
 mov eax , 0
 call xsinehmjnsfr
 mov eax , 0
 call dowuvarprjhl
 mov eax , 0
 leave
 ret
uxyqvuarcqyt : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul ecx , eax
 lea rax , -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
xsinehmjnsfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qjudcbmgomgp
 mov eax , 0
 call pcsqarrmtecs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 leave
 ret
qjudcbmgomgp : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -4 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L5
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
pcsqarrmtecs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L13
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nrerqliryzop
 mov eax , 0
 call jzxgdkaleirh
 mov eax , 0
 call vawlugafkosd
 mov eax , 0
 leave
 ret
nrerqliryzop : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 192
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -192 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rax , -192 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 add rdx , 70
 mov rsi , rax
 mov rdi , rdx
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
jzxgdkaleirh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L6
.L9 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 add DWORD PTR -12 [ rbp ] , 1
.L6 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L5
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L5 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L6
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ulbphpyecccp
 mov eax , 0
 call ugfnfnzigsrf
 mov eax , 0
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L4 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L5
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ulbphpyecccp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L19 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L19
.L18 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call mrjvvaeyjykc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 call vjzunlqqzsyj
 mov eax , 0
 leave
 ret
 .align 8
mrjvvaeyjykc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L12
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L13
.L12 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L13 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
vjzunlqqzsyj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC3 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call iwauxxfxdndt
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cbibyvccnwpj
 mov eax , 0
 call elpqwqavaefi
 mov eax , 0
 leave
 ret
iwauxxfxdndt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
cbibyvccnwpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
elpqwqavaefi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L16
.L17 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L16 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L17
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 call oezekhzjsntn
 mov eax , 0
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L5
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
oezekhzjsntn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bfojvsbuecxe
 mov eax , 0
 call vjzunlqqzsyj
 mov eax , 0
 call njlcwifctwfx
 mov eax , 0
 leave
 ret
bfojvsbuecxe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L4
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L5
.L4 : 
 mov eax , 1
 jmp .L6
.L5 : 
 mov eax , 0
.L6 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L7
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L8
.L7 : 
 mov eax , 1
 jmp .L9
.L8 : 
 mov eax , 0
.L9 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L10
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L11
.L10 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
vjzunlqqzsyj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
njlcwifctwfx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call yggjeznqrxnr
 mov eax , 0
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L4
.L5 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L4 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L5
 nop
 nop
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov eax , 0
 call pvtkmghmizwz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call njibzicktiyl
 mov eax , 0
 leave
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC2 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
njibzicktiyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov QWORD PTR -168 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -168 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 call phhoqwnyhwci
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L7
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L11
.L7 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L11 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L15
.L18 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L16
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L17
.L16 : 
 add DWORD PTR -12 [ rbp ] , 1
.L15 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L18
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call omgntkvpmgjk
 mov eax , 0
 call jzxgdkaleirh
 mov eax , 0
 leave
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L7
.L9 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L8
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 add DWORD PTR -100 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L9
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
omgntkvpmgjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
jzxgdkaleirh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L13
.L16 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 add DWORD PTR -12 [ rbp ] , 1
.L13 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L16
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 call xcbaqluvlilg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L10
.L12 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L11
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 add DWORD PTR -100 [ rbp ] , 1
.L10 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L12
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 call xpenjovrtczl
 mov eax , 0
 call hrsdwcjqkudo
 mov eax , 0
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L5
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L6
.L5 : 
 add DWORD PTR -28 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
xpenjovrtczl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7863333806460921160
 movabs rdx , 495753047666
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -48 [ rbp ] 
 add rax , 20
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L15
.L16 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L16
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nyeugcyrmhrg
 mov eax , 0
 call efelwzeculzn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bhmoayxwvyqw
 mov eax , 0
 leave
 ret
nyeugcyrmhrg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
efelwzeculzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
bhmoayxwvyqw : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 312
 mov QWORD PTR -312 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -292 [ rbp ] , 0
 jmp .L13
.L14 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -292 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L14
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -312 [ rbp ] 
 lea rax , -288 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L9
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L10
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov eax , 0
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L19 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L18
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L19
.L18 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pxsnksvbavce
 mov eax , 0
 call qfvuwpnppjhy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call odthtcwrcfcb
 mov eax , 0
 leave
 ret
pxsnksvbavce : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qfvuwpnppjhy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
odthtcwrcfcb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xmgmdgvfkhub
 mov eax , 0
 call nsskhnesuvck
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov eax , 0
 leave
 ret
xmgmdgvfkhub : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -96 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nsskhnesuvck : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 320
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L11
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
.L11 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L14 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call efqtiriukyfe
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L4
.L5 : 
 add DWORD PTR -36 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L5
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L8
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L13
.L8 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L11
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC5 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nrerqliryzop
 mov eax , 0
 call qfvuwpnppjhy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wnffthpyxcdu
 mov eax , 0
 leave
 ret
nrerqliryzop : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 192
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -192 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 70
 mov rdi , rax
 call fgets @ PLT
 lea rax , -192 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 add rdx , 70
 mov rsi , rax
 mov rdi , rdx
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qfvuwpnppjhy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
wnffthpyxcdu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 14963
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rdx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov eax , 0
 call oeyozhdsqnhj
 mov eax , 0
 call qqqbuaxeonwf
 mov eax , 0
 leave
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L4
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L6
.L4 : 
 mov eax , 0
.L6 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
qqqbuaxeonwf : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pouurdracjsj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 call hrsdwcjqkudo
 mov eax , 0
 leave
 ret
 .align 8
pouurdracjsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rcx , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rcx
 xor ecx , ecx
 mov rcx , rsp
 mov r15 , rcx
 mov DWORD PTR -84 [ rbp ] , 4
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov esi , DWORD PTR -84 [ rbp ] 
 movsx rdi , ecx
 sub rdi , 1
 mov QWORD PTR -80 [ rbp ] , rdi
 movsx rdi , ecx
 mov QWORD PTR -128 [ rbp ] , rdi
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rbx , ecx
 movsx rdi , esi
 sub rdi , 1
 mov QWORD PTR -72 [ rbp ] , rdi
 movsx rdi , ecx
 mov r12 , rdi
 mov r13d , 0
 movsx rdi , esi
 mov rax , rdi
 mov edx , 0
 mov r14 , r13
 imul r14 , rax
 mov rdi , rdx
 imul rdi , r12
 add rdi , r14
 mul r12
 add rdi , rdx
 mov rdx , rdi
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , esi
 mov r8 , rax
 mov r9d , 0
 mov rdx , r11
 imul rdx , r8
 mov rax , r9
 imul rax , r10
 lea rdi , [ rdx+rax ] 
 mov rax , r10
 mul r8
 add rdi , rdx
 mov rdx , rdi
 movsx rdx , ecx
 movsx rax , esi
 imul rax , rdx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov DWORD PTR -88 [ rbp ] , 0
 jmp .L7
.L8 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR stdin [ rip ] 
 mov edx , DWORD PTR -88 [ rbp ] 
 movsx rdx , edx
 mov rcx , rdx
 imul rcx , rbx
 mov rdx , QWORD PTR -64 [ rbp ] 
 add rcx , rdx
 mov rdx , rax
 mov esi , 30
 mov rdi , rcx
 call fgets @ PLT
 mov eax , DWORD PTR -88 [ rbp ] 
 cdqe
 imul rax , rbx
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -88 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -88 [ rbp ] , 3
 jle .L8
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r15
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L14
.L16 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L15
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 add DWORD PTR -100 [ rbp ] , 1
.L14 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L16
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call uwbuxsnkkwdh
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov esi , ebx
 mov edi , eax
 call befjxwfwhwla
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L5
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L11
.L5 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
befjxwfwhwla : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -8 [ rbp ] , 1
 jmp .L13
.L16 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -8 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L14
 mov eax , DWORD PTR -8 [ rbp ] 
 mov DWORD PTR -4 [ rbp ] , eax
.L14 : 
 add DWORD PTR -8 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -20 [ rbp ] 
 jg .L15
 mov eax , DWORD PTR -8 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L16
.L15 : 
 mov ecx , DWORD PTR -4 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call hlblkqnmxmod
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gfkmjyowtube
 mov eax , 0
 call zyyshkqdgbgs
 mov eax , 0
 leave
 ret
hlblkqnmxmod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gfkmjyowtube : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -88 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -84 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
zyyshkqdgbgs : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 call cisrwjzhexat
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call xztgjedozhvw
 mov eax , 0
 leave
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
xztgjedozhvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
.L14 : 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L14
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mjtgcimszgqy
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 call lesmwaypwpvk
 mov eax , 0
 leave
 ret
mjtgcimszgqy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L4
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L6
.L4 : 
 mov eax , 0
.L6 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
lesmwaypwpvk : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov eax , 0
 call havbqmnhsvpz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 leave
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
havbqmnhsvpz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L10
.L11 : 
 add DWORD PTR -132 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L11
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L13
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L19
.L21 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L20
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L20 : 
 add DWORD PTR -100 [ rbp ] , 1
.L19 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L21
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call mrjvvaeyjykc
 mov eax , 0
 call lczjvypofmvf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eiytlelnfqwa
 mov eax , 0
 leave
 ret
 .align 8
mrjvvaeyjykc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov DWORD PTR -84 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC4 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
eiytlelnfqwa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 call gzwfqggxadbq
 mov eax , 0
 call gyjxvpsicrtv
 mov eax , 0
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gzwfqggxadbq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gyjxvpsicrtv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -36 [ rbp ] , 64
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L12
.L14 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L13
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 add DWORD PTR -100 [ rbp ] , 1
.L12 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L14
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call osivhbcxjonv
 mov eax , 0
 call qqtyjfrsbcre
 mov eax , 0
 call ediyavermwpa
 mov eax , 0
 leave
 ret
osivhbcxjonv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -122 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov esi , 10
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov rcx , QWORD PTR -136 [ rbp ] 
 lea rdx , -122 [ rbp ] 
 lea rax , -122 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -122 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qqtyjfrsbcre : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L8
.L9 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L9
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xetofklyeote
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 call ratujvviahox
 mov eax , 0
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call jamjufztgkya
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
jamjufztgkya : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call feskijsrrgxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eiytlelnfqwa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call yxrivrnufhaa
 mov eax , 0
 leave
 ret
feskijsrrgxh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
eiytlelnfqwa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
yxrivrnufhaa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov r8 , rdx
 mov ecx , 10
 mov edx , 0
 lea rsi , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call njlcwifctwfx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call njibzicktiyl
 mov eax , 0
 call fanqrfjqffpe
 mov eax , 0
 leave
 ret
 .align 8
njlcwifctwfx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
njibzicktiyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov QWORD PTR -168 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -168 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L8
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L9
.L8 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call chwthkpswpff
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ulbphpyecccp
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ulbphpyecccp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call auzozyljimuk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L9
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mlwhovnblrse
 mov eax , 0
 call oxeggdeaemmh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eapcwvbyuhrl
 mov eax , 0
 leave
 ret
mlwhovnblrse : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 lea rcx , [ rax+rdx ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
eapcwvbyuhrl : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 248
 mov QWORD PTR -248 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -232 [ rbp ] , 0
 mov DWORD PTR -228 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov eax , DWORD PTR -228 [ rbp ] 
 add DWORD PTR -232 [ rbp ] , eax
 add DWORD PTR -228 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -228 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -248 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L15
 mov rax , QWORD PTR -248 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -248 [ rbp ] 
 lea rax , -224 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -224 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xetofklyeote
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 call ccynxwluinnu
 mov eax , 0
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC6 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ccynxwluinnu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ajwknuvsqpod
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call zpvzygkpjavu
 mov eax , 0
 call nyeugcyrmhrg
 mov eax , 0
 leave
 ret
ajwknuvsqpod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
zpvzygkpjavu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -128 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 mov edx , 50
 mov rsi , rcx
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -120 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nyeugcyrmhrg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call fnxvslegfewd
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
fnxvslegfewd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC3 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L7
.L10 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L8
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L9
.L8 : 
 add DWORD PTR -28 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L10
.L9 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qnrihtwqgbqb
 mov eax , 0
 call qizkibzunqoq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 leave
 ret
qnrihtwqgbqb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , -84 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 4
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -80 [ rbp ] , eax
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 sal eax , 3
 sub edx , eax
 mov DWORD PTR -80 [ rbp ] , edx
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -2004318071
 shr rdx , 32
 add edx , eax
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -76 [ rbp ] , edx
 mov edx , DWORD PTR -76 [ rbp ] 
 imul edx , edx , 30
 sub eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 3
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -72 [ rbp ] , eax
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 sal eax , 2
 sub edx , eax
 mov DWORD PTR -72 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -76 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 add eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 sub eax , DWORD PTR -76 [ rbp ] 
 sub eax , DWORD PTR -72 [ rbp ] 
 mov DWORD PTR -64 [ rbp ] , eax
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -72 [ rbp ] 
 mov DWORD PTR -60 [ rbp ] , eax
 mov rdx , QWORD PTR -56 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qizkibzunqoq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hzlvjfetptto
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call npkandihbzew
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 leave
 ret
hzlvjfetptto : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
npkandihbzew : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov BYTE PTR -13 [ rbp ] , al
 lea rax , .LC4 [ rip ] 
 mov BYTE PTR -12 [ rbp ] , al
 lea rax , .LC5 [ rip ] 
 mov BYTE PTR -11 [ rbp ] , al
 mov rdx , QWORD PTR -24 [ rbp ] 
 lea rax , -13 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC10 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call yggjeznqrxnr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dzrsamlwvqns
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dzrsamlwvqns : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov eax , DWORD PTR -4 [ rbp ] 
 and eax , 3
 test eax , eax
 jne .L9
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 5
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 100
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L10
 mov edx , DWORD PTR -4 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1374389535
 shr rax , 32
 sar eax , 7
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 imul ecx , eax , 400
 mov eax , edx
 sub eax , ecx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L11 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L10 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L12
.L9 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 mov eax , 0
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oxeggdeaemmh
 mov eax , 0
 call ytzrdzzbhhhn
 mov eax , 0
 call kdpaygjnvazy
 mov eax , 0
 leave
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
ytzrdzzbhhhn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call ugfnfnzigsrf
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call maulgtdtqheo
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L6 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
maulgtdtqheo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov DWORD PTR -68 [ rbp ] , edi
 mov QWORD PTR -80 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L11
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vrkfupldzmmi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uiwjurnzzcev
 mov eax , 0
 call bjsoljbxvyai
 mov eax , 0
 leave
 ret
vrkfupldzmmi : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
.L4 : 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , [ rbx+rax ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 cdqe
 add rax , rdx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
uiwjurnzzcev : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov ecx , DWORD PTR -52 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -52 [ rbp ] 
 mov ecx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
bjsoljbxvyai : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 144
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129584
 mov edx , 543649385
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , 0
 mov QWORD PTR -88 [ rbp ] , 0
 mov QWORD PTR -80 [ rbp ] , 0
 mov QWORD PTR -72 [ rbp ] , 0
 mov QWORD PTR -64 [ rbp ] , 0
 mov QWORD PTR -56 [ rbp ] , 0
 mov QWORD PTR -48 [ rbp ] , 0
 mov QWORD PTR -40 [ rbp ] , 0
 mov QWORD PTR -32 [ rbp ] , 0
 mov QWORD PTR -24 [ rbp ] , 0
 mov DWORD PTR -16 [ rbp ] , 0
 movabs rax , 8030874123936756585
 mov QWORD PTR -123 [ rbp ] , rax
 mov WORD PTR -115 [ rbp ] , 25965
 mov BYTE PTR -113 [ rbp ] , 0
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L15
.L16 : 
 add DWORD PTR -132 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -112 [ rbp+rax ] 
 test al , al
 jne .L16
 mov DWORD PTR -128 [ rbp ] , 0
 jmp .L17
.L18 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx edx , BYTE PTR -123 [ rbp+rax ] 
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , dl
 add DWORD PTR -128 [ rbp ] , 1
 add DWORD PTR -132 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -128 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -123 [ rbp+rax ] 
 test al , al
 jne .L18
 mov eax , DWORD PTR -132 [ rbp ] 
 cdqe
 mov BYTE PTR -112 [ rbp+rax ] , 0
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 call ahwkexxedycz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L9
.L10 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L9 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L10
 nop
 nop
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L15
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L16
.L15 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L16 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ytzrdzzbhhhn
 mov eax , 0
 call kalfckmrnucv
 mov eax , 0
 call tapaqftbrqhr
 mov eax , 0
 leave
 ret
ytzrdzzbhhhn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L8
.L9 : 
 lea rax , .LC13 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC14 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oxeggdeaemmh
 mov eax , 0
 call pxltobqakjeu
 mov eax , 0
 call wauqsypwducv
 mov eax , 0
 leave
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L9
.L12 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L10
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L11
.L10 : 
 add DWORD PTR -28 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L12
.L11 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
wauqsypwducv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 15
 mov rdi , rax
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -32 [ rbp ] 
 lea rax , -46 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -46 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call hunrlixhxuqe
 mov eax , 0
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC4 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call oblihoqfkqvy
 mov eax , 0
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L6
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L6 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call oubyowhiekru
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov eax , 0
 call tznkfgdbxmag
 mov eax , 0
 leave
 ret
 .align 8
oubyowhiekru : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L5
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
tznkfgdbxmag : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -56 [ rbp ] , 2
 mov edx , DWORD PTR -52 [ rbp ] 
 mov eax , DWORD PTR -48 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -56 [ rbp ] 
 add eax , edx
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 imul eax , DWORD PTR -48 [ rbp ] 
 mov edx , DWORD PTR -56 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -40 [ rbp ] , eax
 mov eax , DWORD PTR -48 [ rbp ] 
 cdq
 idiv DWORD PTR -56 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -52 [ rbp ] 
 add eax , edx
 mov DWORD PTR -36 [ rbp ] , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call ratujvviahox
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC10 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC11 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call hrvcejglwvwz
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 call nxbhnpcfplks
 mov eax , 0
 leave
 ret
hrvcejglwvwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
nxbhnpcfplks : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -44 [ rbp ] , 120
 mov BYTE PTR -34 [ rbp ] , 120
 mov BYTE PTR -22 [ rbp ] , 120
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call yggjeznqrxnr
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC5 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bzvmzslneagm
 mov eax , 0
 call ediyavermwpa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nhuwvnktrfhj
 mov eax , 0
 leave
 ret
bzvmzslneagm : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -108 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -144 [ rbp ] , rdx
 mov QWORD PTR -136 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L13
.L4 : 
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
.L13 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L15
.L16 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L15 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L16
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
nhuwvnktrfhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 304
 mov DWORD PTR -292 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -292 [ rbp ] 
 cdqe
 mov rdi , rax
 call malloc @ PLT
 mov QWORD PTR -280 [ rbp ] , rax
 mov esi , 8
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -272 [ rbp ] , 65
 mov BYTE PTR -271 [ rbp ] , 66
 mov BYTE PTR -270 [ rbp ] , 67
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -272 [ rbp ] 
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call frvafgivatvw
 mov eax , 0
 call zhthpxtaxnoc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mlwhovnblrse
 mov eax , 0
 leave
 ret
frvafgivatvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
zhthpxtaxnoc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
mlwhovnblrse : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 lea rcx , [ rax+rdx ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdokiymitgtu
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
xdokiymitgtu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L20
.L21 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L20 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L21
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call ytrwssegkbaq
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L16
.L12 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L16 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L19 : 
 cmp rsp , rdx
 je .L20
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L19
.L20 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L21
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L21 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L22
.L24 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L23
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L23 : 
 add DWORD PTR -100 [ rbp ] , 1
.L22 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L24
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L25
 call __stack_chk_fail @ PLT
.L25 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call zhthpxtaxnoc
 mov eax , 0
 call unnplphejkbb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tzvjbtvkejes
 mov eax , 0
 leave
 ret
zhthpxtaxnoc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
unnplphejkbb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC5 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
tzvjbtvkejes : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -100 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -100 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 cmp DWORD PTR -92 [ rbp ] , 99
 jle .L11
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L12
.L11 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L12 : 
 mov eax , DWORD PTR -92 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call zyyshkqdgbgs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lyulcezkytfy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ftxsahsrawrv
 mov eax , 0
 leave
 ret
zyyshkqdgbgs : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
lyulcezkytfy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ftxsahsrawrv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call eihjswapsybh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call zdiflzqcaorf
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
zdiflzqcaorf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pnxgivxtjwdh
 mov eax , 0
 call rwunkmogttly
 mov eax , 0
 call tapaqftbrqhr
 mov eax , 0
 leave
 ret
 .align 8
pnxgivxtjwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 4
 mov eax , DWORD PTR -84 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -76 [ rbp ] , eax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
tapaqftbrqhr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L14
.L15 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L15
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 call eklheveznbgh
 mov eax , 0
 call efqtiriukyfe
 mov eax , 0
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
efqtiriukyfe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7885065666585129552
 movabs rdx , 7359008686475800169
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov WORD PTR -16 [ rbp ] , 28277
 mov BYTE PTR -14 [ rbp ] , 0
 mov DWORD PTR -36 [ rbp ] , 0
 jmp .L8
.L9 : 
 add DWORD PTR -36 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -36 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -32 [ rbp+rax ] 
 test al , al
 jne .L9
 mov eax , DWORD PTR -36 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call feskijsrrgxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 call mlxkhxhtntmv
 mov eax , 0
 leave
 ret
feskijsrrgxh : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -44 [ rbp ] , 64
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov r8 , rax
 mov r9d , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov rsi , rax
 mov edi , 0
 mov eax , DWORD PTR -44 [ rbp ] 
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -44 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
mlxkhxhtntmv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -48 [ rbp ] 
 add rax , rdx
 movabs rsi , 2334392307038315863
 movabs rdi , 8079569230801956724
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 2318348173487599474
 mov QWORD PTR 16 [ rax ] , rcx
 mov BYTE PTR 24 [ rax ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tguldezdfcwl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov eax , 0
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L15
.L9 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 call yggjeznqrxnr
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L11
.L12 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L12
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xpenjovrtczl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhkhcuurjmt
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 leave
 ret
xpenjovrtczl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7863333806460921160
 movabs rdx , 495753047666
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -48 [ rbp ] 
 add rax , 20
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
gvhkhcuurjmt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L7
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 call yggjeznqrxnr
 mov eax , 0
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
yggjeznqrxnr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qqqbuaxeonwf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlwstubxloqr
 mov eax , 0
 call cisrwjzhexat
 mov eax , 0
 leave
 ret
qqqbuaxeonwf : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
qlwstubxloqr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L5
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L6
 mov edi , 10
 call putchar @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call gafcdwelorst
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L13
.L9 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L13 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L16
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L19
.L16 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L19 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dowuvarprjhl
 mov eax , 0
 call zyyshkqdgbgs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov eax , 0
 leave
 ret
dowuvarprjhl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L5
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
zyyshkqdgbgs : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -112 [ rbp ] , 4
 mov DWORD PTR -108 [ rbp ] , -5
 mov DWORD PTR -104 [ rbp ] , 2
 mov edx , DWORD PTR -112 [ rbp ] 
 mov eax , DWORD PTR -108 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 add eax , edx
 mov DWORD PTR -100 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 sub eax , DWORD PTR -108 [ rbp ] 
 sub eax , DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -96 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 cdq
 idiv DWORD PTR -108 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -104 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 mov eax , DWORD PTR -112 [ rbp ] 
 imul eax , DWORD PTR -108 [ rbp ] 
 cdq
 idiv DWORD PTR -104 [ rbp ] 
 mov DWORD PTR -88 [ rbp ] , eax
 mov DWORD PTR -84 [ rbp ] , 35
 mov esi , DWORD PTR -88 [ rbp ] 
 mov ecx , DWORD PTR -92 [ rbp ] 
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -100 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov ecx , DWORD PTR -84 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 mov BYTE PTR -57 [ rbp ] , al
 lea rax , -57 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call auzozyljimuk
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
auzozyljimuk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L7
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov eax , 0
 call cisrwjzhexat
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bhmoayxwvyqw
 mov eax , 0
 leave
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
cisrwjzhexat : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
bhmoayxwvyqw : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 312
 mov QWORD PTR -312 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -292 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -292 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -292 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov edi , 10
 call putchar @ PLT
 mov rax , QWORD PTR -312 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -312 [ rbp ] 
 lea rax , -288 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 call oblihoqfkqvy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov eax , 0
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
oblihoqfkqvy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wrziecznhrgd
 mov eax , 0
 call lzhuvpopmudj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 leave
 ret
wrziecznhrgd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -18 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
lzhuvpopmudj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L6
.L9 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L7 : 
 add DWORD PTR -16 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L8
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L9
.L8 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC9 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC10 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC11 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 call vhmtfiqscpwh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdokiymitgtu
 mov eax , 0
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
vhmtfiqscpwh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L11 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L7
.L8 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L8
 jmp .L9
.L10 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L10
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
xdokiymitgtu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L17
.L18 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L17 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L18
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ijfhuvyfujdf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhkhcuurjmt
 mov eax , 0
 call ksllarmyttxu
 mov eax , 0
 leave
 ret
ijfhuvyfujdf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L4
.L5 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L4 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L5
 nop
 nop
 leave
 ret
gvhkhcuurjmt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ksllarmyttxu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L10
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L10
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
.L10 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call wdqgfcrzbsiz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov eax , 0
 leave
 ret
wdqgfcrzbsiz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L15
.L16 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L15 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L16
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L19
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L21
.L19 : 
 mov eax , 0
.L21 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 call ccynxwluinnu
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L5
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L6
.L5 : 
 add DWORD PTR -28 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L7
.L6 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ccynxwluinnu : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xcbaqluvlilg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 call chwthkpswpff
 mov eax , 0
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call hlblkqnmxmod
 mov eax , 0
 call tvgnkflsmeqd
 mov eax , 0
 call xpenjovrtczl
 mov eax , 0
 leave
 ret
hlblkqnmxmod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L12 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
xpenjovrtczl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7863333806460921160
 movabs rdx , 495753047666
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -72 [ rbp ] , rdx
 mov DWORD PTR -64 [ rbp ] , 0
 lea rdx , -80 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -48 [ rbp ] 
 add rax , 20
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call akuyhosvenqa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call usugbmdolvxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lyulcezkytfy
 mov eax , 0
 leave
 ret
akuyhosvenqa : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -117 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -116 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -115 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -117 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -117 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
usugbmdolvxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
lyulcezkytfy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gafcdwelorst
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov eax , 0
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L6
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 call maqnfazfvjvg
 mov eax , 0
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC0 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
maqnfazfvjvg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L8
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L8 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dhpxpgjtbhtc
 mov eax , 0
 call qlpaezcmkarp
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 leave
 ret
dhpxpgjtbhtc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
qlpaezcmkarp : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gzwfqggxadbq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ctrvvluihuhf
 mov eax , 0
 call bulpyqkklfvg
 mov eax , 0
 leave
 ret
gzwfqggxadbq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ctrvvluihuhf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L15 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L14
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L15
.L14 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L16
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L17
.L16 : 
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L17 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call ytrwssegkbaq
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L6 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L6
.L5 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call jxadjpjhjhjk
 mov eax , 0
 call eihjswapsybh
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 leave
 ret
jxadjpjhjhjk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
eihjswapsybh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call goaztayvxlif
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cnixrukgtgzd
 mov eax , 0
 call frvafgivatvw
 mov eax , 0
 leave
 ret
 .align 8
goaztayvxlif : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 sub eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
cnixrukgtgzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
frvafgivatvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L16
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L17
.L16 : 
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lczjvypofmvf
 mov eax , 0
 call pacnceapbiua
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov eax , 0
 leave
 ret
 .align 8
lczjvypofmvf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
pacnceapbiua : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -116 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -116 [ rbp ] 
 lea rdx , -112 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L12
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 call dbyrevqalfqh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ntwkddqmcyuo
 mov eax , 0
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
dbyrevqalfqh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -12 [ rbp ] , 1
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 imul eax , DWORD PTR -12 [ rbp ] 
 mov ecx , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov edx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L9 : 
 cmp DWORD PTR -12 [ rbp ] , 10
 jle .L10
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ntwkddqmcyuo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov eax , 0
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L10
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L11
.L10 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L11 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call hxzcnysforjc
 mov eax , 0
 call vjzunlqqzsyj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov eax , 0
 leave
 ret
hxzcnysforjc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
vjzunlqqzsyj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L7
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L7 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 call sbnxmdkkwhpq
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call gjsjqqfdmjni
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call ovcghseqlwsc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cbibyvccnwpj
 mov eax , 0
 leave
 ret
gjsjqqfdmjni : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ovcghseqlwsc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -48 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cbibyvccnwpj : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L18 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L17
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L18
.L17 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L19 : 
 cmp rsp , rdx
 je .L20
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L19
.L20 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L21
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L21 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdevzikixvga
 mov eax , 0
 call ycumhbjkobjs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov eax , 0
 leave
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L5
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ycumhbjkobjs : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L19
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L20
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L22
.L20 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L22
.L19 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L21
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L22
.L21 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L22 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L24 : 
 cmp rsp , rdx
 je .L25
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L24
.L25 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L26
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L26 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L27
 call __stack_chk_fail @ PLT
.L27 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call frgtdmoaiiin
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 call fvszvmuqfdjj
 mov eax , 0
 leave
 ret
frgtdmoaiiin : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -64 [ rbp ] 
 add rax , rdx
 movabs rcx , 8245282155717748040
 mov QWORD PTR [ rax ] , rcx
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
fvszvmuqfdjj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlwstubxloqr
 mov eax , 0
 call agfrdqbfvanm
 mov eax , 0
 call ejvyabvcuyde
 mov eax , 0
 leave
 ret
qlwstubxloqr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
agfrdqbfvanm : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call unxnlghcwaen
 mov eax , 0
 call lmhhgfjvthli
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 leave
 ret
unxnlghcwaen : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L10
.L13 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L11 : 
 add DWORD PTR -16 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L12
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L13
.L12 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L16
.L17 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L16 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L17
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ypnxxakoaims
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call cmdmolbpalfx
 mov eax , 0
 call vawlugafkosd
 mov eax , 0
 leave
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
cmdmolbpalfx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov DWORD PTR -132 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 cmp DWORD PTR -132 [ rbp ] , 10
 jle .L6
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 jmp .L7
.L6 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
.L7 : 
 cmp DWORD PTR -132 [ rbp ] , 49
 jg .L8
 mov DWORD PTR -132 [ rbp ] , 50
.L8 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L10
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L11
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qdgzeikacpgo
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 leave
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC4 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC5 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC6 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call kwjypsxtjxpr
 mov eax , 0
 call eselciymzxdd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov eax , 0
 leave
 ret
kwjypsxtjxpr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L4
.L6 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 49
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L5
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -132 [ rbp ] , 1
.L4 : 
 cmp DWORD PTR -132 [ rbp ] , 2
 jle .L6
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
eselciymzxdd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L18
.L19 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L18 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L19
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call jsczuwnqybnx
 mov eax , 0
 call efelwzeculzn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call arpdayuwutjh
 mov eax , 0
 leave
 ret
jsczuwnqybnx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov DWORD PTR -100 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -75 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -74 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -70 [ rbp ] , al
 mov ecx , DWORD PTR -100 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -96 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 movsx rax , ecx
 mov rdx , rax
 mov esi , 50
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -100 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 lea rcx , .LC4 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
efelwzeculzn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
arpdayuwutjh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L19
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L17
.L19 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 call qrojfamadtkc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L4
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L5
.L4 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L6
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L11
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L13
.L11 : 
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L13 : 
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call adxolhkjnkqh
 mov eax , 0
 call oxeggdeaemmh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call qnscfknqmrmd
 mov eax , 0
 leave
 ret
adxolhkjnkqh : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rcx , [ rbx+rax ] 
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -80 [ rbp ] , rax
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rcx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov edx , 16
 mov rsi , rcx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
oxeggdeaemmh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qnscfknqmrmd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L17
.L19 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L18
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 add DWORD PTR -100 [ rbp ] , 1
.L17 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L19
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC8 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ftcpcqtptiid
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pwsvhyxpeqcx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 leave
 ret
ftcpcqtptiid : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 184
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -192 [ rbp ] 
 lea rax , -128 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 lea rax , -192 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -128 [ rbp ] 
 add rax , rdx
 mov rdx , rbx
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
pwsvhyxpeqcx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movabs rsi , 8245282155717748040
 mov QWORD PTR [ rax ] , rsi
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qrojfamadtkc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L9
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L15
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L16
.L15 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L16 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call bzvmzslneagm
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tisjysstguln
 mov eax , 0
 call pvtkmghmizwz
 mov eax , 0
 leave
 ret
bzvmzslneagm : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov DWORD PTR -108 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -108 [ rbp ] , eax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -128 [ rbp ] , rdx
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rdx , eax
 mov QWORD PTR -144 [ rbp ] , rdx
 mov QWORD PTR -136 [ rbp ] , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L13
.L4 : 
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -108 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
.L13 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
tisjysstguln : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -68 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
pvtkmghmizwz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC5 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 call azlvpnldpdww
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 leave
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L14
.L15 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L14 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L15
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 call gafcdwelorst
 mov eax , 0
 call fdevzikixvga
 mov eax , 0
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L6
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L6 : 
 nop
 leave
 ret
gafcdwelorst : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC3 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
fdevzikixvga : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -13 [ rbp ] , 1280066888
 mov BYTE PTR -9 [ rbp ] , 79
 lea rax , -13 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov edx , 4
 sub rdx , rax
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov eax , 5
 sub rax , rdx
 movzx edx , BYTE PTR -13 [ rbp+rax ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov BYTE PTR -13 [ rbp+rax ] , dl
 add DWORD PTR -20 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 1
 jbe .L11
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call mrngwpdxgpep
 mov eax , 0
 call pxltobqakjeu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call omgntkvpmgjk
 mov eax , 0
 leave
 ret
mrngwpdxgpep : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov DWORD PTR -12 [ rbp ] , esi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
pxltobqakjeu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L5
.L8 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L6
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L7
.L6 : 
 add DWORD PTR -28 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L8
.L7 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
omgntkvpmgjk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov edi , 10
 call malloc @ PLT
 mov QWORD PTR -8 [ rbp ] , rax
 mov rdx , QWORD PTR -24 [ rbp ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call free @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 call ejvyabvcuyde
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qoujnqbeqbxh
 mov eax , 0
 leave
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L4
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L10
.L4 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L10 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ejvyabvcuyde : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qoujnqbeqbxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -92 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -88 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -88 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -84 [ rbp ] , edx
 mov edx , DWORD PTR -84 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -80 [ rbp ] , edx
 mov edx , DWORD PTR -80 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 add eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 sub eax , DWORD PTR -84 [ rbp ] 
 sub eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -72 [ rbp ] , eax
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -68 [ rbp ] , eax
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call mlkaqullpnnw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call fnsglnrtdszg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wjapwoqpxqcv
 mov eax , 0
 leave
 ret
 .align 8
mlkaqullpnnw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -20 [ rbp ] 
 movsd xmm1 , QWORD PTR .LC0 [ rip ] 
 divsd xmm0 , xmm1
 cvtsd2ss xmm0 , xmm0
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm0 , xmm0
 cvtss2sd xmm0 , DWORD PTR -4 [ rbp ] 
 pxor xmm2 , xmm2
 cvtss2sd xmm2 , DWORD PTR -20 [ rbp ] 
 movq rax , xmm2
 movapd xmm1 , xmm0
 movq xmm0 , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 2
 call printf @ PLT
 nop
 leave
 ret
fnsglnrtdszg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
wjapwoqpxqcv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call rfujycbtsdvc
 mov eax , 0
 call hunrlixhxuqe
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
rfujycbtsdvc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L7 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L7
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
hunrlixhxuqe : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 call uajnbevmgmpn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov eax , 0
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC1 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
uajnbevmgmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 2104
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -2132 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -2132 [ rbp ] 
 cmp eax , 10
 jle .L9
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -2112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -2112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L9 : 
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -2132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -2128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -2120 [ rbp ] , rax
 mov rax , QWORD PTR -2120 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -2120 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
.L15 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L17 : 
 cmp rsp , rdx
 je .L18
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L17
.L18 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L19
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L19 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L20
.L21 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L20 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L21
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC13 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call gvhhflbcyapy
 mov eax , 0
 call bulpyqkklfvg
 mov eax , 0
 call yaewxkwxmrqk
 mov eax , 0
 leave
 ret
gvhhflbcyapy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
bulpyqkklfvg : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -80 [ rbp ] , eax
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 cmp eax , 9
 jg .L13
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , DWORD PTR -80 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 jmp .L14
.L13 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov edx , DWORD PTR -80 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -76 [ rbp ] , eax
.L14 : 
 mov eax , DWORD PTR -80 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
yaewxkwxmrqk : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC8 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC9 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L20 : 
 cmp rsp , rdx
 je .L21
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L20
.L21 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L22
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L22 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L23
 call __stack_chk_fail @ PLT
.L23 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 call ashssblaeigs
 mov eax , 0
 leave
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L4
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L5
.L4 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L6
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L6
.L5 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L6 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ashssblaeigs : 
 endbr64
 push rbp
 mov rbp , rsp
 mov rax , QWORD PTR .LC5 [ rip ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call uwbuxsnkkwdh
 mov eax , 0
 call gzphakxspyuf
 mov eax , 0
 call ybnzqaimubdo
 mov eax , 0
 leave
 ret
uwbuxsnkkwdh : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .align 8
gzphakxspyuf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd QWORD PTR -16 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd QWORD PTR -32 [ rbp ] , xmm0
 movsd xmm0 , QWORD PTR -16 [ rbp ] 
 movsd QWORD PTR -24 [ rbp ] , xmm0
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
 .align 8
 .align 8
ybnzqaimubdo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -72 [ rbp ] , 0
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -64 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -96 [ rbp ] , rdx
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -56 [ rbp ] , rax
 nop
.L11 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L10
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L11
.L10 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov rdx , QWORD PTR -56 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR [ rdx+rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L13
 mov edi , 10
 call putchar @ PLT
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 5
 jbe .L14
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L15
.L14 : 
 mov rax , QWORD PTR -56 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -56 [ rbp ] 
 lea rax , -45 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -45 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L15 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call msayoeistmjf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptosuvlmykym
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 leave
 ret
msayoeistmjf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ptosuvlmykym : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov ecx , DWORD PTR -60 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -56 [ rbp ] , rax
 movsx rax , ecx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov eax , DWORD PTR -60 [ rbp ] 
 imul eax , eax
 mov ecx , eax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L19
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L20
.L19 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L20 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 call frvpjawivwgo
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L6
.L9 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L7
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L8
.L7 : 
 add DWORD PTR -28 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L9
.L8 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
frvpjawivwgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rcx , -20 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , edx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -20 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , DWORD PTR -12 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call odthtcwrcfcb
 mov eax , 0
 call hrsdwcjqkudo
 mov eax , 0
 call zhthpxtaxnoc
 mov eax , 0
 leave
 ret
odthtcwrcfcb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -22 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -22 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hrsdwcjqkudo : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
zhthpxtaxnoc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlwstubxloqr
 mov eax , 0
 call hccipipvawmb
 mov eax , 0
 call bfojvsbuecxe
 mov eax , 0
 leave
 ret
qlwstubxloqr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
hccipipvawmb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 312
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -340 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 255
 jg .L8
 mov DWORD PTR -340 [ rbp ] , 256
.L8 : 
 mov eax , DWORD PTR -340 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -336 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -328 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -340 [ rbp ] , eax
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -340 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -320 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -320 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -320 [ rbp ] 
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -328 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
bfojvsbuecxe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -17 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 97
 je .L16
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 101
 je .L16
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 105
 je .L16
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 111
 je .L16
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 117
 jne .L17
.L16 : 
 mov eax , 1
 jmp .L18
.L17 : 
 mov eax , 0
.L18 : 
 mov DWORD PTR -16 [ rbp ] , eax
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 65
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 69
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 73
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 79
 je .L19
 movzx eax , BYTE PTR -17 [ rbp ] 
 cmp al , 85
 jne .L20
.L19 : 
 mov eax , 1
 jmp .L21
.L20 : 
 mov eax , 0
.L21 : 
 mov DWORD PTR -12 [ rbp ] , eax
 cmp DWORD PTR -16 [ rbp ] , 0
 jne .L22
 cmp DWORD PTR -12 [ rbp ] , 0
 je .L23
.L22 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L24
.L23 : 
 movzx eax , BYTE PTR -17 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L24 : 
 nop
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L25
 call __stack_chk_fail @ PLT
.L25 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lrruvprggpwu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 call kcgpwajdjhtx
 mov eax , 0
 leave
 ret
 .align 8
lrruvprggpwu : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L4
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
kcgpwajdjhtx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call dqolmbfqphap
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov eax , 0
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC3 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call iwauxxfxdndt
 mov eax , 0
 call mzxiycohslhk
 mov eax , 0
 call vawlugafkosd
 mov eax , 0
 leave
 ret
iwauxxfxdndt : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
mzxiycohslhk : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rcx , -16 [ rbp ] 
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -24 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L17
 movsd xmm0 , QWORD PTR -32 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L18
 mov rax , QWORD PTR -32 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L20
.L18 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L20
.L17 : 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 movsd xmm1 , QWORD PTR -16 [ rbp ] 
 comisd xmm0 , xmm1
 jb .L19
 mov rax , QWORD PTR -24 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 jmp .L20
.L19 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
.L20 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call ovescreaddon
 mov eax , 0
 call chwthkpswpff
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ovescreaddon : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov DWORD PTR -116 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -96 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -88 [ rbp ] , rax
 mov DWORD PTR -100 [ rbp ] , 0
 jmp .L7
.L9 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L8
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 add DWORD PTR -100 [ rbp ] , 1
.L7 : 
 cmp DWORD PTR -100 [ rbp ] , 3
 jle .L9
 mov eax , DWORD PTR -116 [ rbp ] 
 movsx rdx , eax
 lea rcx , -80 [ rbp ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
chwthkpswpff : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -36 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -32 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -32 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -28 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -28 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -24 [ rbp ] , eax
 mov ecx , DWORD PTR -24 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -24 [ rbp ] , edx
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L17
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L18 : 
 cmp rsp , rdx
 je .L19
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L18
.L19 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L20
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L20 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L21
.L17 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L21 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L22
 call __stack_chk_fail @ PLT
.L22 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qpyixmxfapaz
 mov eax , 0
 call vtebtqzyupir
 mov eax , 0
 call imgbghflolaf
 mov eax , 0
 leave
 ret
qpyixmxfapaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 mov rdx , QWORD PTR -72 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -64 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
vtebtqzyupir : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L6
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L11
.L6 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L8
.L9 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L8 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L13
.L14 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L14
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call ytrwssegkbaq
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov eax , 0
 call jamjufztgkya
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L16
.L12 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L16 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
jamjufztgkya : 
 endbr64
 push rbp
 mov rbp , rsp
 mov DWORD PTR -4 [ rbp ] , 4
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call skbqlucjwyob
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call oaxoirzmdobf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov eax , 0
 leave
 ret
skbqlucjwyob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
oaxoirzmdobf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 119
 ja .L9
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L11
.L9 : 
 mov eax , 0
.L11 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qwumzdsvanfg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ibkpyydlgimp
 mov eax , 0
 call tmrojhkarojb
 mov eax , 0
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ibkpyydlgimp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tmrojhkarojb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L11
.L12 : 
 mov eax , DWORD PTR -16 [ rbp ] 
 add DWORD PTR -12 [ rbp ] , eax
 add DWORD PTR -16 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L12
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlwstubxloqr
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call arpdayuwutjh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qitjlbmnliwr
 mov eax , 0
 leave
 ret
qlwstubxloqr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 lea rax , -64 [ rbp ] 
 lea rcx , .LC1 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
arpdayuwutjh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , DWORD PTR -20 [ rbp ] 
 mov ecx , eax
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L9 : 
 call getchar @ PLT
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , -1
 jne .L9
.L11 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
qitjlbmnliwr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L13
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L14
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call nqmosrsophxy
 mov eax , 0
 call qekjcxmkxvgo
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 leave
 ret
nqmosrsophxy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L6 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L5 : 
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L6
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
qekjcxmkxvgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L11
.L12 : 
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L12
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tvgnkflsmeqd
 mov eax , 0
 call ijfhuvyfujdf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call czuimwoyoujn
 mov eax , 0
 leave
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
ijfhuvyfujdf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L9
.L10 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L9 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L10
 nop
 nop
 leave
 ret
czuimwoyoujn : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -48 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -48 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call qrojfamadtkc
 mov eax , 0
 call qdgzeikacpgo
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
qdgzeikacpgo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L12
.L14 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 and eax , 1
 test eax , eax
 je .L13
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L13 : 
 add DWORD PTR -20 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 cmp rdx , rax
 jl .L14
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xhlaxqaxdtgg
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atjofgjojwgd
 mov eax , 0
 call kwjypsxtjxpr
 mov eax , 0
 leave
 ret
xhlaxqaxdtgg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -12 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L4
.L9 : 
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L5
.L6 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -16 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 sub eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L6
 jmp .L7
.L8 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -12 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 add eax , eax
 sub eax , 1
 cmp DWORD PTR -12 [ rbp ] , eax
 jne .L8
 mov edi , 10
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
 mov DWORD PTR -12 [ rbp ] , 0
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
atjofgjojwgd : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
kwjypsxtjxpr : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -132 [ rbp ] , 0
 jmp .L17
.L19 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 49
 mov rdi , rax
 call fgets @ PLT
 test rax , rax
 je .L18
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 add DWORD PTR -132 [ rbp ] , 1
.L17 : 
 cmp DWORD PTR -132 [ rbp ] , 2
 jle .L19
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L20 : 
 cmp rsp , rdx
 je .L21
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L20
.L21 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L22
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L22 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L23
 call __stack_chk_fail @ PLT
.L23 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call pasnlqfyllro
 mov eax , 0
 call phhoqwnyhwci
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 leave
 ret
pasnlqfyllro : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC2 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
phhoqwnyhwci : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -16 [ rbp ] , 0
 mov DWORD PTR -12 [ rbp ] , 0
 jmp .L6
.L9 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -20 [ rbp ] 
 add DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 add DWORD PTR -12 [ rbp ] , 1
.L6 : 
 cmp DWORD PTR -12 [ rbp ] , 4
 jle .L9
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L12
.L13 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L13
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call dxadkdzkhpsj
 mov eax , 0
 call kalfckmrnucv
 mov eax , 0
 call porcuauvtqpr
 mov eax , 0
 leave
 ret
dxadkdzkhpsj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L7
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L8
.L7 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L8 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
porcuauvtqpr : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 120
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -120 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -64 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 lea rax , -112 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call strncpy @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call qfvuwpnppjhy
 mov eax , 0
 call ztzaowjbnoed
 mov eax , 0
 call pqdcitotpbfg
 mov eax , 0
 leave
 ret
qfvuwpnppjhy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ztzaowjbnoed : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 cmp eax , 10
 jle .L6
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L6 : 
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
pqdcitotpbfg : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -122 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -122 [ rbp ] 
 add rax , rdx
 movabs rcx , 8031924123371070824
 mov QWORD PTR [ rax ] , rcx
 mov DWORD PTR 8 [ rax ] , 6581362
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 90
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -122 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 lea rax , -122 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ffjpxyqiqyjo
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 leave
 ret
ffjpxyqiqyjo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L11
.L12 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L11 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L12
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ytrwssegkbaq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call bogtdvjmgthd
 mov eax , 0
 call qwumzdsvanfg
 mov eax , 0
 leave
 ret
ytrwssegkbaq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
bogtdvjmgthd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov esi , edx
 sar esi , 31
 sub eax , esi
 mov ecx , eax
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -4 [ rbp ] , edx
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , edx
 sal eax , 2
 add eax , edx
 add eax , eax
 mov edx , eax
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx , 2
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -20 [ rbp ] , eax
.L9 : 
 cmp DWORD PTR -20 [ rbp ] , 0
 jne .L10
 mov eax , DWORD PTR -8 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
qwumzdsvanfg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ftzdmdtgkmim
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gmxvduowojve
 mov eax , 0
 call kalfckmrnucv
 mov eax , 0
 leave
 ret
ftzdmdtgkmim : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 movabs rax , 2338328219631577172
 movabs rdx , 5989915543374930017
 mov QWORD PTR -64 [ rbp ] , rax
 mov QWORD PTR -56 [ rbp ] , rdx
 mov DWORD PTR -48 [ rbp ] , 1852404340
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -80 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -72 [ rbp ] , rax
 mov DWORD PTR -84 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 mov edx , 1
 mov esi , 65
 mov rdi , rax
 call memset @ PLT
 add DWORD PTR -84 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
gmxvduowojve : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -80 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
kalfckmrnucv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call sbnxmdkkwhpq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ttgczsnkxwax
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
sbnxmdkkwhpq : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -20 [ rbp ] 
 cdq
 idiv ecx
 mov DWORD PTR -12 [ rbp ] , edx
 mov eax , DWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ttgczsnkxwax : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L9
.L10 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 lea rbx , [ rdx+rax ] 
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov edx , DWORD PTR -60 [ rbp ] 
 movsx rdx , edx
 sub rax , rdx
 mov rcx , rax
 movzx edx , BYTE PTR [ rbx ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov BYTE PTR [ rax+rcx ] , dl
 add DWORD PTR -60 [ rbp ] , 1
.L9 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L10
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L16
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L17
.L16 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cnixrukgtgzd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 mov eax , 0
 call ybmqemqhopka
 mov eax , 0
 call unnplphejkbb
 mov eax , 0
 leave
 ret
cnixrukgtgzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ybmqemqhopka : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR -40 [ rbp ] 
 lea rax , -32 [ rbp ] 
 lea rcx , .LC8 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
unnplphejkbb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC11 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC12 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 call eklheveznbgh
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 leave
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
eklheveznbgh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tvgnkflsmeqd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uiwjurnzzcev
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 leave
 ret
tvgnkflsmeqd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
uiwjurnzzcev : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov ecx , DWORD PTR -52 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -40 [ rbp ] , rax
 movsx rax , ecx
 mov r10 , rax
 mov r11d , 0
 movsx rax , ecx
 mov r8 , rax
 mov r9d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -52 [ rbp ] 
 mov ecx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC7 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC8 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC9 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push r12
 push rbx
 sub rsp , 16
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call reifnghvjdtl
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pwsvhyxpeqcx
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 24
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov r12d , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov ebx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , r12d
 mov esi , ebx
 mov edi , eax
 call vtkrdwxiqbsl
 mov eax , 0
 add rsp , 16
 pop rbx
 pop r12
 pop rbp
 ret
reifnghvjdtl : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
pwsvhyxpeqcx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movabs rsi , 8245282155717748040
 mov QWORD PTR [ rax ] , rsi
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vtkrdwxiqbsl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -20 [ rbp ] , edi
 mov DWORD PTR -24 [ rbp ] , esi
 mov DWORD PTR -28 [ rbp ] , edx
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -8 [ rbp ] , eax
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 imul rdx , rdx , 1431655766
 shr rdx , 32
 sar eax , 31
 mov ecx , eax
 mov eax , edx
 sub eax , ecx
 mov DWORD PTR -4 [ rbp ] , eax
 mov esi , DWORD PTR -4 [ rbp ] 
 mov ecx , DWORD PTR -28 [ rbp ] 
 mov edx , DWORD PTR -24 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ulbphpyecccp
 mov eax , 0
 call cspvzrbidecv
 mov eax , 0
 call fdzikgtgutvi
 mov eax , 0
 leave
 ret
ulbphpyecccp : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ebx , DWORD PTR -76 [ rbp ] 
 movsx rax , ebx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ebx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rax , ebx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 movsx rax , ebx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ebx
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -144 [ rbp ] , rax
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
cspvzrbidecv : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 96
 jle .L14
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 122
 jle .L15
.L14 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 64
 jle .L16
 movzx eax , BYTE PTR -9 [ rbp ] 
 cmp al , 90
 jg .L16
.L15 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L17
.L16 : 
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
fdzikgtgutvi : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -9 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx edx , al
 movzx eax , BYTE PTR -9 [ rbp ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L21
 call __stack_chk_fail @ PLT
.L21 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call otktbdpwohxx
 mov eax , 0
 call fanqrfjqffpe
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dngpdrewrcfr
 mov eax , 0
 leave
 ret
otktbdpwohxx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
fanqrfjqffpe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -16 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 cdq
 idiv ecx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
dngpdrewrcfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 288
 mov QWORD PTR -280 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -280 [ rbp ] 
 lea rax , -272 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L7
.L10 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L8
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L8 : 
 add DWORD PTR -16 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L9
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L10
.L9 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L13
.L14 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L13 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L14
 nop
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xetofklyeote
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 call ghvcgcqwziob
 mov eax , 0
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC6 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC7 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC8 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ghvcgcqwziob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ksllarmyttxu
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pwsvhyxpeqcx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call nlljivnwazob
 mov eax , 0
 leave
 ret
ksllarmyttxu : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 cmp DWORD PTR -68 [ rbp ] , 0
 js .L4
 cmp DWORD PTR -68 [ rbp ] , 4
 jg .L4
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
.L4 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
pwsvhyxpeqcx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movabs rsi , 8245282155717748040
 mov QWORD PTR [ rax ] , rsi
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
nlljivnwazob : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L12
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L14
.L12 : 
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L14 : 
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call xcbaqluvlilg
 mov eax , 0
 call qrojfamadtkc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 leave
 ret
xcbaqluvlilg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 176
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 7453010381983019591
 movabs rdx , 7867542457899884659
 mov QWORD PTR -176 [ rbp ] , rax
 mov QWORD PTR -168 [ rbp ] , rdx
 mov DWORD PTR -160 [ rbp ] , 14963
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -144 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rcx , -144 [ rbp ] 
 lea rdx , -176 [ rbp ] 
 lea rax , -96 [ rbp ] 
 lea rsi , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L7
.L8 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L8
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dbmdegrltknb
 mov eax , 0
 call rwunkmogttly
 mov eax , 0
 call kdpaygjnvazy
 mov eax , 0
 leave
 ret
dbmdegrltknb : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 49
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 50
 mov rax , QWORD PTR -80 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 51
 mov rdx , QWORD PTR -80 [ rbp ] 
 lea rax , -66 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
kdpaygjnvazy : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov QWORD PTR -32 [ rbp ] , rax
 mov QWORD PTR -24 [ rbp ] , rdx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov QWORD PTR -16 [ rbp ] , rax
 lea rax , -48 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call rwunkmogttly
 mov eax , 0
 call ypnxxakoaims
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call sadkxrsuawaq
 mov eax , 0
 leave
 ret
rwunkmogttly : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
ypnxxakoaims : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 leave
 ret
sadkxrsuawaq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L14 : 
 cmp rsp , rdx
 je .L15
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L14
.L15 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L16
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L16 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vdpkphetvxfl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov eax , 0
 call ugfnfnzigsrf
 mov eax , 0
 leave
 ret
vdpkphetvxfl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L8 : 
 call getchar @ PLT
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , 10
 je .L7
 mov eax , DWORD PTR -76 [ rbp ] 
 cmp eax , -1
 jne .L8
.L7 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L11
.L12 : 
 add DWORD PTR -8 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L12
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L13
.L14 : 
 add DWORD PTR -4 [ rbp ] , 1
.L13 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L14
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ugfnfnzigsrf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -12 [ rbp ] 
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L17 : 
 call getchar @ PLT
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , 10
 je .L16
 mov eax , DWORD PTR -16 [ rbp ] 
 cmp eax , -1
 jne .L17
.L16 : 
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L19
 call __stack_chk_fail @ PLT
.L19 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call syrddukuvbdy
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xmgmdgvfkhub
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call msayoeistmjf
 mov eax , 0
 leave
 ret
syrddukuvbdy : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -23 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -23 [ rbp ] 
 add rax , 2
 mov QWORD PTR -32 [ rbp ] , rax
 lea rcx , .LC1 [ rip+2 ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov edx , 5
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
xmgmdgvfkhub : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -96 [ rbp ] 
 movabs rsi , 2338328219631577172
 movabs rdi , 7310584039472983923
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rcx , 8026309974033001577
 mov QWORD PTR 16 [ rax ] , rcx
 mov WORD PTR 24 [ rax ] , 109
 lea rdx , -96 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
msayoeistmjf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rcx , rax
 mov rax , rcx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 mov r14 , rcx
 mov r15d , 0
 mov r12 , rcx
 mov r13d , 0
 mov eax , 16
 sub rax , 1
 add rax , rcx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdx , rcx
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 call xetofklyeote
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov eax , 0
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L4
.L7 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L5
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L5 : 
 add DWORD PTR -16 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L7
.L6 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
xetofklyeote : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 40
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -76 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov ecx , DWORD PTR -76 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -72 [ rbp ] , rax
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov r12 , rax
 mov r13d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov edi , 16
 mov edx , 0
 div rdi
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 lea edx , -1 [ rax ] 
 movsx rsi , ecx
 mov rax , QWORD PTR -64 [ rbp ] 
 mov ecx , edx
 lea rdx , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call snprintf @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L18
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L19
.L18 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L19 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bqmryayxitfi
 mov eax , 0
 call ahwkexxedycz
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 leave
 ret
bqmryayxitfi : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L4
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ahwkexxedycz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov BYTE PTR -1 [ rbp ] , 65
 jmp .L9
.L10 : 
 movsx eax , BYTE PTR -1 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 movzx eax , BYTE PTR -1 [ rbp ] 
 add eax , 1
 mov BYTE PTR -1 [ rbp ] , al
.L9 : 
 cmp BYTE PTR -1 [ rbp ] , 90
 jle .L10
 nop
 nop
 leave
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L12
.L15 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L13
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L14
.L13 : 
 add DWORD PTR -28 [ rbp ] , 1
.L12 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L15
.L14 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call njdyjgaulnlv
 mov eax , 0
 call unnplphejkbb
 mov eax , 0
 call ukzfhpapzzcz
 mov eax , 0
 leave
 ret
njdyjgaulnlv : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 312
 mov DWORD PTR -308 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -308 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -304 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -296 [ rbp ] , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -288 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 mov BYTE PTR -288 [ rbp ] , 65
 mov BYTE PTR -287 [ rbp ] , 66
 mov BYTE PTR -286 [ rbp ] , 67
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -288 [ rbp ] 
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
unnplphejkbb : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 imul eax , edx
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC4 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ukzfhpapzzcz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L12 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L11
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L12
.L11 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1074340347
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cnixrukgtgzd
 mov eax , 0
 call oeyozhdsqnhj
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call lyulcezkytfy
 mov eax , 0
 leave
 ret
cnixrukgtgzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
oeyozhdsqnhj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 272
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -272 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
lyulcezkytfy : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 168
 mov QWORD PTR -200 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -165 [ rbp ] 
 mov esi , 5
 mov rdi , rax
 call fgets @ PLT
 lea rax , -165 [ rbp ] 
 mov rdi , rax
 call atoi @ PLT
 mov DWORD PTR -188 [ rbp ] , eax
 mov eax , DWORD PTR -188 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -184 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -176 [ rbp ] , rax
 mov rdx , QWORD PTR -200 [ rbp ] 
 lea rax , -160 [ rbp ] 
 mov r8 , rdx
 mov ecx , 90
 mov edx , 0
 lea rsi , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -160 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qikrcbosuiuq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call vdqqmxeirsbx
 mov eax , 0
 leave
 ret
qikrcbosuiuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
vdqqmxeirsbx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov DWORD PTR -80 [ rbp ] , 10
 mov DWORD PTR -76 [ rbp ] , 10
 mov DWORD PTR -84 [ rbp ] , 0
 lea rax , -84 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -76 [ rbp ] 
 mov eax , DWORD PTR -80 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 nop
.L13 : 
 call getchar @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , 10
 je .L12
 mov eax , DWORD PTR -84 [ rbp ] 
 cmp eax , -1
 jne .L13
.L12 : 
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -84 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -76 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rsp , rbx
 mov rdx , QWORD PTR -56 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call immelsieeekf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call tggzvrlpufvs
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ldxypyxrbwez
 mov eax , 0
 leave
 ret
immelsieeekf : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -68 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
tggzvrlpufvs : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ldxypyxrbwez : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 50
 jbe .L15
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -80 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L18
.L15 : 
 mov rbx , QWORD PTR stdin [ rip ] 
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov ecx , eax
 lea rax , -80 [ rbp ] 
 mov rdx , rbx
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call tguldezdfcwl
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 leave
 ret
tguldezdfcwl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 and eax , 1
 test eax , eax
 jne .L4
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
.L4 : 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L7 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC8 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call npkandihbzew
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call mwuvaunulaca
 mov eax , 0
 call gmevqtnfsdog
 mov eax , 0
 leave
 ret
npkandihbzew : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -13 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -12 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -11 [ rbp ] , al
 mov rdx , QWORD PTR -24 [ rbp ] 
 lea rax , -13 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -13 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
mwuvaunulaca : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -28 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub rax , 1
 cmp rbx , rax
 jbe .L6
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 sub eax , 1
 mov DWORD PTR -28 [ rbp ] , eax
.L6 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx edx , al
 mov eax , DWORD PTR -28 [ rbp ] 
 mov esi , eax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
gmevqtnfsdog : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC9 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC10 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 call wwkfiwtlrikm
 mov eax , 0
 call ewyehunrwfkm
 mov eax , 0
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
wwkfiwtlrikm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 160
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 100
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -160 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -160 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
ewyehunrwfkm : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 96
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -96 [ rbp ] 
 mov esi , 80
 mov rdi , rax
 call fgets @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptosuvlmykym
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call usugbmdolvxh
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pxsnksvbavce
 mov eax , 0
 leave
 ret
ptosuvlmykym : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov DWORD PTR -60 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -60 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -60 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov ecx , DWORD PTR -60 [ rbp ] 
 movsx rax , ecx
 sub rax , 1
 mov QWORD PTR -56 [ rbp ] , rax
 movsx rax , ecx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 movsx rax , ecx
 mov r14 , rax
 mov r15d , 0
 movsx rax , ecx
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ebx , 16
 mov edx , 0
 div rbx
 imul rax , rax , 16
 mov rsi , rax
 and rsi , -4096
 mov rdx , rsp
 sub rdx , rsi
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 movsx rax , ecx
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 mov eax , DWORD PTR -60 [ rbp ] 
 imul eax , eax
 mov ecx , eax
 mov rax , QWORD PTR -48 [ rbp ] 
 mov esi , ecx
 mov rdi , rax
 call fgets @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
usugbmdolvxh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 movss DWORD PTR -4 [ rbp ] , xmm0
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -4 [ rbp ] 
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 leave
 ret
pxsnksvbavce : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 cmp QWORD PTR -88 [ rbp ] , 0
 je .L12
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L13 : 
 cmp rsp , rdx
 je .L14
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L13
.L14 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L15
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L15 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , 83
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 84
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 82
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 3 [ rax ] , 73
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 4 [ rax ] , 78
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 5 [ rax ] , 71
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 6 [ rax ] , 58
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 jmp .L18
.L12 : 
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L18 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dzthxorefqaz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
dzthxorefqaz : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 296
 mov QWORD PTR -296 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -296 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -288 [ rbp ] , rcx
 mov QWORD PTR -280 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -272 [ rbp ] , rcx
 mov QWORD PTR -264 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -256 [ rbp ] , rcx
 mov QWORD PTR -248 [ rbp ] , rbx
 mov rcx , QWORD PTR 48 [ rax ] 
 mov rbx , QWORD PTR 56 [ rax ] 
 mov QWORD PTR -240 [ rbp ] , rcx
 mov QWORD PTR -232 [ rbp ] , rbx
 mov rcx , QWORD PTR 64 [ rax ] 
 mov rbx , QWORD PTR 72 [ rax ] 
 mov QWORD PTR -224 [ rbp ] , rcx
 mov QWORD PTR -216 [ rbp ] , rbx
 mov rcx , QWORD PTR 80 [ rax ] 
 mov rbx , QWORD PTR 88 [ rax ] 
 mov QWORD PTR -208 [ rbp ] , rcx
 mov QWORD PTR -200 [ rbp ] , rbx
 mov rcx , QWORD PTR 96 [ rax ] 
 mov rbx , QWORD PTR 104 [ rax ] 
 mov QWORD PTR -192 [ rbp ] , rcx
 mov QWORD PTR -184 [ rbp ] , rbx
 mov rcx , QWORD PTR 112 [ rax ] 
 mov rbx , QWORD PTR 120 [ rax ] 
 mov QWORD PTR -176 [ rbp ] , rcx
 mov QWORD PTR -168 [ rbp ] , rbx
 mov rcx , QWORD PTR 128 [ rax ] 
 mov rbx , QWORD PTR 136 [ rax ] 
 mov QWORD PTR -160 [ rbp ] , rcx
 mov QWORD PTR -152 [ rbp ] , rbx
 mov rcx , QWORD PTR 144 [ rax ] 
 mov rbx , QWORD PTR 152 [ rax ] 
 mov QWORD PTR -144 [ rbp ] , rcx
 mov QWORD PTR -136 [ rbp ] , rbx
 mov rcx , QWORD PTR 160 [ rax ] 
 mov rbx , QWORD PTR 168 [ rax ] 
 mov QWORD PTR -128 [ rbp ] , rcx
 mov QWORD PTR -120 [ rbp ] , rbx
 mov rcx , QWORD PTR 176 [ rax ] 
 mov rbx , QWORD PTR 184 [ rax ] 
 mov QWORD PTR -112 [ rbp ] , rcx
 mov QWORD PTR -104 [ rbp ] , rbx
 mov rcx , QWORD PTR 192 [ rax ] 
 mov rbx , QWORD PTR 200 [ rax ] 
 mov QWORD PTR -96 [ rbp ] , rcx
 mov QWORD PTR -88 [ rbp ] , rbx
 mov rcx , QWORD PTR 208 [ rax ] 
 mov rbx , QWORD PTR 216 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 224 [ rax ] 
 mov rbx , QWORD PTR 232 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rdx , QWORD PTR 248 [ rax ] 
 mov rax , QWORD PTR 240 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rax
 mov QWORD PTR -40 [ rbp ] , rdx
 lea rax , -288 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dxoohzufojqf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gyrmpgdyumyl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call wmnplttjfjnc
 mov eax , 0
 leave
 ret
dxoohzufojqf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
gyrmpgdyumyl : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov QWORD PTR -24 [ rbp ] , rdi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov DWORD PTR -8 [ rbp ] , 0
 jmp .L5
.L6 : 
 add DWORD PTR -8 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -8 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -24 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L6
 mov DWORD PTR -4 [ rbp ] , 0
 jmp .L7
.L8 : 
 add DWORD PTR -4 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -4 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 test al , al
 jne .L8
 mov edx , DWORD PTR -8 [ rbp ] 
 mov eax , DWORD PTR -4 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
wmnplttjfjnc : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -20 [ rbp ] , 0
 jmp .L10
.L11 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -20 [ rbp ] , 1
.L10 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L11
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xajmzkxxrzyn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call hxzcnysforjc
 mov eax , 0
 call ediyavermwpa
 mov eax , 0
 leave
 ret
xajmzkxxrzyn : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov edx , 40
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -64 [ rbp ] 
 mov edx , 50
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -112 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rax , -112 [ rbp ] 
 add rax , rdx
 movabs rsi , 2338328219631577172
 movabs rdi , 7090169281335873121
 mov QWORD PTR [ rax ] , rsi
 mov QWORD PTR 8 [ rax ] , rdi
 movabs rsi , 7885630523470801235
 movabs rdi , 5269326340202985248
 mov QWORD PTR 16 [ rax ] , rsi
 mov QWORD PTR 24 [ rax ] , rdi
 mov DWORD PTR 32 [ rax ] , 1802071072
 mov WORD PTR 36 [ rax ] , 101
 lea rdx , -112 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -120 [ rbp ] 
 lea rax , -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
hxzcnysforjc : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
ediyavermwpa : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -20 [ rbp ] , 0
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -16 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 jmp .L7
.L8 : 
 mov rcx , QWORD PTR -16 [ rbp ] 
 movabs rdx , 7378697629483820647
 mov rax , rcx
 imul rdx
 mov rax , rdx
 sar rax , 2
 sar rcx , 63
 mov rdx , rcx
 sub rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L7 : 
 mov rax , QWORD PTR -16 [ rbp ] 
 test rax , rax
 jne .L8
 mov eax , DWORD PTR -20 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call pwsvhyxpeqcx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call vrkfupldzmmi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ovmgkdegugmz
 mov eax , 0
 leave
 ret
pwsvhyxpeqcx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , 15
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 add rax , rdx
 movabs rsi , 8245282155717748040
 mov QWORD PTR [ rax ] , rsi
 mov DWORD PTR 8 [ rax ] , 1936531502
 mov WORD PTR 12 [ rax ] , 8250
 mov BYTE PTR 14 [ rax ] , 0
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vrkfupldzmmi : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 96
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add eax , eax
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -84 [ rbp ] , eax
.L9 : 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , [ rbx+rax ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 cdqe
 add rax , rdx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -128 [ rbp ] , rax
 mov QWORD PTR -120 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -80 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
ovmgkdegugmz : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call strdup @ PLT
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L15 : 
 cmp rsp , rdx
 je .L16
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L15
.L16 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L17
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L17 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov eax , 0
 call cbwqtluqmpyh
 mov eax , 0
 call kcgpwajdjhtx
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call qqitceouzmpn
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
cbwqtluqmpyh : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -16 [ rbp ] , 1
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -24 [ rbp ] 
 test eax , eax
 jns .L4
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L9
.L4 : 
 mov DWORD PTR -20 [ rbp ] , 1
 jmp .L6
.L7 : 
 mov eax , DWORD PTR -20 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -16 [ rbp ] 
 imul rax , rdx
 mov QWORD PTR -16 [ rbp ] , rax
 add DWORD PTR -20 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -20 [ rbp ] , eax
 jle .L7
 mov eax , DWORD PTR -24 [ rbp ] 
 mov rdx , QWORD PTR -16 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L9 : 
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
kcgpwajdjhtx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , 4
 mov eax , DWORD PTR -4 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
qqitceouzmpn : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov DWORD PTR -84 [ rbp ] , edi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 movsx rdx , eax
 mov rcx , rdx
 mov ebx , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov eax , DWORD PTR -84 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L15
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -104 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L16 : 
 cmp rsp , rdx
 je .L17
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L16
.L17 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L18
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L18 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 mov rsp , rbx
 jmp .L19
.L15 : 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -96 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L19 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L20
 call __stack_chk_fail @ PLT
.L20 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ptyfgaleruuq
 mov eax , 0
 call akqymshefhhe
 mov eax , 0
 call azlvpnldpdww
 mov eax , 0
 leave
 ret
ptyfgaleruuq : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 112
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , rbx
 sub rax , 1
 mov QWORD PTR -112 [ rbp ] , rax
 mov QWORD PTR -144 [ rbp ] , rbx
 mov QWORD PTR -136 [ rbp ] , 0
 mov r14 , rbx
 mov r15d , 0
 mov eax , 16
 sub rax , 1
 add rax , rbx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 mov edx , 50
 mov rsi , rbx
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR [ rax ] , 65
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , 66
 mov rax , QWORD PTR -104 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , 67
 cmp rbx , 50
 jbe .L7
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L8
.L7 : 
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L8 : 
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
akqymshefhhe : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 movabs rax , 8027420523743700328
 mov QWORD PTR -20 [ rbp ] , rax
 mov DWORD PTR -12 [ rbp ] , 1679844463
 mov DWORD PTR -24 [ rbp ] , 10
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -28 [ rbp ] , 0
 jmp .L11
.L14 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 movzx eax , BYTE PTR -20 [ rbp+rax ] 
 cmp al , 10
 jne .L12
 mov eax , DWORD PTR -28 [ rbp ] 
 cdqe
 mov BYTE PTR -20 [ rbp+rax ] , 0
 jmp .L13
.L12 : 
 add DWORD PTR -28 [ rbp ] , 1
.L11 : 
 mov eax , DWORD PTR -28 [ rbp ] 
 cmp eax , DWORD PTR -24 [ rbp ] 
 jle .L14
.L13 : 
 lea rax , -20 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 leave
 ret
azlvpnldpdww : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -24 [ rbp ] 
 lea rax , -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 movsd xmm1 , QWORD PTR -32 [ rbp ] 
 movsd xmm0 , QWORD PTR -24 [ rbp ] 
 mulsd xmm0 , xmm1
 movsd QWORD PTR -16 [ rbp ] , xmm0
 mov rax , QWORD PTR -16 [ rbp ] 
 movq xmm0 , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call vjzunlqqzsyj
 mov eax , 0
 call imgbghflolaf
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call skbqlucjwyob
 mov eax , 0
 leave
 ret
vjzunlqqzsyj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call memset @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
 .align 8
imgbghflolaf : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L6
.L7 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L6 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L7
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 leave
 ret
skbqlucjwyob : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov QWORD PTR -136 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -112 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -104 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -96 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -88 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -80 [ rbp ] , rax
 lea rax , .LC5 [ rip ] 
 mov QWORD PTR -72 [ rbp ] , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 call rand @ PLT
 cdq
 shr edx , 30
 add eax , edx
 and eax , 3
 sub eax , edx
 mov DWORD PTR -116 [ rbp ] , eax
 mov eax , DWORD PTR -116 [ rbp ] 
 cdqe
 mov rdx , QWORD PTR -96 [ rbp+rax*8 ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -136 [ rbp ] 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call aulyksuwxtcw
 mov eax , 0
 call dqolmbfqphap
 mov eax , 0
 call axekkffjccge
 mov eax , 0
 leave
 ret
aulyksuwxtcw : 
 endbr64
 push rbp
 mov rbp , rsp
 mov esi , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 4
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 8
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov esi , 1
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 pop rbp
 ret
 .align 8
dqolmbfqphap : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov eax , DWORD PTR -12 [ rbp ] 
 pxor xmm1 , xmm1
 cvtsi2sd xmm1 , eax
 movsd xmm0 , QWORD PTR .LC6 [ rip ] 
 mulsd xmm1 , xmm0
 movq rax , xmm1
 movq xmm0 , rax
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L5
 call __stack_chk_fail @ PLT
.L5 : 
 leave
 ret
axekkffjccge : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 48
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov esi , 20
 lea rax , .LC8 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -32 [ rbp ] 
 mov edx , 20
 mov esi , 97
 mov rdi , rax
 call memset @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -32 [ rbp ] 
 mov esi , 20
 mov rdi , rax
 call fgets @ PLT
 mov DWORD PTR -36 [ rbp ] , 15
 mov rax , QWORD PTR stdin [ rip ] 
 mov ecx , DWORD PTR -36 [ rbp ] 
 mov edx , 20
 sub edx , ecx
 mov esi , edx
 lea rcx , -32 [ rbp ] 
 mov edx , DWORD PTR -36 [ rbp ] 
 movsx rdx , edx
 add rcx , rdx
 mov rdx , rax
 mov rdi , rcx
 call fgets @ PLT
 lea rax , -32 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
 .align 8
 .long 1413754136
 .long 1075388923
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call xztgjedozhvw
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edx , eax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov esi , edx
 mov rdi , rax
 call dtkbuuczzrnj
 mov eax , 0
 call fvszvmuqfdjj
 mov eax , 0
 leave
 ret
xztgjedozhvw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
.L7 : 
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call gets @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 jmp .L7
dtkbuuczzrnj : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 72
 mov QWORD PTR -72 [ rbp ] , rdi
 mov DWORD PTR -76 [ rbp ] , esi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 add eax , eax
 mov DWORD PTR -52 [ rbp ] , eax
 mov DWORD PTR -48 [ rbp ] , 0
 mov eax , DWORD PTR -76 [ rbp ] 
 imul eax , eax
 mov DWORD PTR -44 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 mov rcx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
fvszvmuqfdjj : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , -5
 mov DWORD PTR -24 [ rbp ] , 2
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 sub eax , DWORD PTR -28 [ rbp ] 
 sub eax , DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -16 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 cdq
 idiv DWORD PTR -28 [ rbp ] 
 mov edx , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 imul eax , edx
 mov DWORD PTR -12 [ rbp ] , eax
 mov eax , DWORD PTR -32 [ rbp ] 
 imul eax , DWORD PTR -28 [ rbp ] 
 cdq
 idiv DWORD PTR -24 [ rbp ] 
 mov DWORD PTR -8 [ rbp ] , eax
 mov DWORD PTR -4 [ rbp ] , 35
 mov esi , DWORD PTR -8 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov edx , DWORD PTR -16 [ rbp ] 
 mov eax , DWORD PTR -20 [ rbp ] 
 mov r8d , esi
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ratujvviahox
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call atof @ PLT
 pxor xmm1 , xmm1
 cvtsd2ss xmm1 , xmm0
 movd eax , xmm1
 movd xmm0 , eax
 call wgluyxdocdib
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 leave
 ret
ratujvviahox : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -12 [ rbp ] 
 mov eax , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
wgluyxdocdib : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 movss DWORD PTR -20 [ rbp ] , xmm0
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , -12 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 pxor xmm1 , xmm1
 cvtss2sd xmm1 , DWORD PTR -20 [ rbp ] 
 movq rdx , xmm1
 mov eax , DWORD PTR -12 [ rbp ] 
 movq xmm0 , rdx
 mov esi , eax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 1
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC6 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L8 : 
 cmp rsp , rdx
 je .L9
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L8
.L9 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L10
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L10 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call cmdmolbpalfx
 mov eax , 0
 call wlhksrtprwvo
 mov eax , 0
 call vawlugafkosd
 mov eax , 0
 leave
 ret
 .align 8
cmdmolbpalfx : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 104
 mov DWORD PTR -132 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 cmp DWORD PTR -132 [ rbp ] , 10
 jle .L4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 jmp .L5
.L4 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
.L5 : 
 cmp DWORD PTR -132 [ rbp ] , 49
 jg .L6
 mov DWORD PTR -132 [ rbp ] , 50
.L6 : 
 mov eax , DWORD PTR -132 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -128 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -120 [ rbp ] , rax
 lea rdx , -112 [ rbp ] 
 mov rax , QWORD PTR -120 [ rbp ] 
 lea rcx , .LC2 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L10
 call __stack_chk_fail @ PLT
.L10 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
wlhksrtprwvo : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov eax , DWORD PTR -76 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 movsx rdx , eax
 mov r12 , rdx
 mov r13d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
vawlugafkosd : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -112 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L17
 call __stack_chk_fail @ PLT
.L17 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 16
 mov rdx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rsi , rdx
 mov rdi , rax
 call gmxvduowojve
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call qlmehsvhicmv
 mov eax , 0
 call xgwrjmbefokw
 mov eax , 0
 leave
 ret
gmxvduowojve : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 88
 mov QWORD PTR -88 [ rbp ] , rdi
 mov QWORD PTR -96 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 lea rax , -80 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -80 [ rbp ] 
 lea rcx , [ rdx+rax ] 
 mov rax , QWORD PTR -96 [ rbp ] 
 mov rdx , rbx
 mov rsi , rax
 mov rdi , rcx
 call memcpy @ PLT
 lea rax , -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
qlmehsvhicmv : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L6 : 
 cmp rsp , rdx
 je .L7
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L6
.L7 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L8
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L8 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC3 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC4 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC5 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
xgwrjmbefokw : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -10 [ rbp ] 
 mov esi , 2
 mov rdi , rax
 call fgets @ PLT
 lea rax , -10 [ rbp ] 
 mov rdx , rax
 mov esi , 2
 lea rax , .LC7 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bzvutoqtovci
 mov eax , 0
 call sdacdnszrrgx
 mov eax , 0
 leave
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L7
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L8
.L7 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L8 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
bzvutoqtovci : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 88
 mov QWORD PTR -120 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 lea rax , -100 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -96 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -96 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , -368140053
 shr rdx , 32
 add edx , eax
 sar edx , 6
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -92 [ rbp ] , edx
 mov edx , DWORD PTR -92 [ rbp ] 
 imul edx , edx , 70
 sub eax , edx
 mov DWORD PTR -92 [ rbp ] , eax
 call rand @ PLT
 mov edx , eax
 movsx rax , edx
 imul rax , rax , 1717986919
 shr rax , 32
 sar eax , 2
 mov ecx , edx
 sar ecx , 31
 sub eax , ecx
 mov DWORD PTR -88 [ rbp ] , eax
 mov ecx , DWORD PTR -88 [ rbp ] 
 mov eax , ecx
 sal eax , 2
 add eax , ecx
 add eax , eax
 sub edx , eax
 mov DWORD PTR -88 [ rbp ] , edx
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 add eax , edx
 mov DWORD PTR -84 [ rbp ] , eax
 mov eax , DWORD PTR -96 [ rbp ] 
 sub eax , DWORD PTR -92 [ rbp ] 
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -80 [ rbp ] , eax
 mov edx , DWORD PTR -96 [ rbp ] 
 mov eax , DWORD PTR -92 [ rbp ] 
 add eax , edx
 sub eax , DWORD PTR -88 [ rbp ] 
 mov DWORD PTR -76 [ rbp ] , eax
 mov rax , QWORD PTR -120 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 mov rdx , QWORD PTR -120 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC0 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
sdacdnszrrgx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L16
.L17 : 
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L16 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L17
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L18
 call __stack_chk_fail @ PLT
.L18 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ukzfhpapzzcz
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cnixrukgtgzd
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call dngpdrewrcfr
 mov eax , 0
 leave
 ret
ukzfhpapzzcz : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -68 [ rbp ] 
 lea rax , -72 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L5 : 
 call getchar @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , 10
 je .L4
 mov eax , DWORD PTR -72 [ rbp ] 
 cmp eax , -1
 jne .L5
.L4 : 
 mov edx , DWORD PTR -72 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 imul eax , edx
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -64 [ rbp ] 
 mov esi , 50
 mov rdi , rax
 call fgets @ PLT
 lea rax , -64 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 leave
 ret
cnixrukgtgzd : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 104
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rdx , -84 [ rbp ] 
 lea rax , -88 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov edx , DWORD PTR -88 [ rbp ] 
 mov eax , DWORD PTR -84 [ rbp ] 
 add eax , edx
 mov esi , eax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
.L10 : 
 call getchar @ PLT
 mov DWORD PTR -88 [ rbp ] , eax
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , 10
 je .L9
 mov eax , DWORD PTR -88 [ rbp ] 
 cmp eax , -1
 jne .L10
.L9 : 
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rcx , QWORD PTR [ rax ] 
 mov rbx , QWORD PTR 8 [ rax ] 
 mov QWORD PTR -80 [ rbp ] , rcx
 mov QWORD PTR -72 [ rbp ] , rbx
 mov rcx , QWORD PTR 16 [ rax ] 
 mov rbx , QWORD PTR 24 [ rax ] 
 mov QWORD PTR -64 [ rbp ] , rcx
 mov QWORD PTR -56 [ rbp ] , rbx
 mov rcx , QWORD PTR 32 [ rax ] 
 mov rbx , QWORD PTR 40 [ rax ] 
 mov QWORD PTR -48 [ rbp ] , rcx
 mov QWORD PTR -40 [ rbp ] , rbx
 movzx eax , WORD PTR 48 [ rax ] 
 mov WORD PTR -32 [ rbp ] , ax
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
dngpdrewrcfr : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 288
 mov QWORD PTR -280 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -280 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -280 [ rbp ] 
 lea rax , -272 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 lea rax , -272 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call uwiupxnrjawx
 mov eax , 0
 call uhixokfdnayx
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call tznaotjevgma
 mov eax , 0
 leave
 ret
uwiupxnrjawx : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 40
 mov QWORD PTR -40 [ rbp ] , rdi
 mov DWORD PTR -28 [ rbp ] , 10
 mov DWORD PTR -24 [ rbp ] , 20
 mov edx , DWORD PTR -28 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 add eax , edx
 mov DWORD PTR -20 [ rbp ] , eax
 mov DWORD PTR -32 [ rbp ] , 0
 jmp .L4
.L5 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rdx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov edi , eax
 call putchar @ PLT
 add DWORD PTR -32 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -32 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -40 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jb .L5
 mov edi , 10
 call putchar @ PLT
 nop
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
 .align 8
uhixokfdnayx : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 64
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -52 [ rbp ] , 4
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov DWORD PTR -56 [ rbp ] , 0
 jmp .L7
.L8 : 
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -48 [ rbp ] 
 mov esi , 40
 mov rdi , rax
 call fgets @ PLT
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 add DWORD PTR -56 [ rbp ] , 1
.L7 : 
 mov eax , DWORD PTR -56 [ rbp ] 
 cmp eax , DWORD PTR -52 [ rbp ] 
 jl .L8
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
tznaotjevgma : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 56
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -72 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L11 : 
 cmp rsp , rdx
 je .L12
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L11
.L12 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L13
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L13 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC7 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR [ rax ] , dl
 lea rax , .LC8 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 1 [ rax ] , dl
 lea rax , .LC9 [ rip ] 
 mov edx , eax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov BYTE PTR 2 [ rax ] , dl
 mov rdx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -64 [ rbp ] 
 lea rcx , .LC10 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rsi , rax
 lea rax , .LC11 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L14
 call __stack_chk_fail @ PLT
.L14 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call bimvvmxtypwo
 mov eax , 0
 call qrojfamadtkc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call cmgszqbjaihw
 mov eax , 0
 leave
 ret
 .align 8
bimvvmxtypwo : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -64 [ rbp ] , 4
 mov DWORD PTR -68 [ rbp ] , 0
 jmp .L4
.L5 : 
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -58 [ rbp ] 
 mov esi , 10
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -58 [ rbp ] 
 lea rax , -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 add DWORD PTR -68 [ rbp ] , 1
.L4 : 
 mov eax , DWORD PTR -68 [ rbp ] 
 cmp eax , DWORD PTR -64 [ rbp ] 
 jl .L5
 lea rax , -48 [ rbp ] 
 mov rsi , rax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L6
 call __stack_chk_fail @ PLT
.L6 : 
 leave
 ret
qrojfamadtkc : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
cmgszqbjaihw : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 64
 mov QWORD PTR -72 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , .LC7 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 mov rax , QWORD PTR -72 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rbx , rax
 mov rax , QWORD PTR -64 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 add rax , rbx
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 mov QWORD PTR -96 [ rbp ] , rax
 mov QWORD PTR -88 [ rbp ] , 0
 mov r14 , rax
 mov r15d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L9 : 
 cmp rsp , rdx
 je .L10
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L9
.L10 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L11
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L11 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rdx , QWORD PTR -72 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcat @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L12
 call __stack_chk_fail @ PLT
.L12 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call akuyhosvenqa
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ckyojnaisxvc
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call xdvjemaeqgxg
 mov eax , 0
 leave
 ret
akuyhosvenqa : 
 endbr64
 push rbp
 mov rbp , rsp
 add rsp , -128
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC0 [ rip ] 
 mov BYTE PTR -117 [ rbp ] , al
 lea rax , .LC1 [ rip ] 
 mov BYTE PTR -116 [ rbp ] , al
 lea rax , .LC2 [ rip ] 
 mov BYTE PTR -115 [ rbp ] , al
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -112 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 lea rdx , -112 [ rbp ] 
 lea rax , -117 [ rbp ] 
 lea rcx , .LC3 [ rip ] 
 mov rsi , rcx
 mov rdi , rax
 mov eax , 0
 call sprintf @ PLT
 lea rax , -117 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
ckyojnaisxvc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 14
 jbe .L6
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L7 : 
 cmp rsp , rdx
 je .L8
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L7
.L8 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L9
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L9 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L12
.L6 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -70 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -70 [ rbp ] 
 mov rsi , rax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L12 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
xdvjemaeqgxg : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call eajgjfglengn
 mov eax , 0
 call lmhhgfjvthli
 mov eax , 0
 call gieykwwdqsih
 mov eax , 0
 leave
 ret
eajgjfglengn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov QWORD PTR -8 [ rbp ] , rdi
 mov rax , QWORD PTR -8 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 lea rdx , -1 [ rax ] 
 mov rax , QWORD PTR -8 [ rbp ] 
 add rax , rdx
 movzx eax , BYTE PTR [ rax ] 
 movsx eax , al
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 leave
 ret
lmhhgfjvthli : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rdx , -20 [ rbp ] 
 lea rax , -24 [ rbp ] 
 mov rsi , rax
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 mov DWORD PTR -16 [ rbp ] , 1
 jmp .L5
.L8 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -20 [ rbp ] 
 cdq
 idiv DWORD PTR -16 [ rbp ] 
 mov eax , edx
 test eax , eax
 jne .L6
 mov eax , DWORD PTR -16 [ rbp ] 
 mov DWORD PTR -12 [ rbp ] , eax
.L6 : 
 add DWORD PTR -16 [ rbp ] , 1
.L5 : 
 mov eax , DWORD PTR -24 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jg .L7
 mov eax , DWORD PTR -20 [ rbp ] 
 cmp DWORD PTR -16 [ rbp ] , eax
 jle .L8
.L7 : 
 mov edx , DWORD PTR -20 [ rbp ] 
 mov eax , DWORD PTR -24 [ rbp ] 
 mov ecx , DWORD PTR -12 [ rbp ] 
 mov esi , eax
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
gieykwwdqsih : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 32
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov DWORD PTR -32 [ rbp ] , 4
 mov DWORD PTR -28 [ rbp ] , 7
 mov edx , DWORD PTR -32 [ rbp ] 
 mov eax , DWORD PTR -28 [ rbp ] 
 add eax , edx
 mov DWORD PTR -24 [ rbp ] , eax
 mov eax , DWORD PTR -24 [ rbp ] 
 mov esi , eax
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call __isoc99_scanf @ PLT
 lea rax , -18 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L11
 call __stack_chk_fail @ PLT
.L11 : 
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov eax , 0
 call ytzrdzzbhhhn
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call bsuoauorosax
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ocvktgbkiibc
 mov eax , 0
 leave
 ret
ytzrdzzbhhhn : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 80
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 mov QWORD PTR -18 [ rbp ] , 0
 mov WORD PTR -10 [ rbp ] , 0
 lea rax , .LC0 [ rip ] 
 mov QWORD PTR -64 [ rbp ] , rax
 lea rax , .LC1 [ rip ] 
 mov QWORD PTR -56 [ rbp ] , rax
 lea rax , .LC2 [ rip ] 
 mov QWORD PTR -48 [ rbp ] , rax
 lea rax , .LC3 [ rip ] 
 mov QWORD PTR -40 [ rbp ] , rax
 lea rax , .LC4 [ rip ] 
 mov QWORD PTR -32 [ rbp ] , rax
 lea rax , -72 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1717986919
 shr rdx , 32
 sar edx
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov ecx , DWORD PTR -68 [ rbp ] 
 mov edx , ecx
 sal edx , 2
 add edx , ecx
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 mov eax , DWORD PTR -68 [ rbp ] 
 cdqe
 mov rcx , QWORD PTR -64 [ rbp+rax*8 ] 
 lea rax , -18 [ rbp ] 
 mov edx , 10
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 lea rax , -18 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -18 [ rbp ] 
 mov esi , 256
 mov rdi , rax
 call fgets @ PLT
 nop
 mov rax , QWORD PTR -8 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L4
 call __stack_chk_fail @ PLT
.L4 : 
 leave
 ret
bsuoauorosax : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 112
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -8 [ rbp ] , rax
 xor eax , eax
 lea rax , -96 [ rbp ] 
 mov DWORD PTR [ rax ] , 2112115
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 80
 ja .L6
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -96 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -96 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov eax , 0
 jmp .L8
.L6 : 
 mov eax , 0
.L8 : 
 mov rdx , QWORD PTR -8 [ rbp ] 
 sub rdx , QWORD PTR fs : 40
 je .L9
 call __stack_chk_fail @ PLT
.L9 : 
 leave
 ret
ocvktgbkiibc : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r13
 push r12
 push rbx
 sub rsp , 72
 mov QWORD PTR -104 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -56 [ rbp ] , rax
 xor eax , eax
 movabs rax , 2334956331019232596
 mov QWORD PTR -71 [ rbp ] , rax
 mov DWORD PTR -63 [ rbp ] , 1868785011
 mov WORD PTR -59 [ rbp ] , 25710
 mov BYTE PTR -57 [ rbp ] , 0
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rax , 15
 jbe .L11
 mov rax , rsp
 mov rbx , rax
 mov rax , QWORD PTR -104 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 sub rdx , 1
 mov QWORD PTR -88 [ rbp ] , rdx
 mov r14 , rax
 mov r15d , 0
 mov r12 , rax
 mov r13d , 0
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov ecx , 16
 mov edx , 0
 div rcx
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L12 : 
 cmp rsp , rdx
 je .L13
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L12
.L13 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L14
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L14 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -80 [ rbp ] , rax
 mov rdx , QWORD PTR -104 [ rbp ] 
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -80 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 jmp .L17
.L11 : 
 mov rdx , QWORD PTR -104 [ rbp ] 
 lea rax , -71 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 lea rax , -71 [ rbp ] 
 mov rsi , rax
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
.L17 : 
 nop
 mov rax , QWORD PTR -56 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L16
 call __stack_chk_fail @ PLT
.L16 : 
 lea rsp , -40 [ rbp ] 
 pop rbx
 pop r12
 pop r13
 pop r14
 pop r15
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label1__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 24
 mov DWORD PTR -20 [ rbp ] , edi
 mov QWORD PTR -32 [ rbp ] , rsi
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 16
 mov rbx , QWORD PTR [ rax ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov rsi , rbx
 mov edi , eax
 call vcelpqujibys
 mov rax , QWORD PTR -32 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call ajwknuvsqpod
 mov eax , 0
 call agfrdqbfvanm
 mov eax , 0
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
vcelpqujibys : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 56
 mov DWORD PTR -52 [ rbp ] , edi
 mov QWORD PTR -64 [ rbp ] , rsi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -52 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -40 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L4 : 
 cmp rsp , rdx
 je .L5
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L4
.L5 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L6
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L6 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -32 [ rbp ] , rax
 mov rdx , QWORD PTR -64 [ rbp ] 
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rdx
 mov rdi , rax
 call strcpy @ PLT
 mov rax , QWORD PTR -32 [ rbp ] 
 mov rsi , rax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L7
 call __stack_chk_fail @ PLT
.L7 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
ajwknuvsqpod : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L9
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L9 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L13
 call __stack_chk_fail @ PLT
.L13 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
agfrdqbfvanm : 
 endbr64
 push rbp
 mov rbp , rsp
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC3 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC4 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC5 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 lea rax , .LC6 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 nop
 pop rbp
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

__label0__ main : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 mov QWORD PTR -16 [ rbp ] , rsi
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov rdi , rax
 call myyizuwnrnwl
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call hnyfapyzapvb
 mov rax , QWORD PTR -16 [ rbp ] 
 add rax , 8
 mov rax , QWORD PTR [ rax ] 
 mov edx , 10
 mov esi , 0
 mov rdi , rax
 call strtol @ PLT
 mov edi , eax
 call uygocbwhkdss
 mov eax , 0
 leave
 ret
myyizuwnrnwl : 
 endbr64
 push rbp
 mov rbp , rsp
 push r15
 push r14
 push r12
 push rbx
 sub rsp , 80
 mov QWORD PTR -88 [ rbp ] , rdi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -40 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov r12 , rax
 lea rax , -76 [ rbp ] 
 mov rdi , rax
 mov eax , 0
 call time @ PLT
 mov edi , eax
 call srand @ PLT
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -68 [ rbp ] , edx
 mov edx , DWORD PTR -68 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -68 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -64 [ rbp ] , edx
 mov edx , DWORD PTR -64 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -64 [ rbp ] , eax
 call rand @ PLT
 movsx rdx , eax
 imul rdx , rdx , 1374389535
 shr rdx , 32
 sar edx , 4
 mov ecx , eax
 sar ecx , 31
 sub edx , ecx
 mov DWORD PTR -60 [ rbp ] , edx
 mov edx , DWORD PTR -60 [ rbp ] 
 imul edx , edx , 50
 sub eax , edx
 mov DWORD PTR -60 [ rbp ] , eax
 mov ecx , DWORD PTR -60 [ rbp ] 
 mov edx , DWORD PTR -64 [ rbp ] 
 mov eax , DWORD PTR -68 [ rbp ] 
 mov esi , eax
 lea rax , .LC0 [ rip ] 
 mov rdi , rax
 mov eax , 0
 call printf @ PLT
 mov edx , DWORD PTR -68 [ rbp ] 
 mov eax , DWORD PTR -64 [ rbp ] 
 add edx , eax
 mov eax , DWORD PTR -60 [ rbp ] 
 add eax , edx
 mov DWORD PTR -72 [ rbp ] , eax
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rbx , eax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 cmp rbx , rax
 jnb .L4
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov DWORD PTR -72 [ rbp ] , eax
.L4 : 
 mov eax , DWORD PTR -72 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -56 [ rbp ] , rdx
 movsx rdx , eax
 mov QWORD PTR -112 [ rbp ] , rdx
 mov QWORD PTR -104 [ rbp ] , 0
 movsx rdx , eax
 mov r14 , rdx
 mov r15d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L5 : 
 cmp rsp , rdx
 je .L6
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L5
.L6 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L7
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L7 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -48 [ rbp ] , rax
 mov rax , QWORD PTR -88 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 mov rcx , QWORD PTR -88 [ rbp ] 
 mov rax , QWORD PTR -48 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call strncpy @ PLT
 mov rsp , r12
 nop
 mov rax , QWORD PTR -40 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L8
 call __stack_chk_fail @ PLT
.L8 : 
 lea rsp , -32 [ rbp ] 
 pop rbx
 pop r12
 pop r14
 pop r15
 pop rbp
 ret
hnyfapyzapvb : 
 endbr64
 push rbp
 mov rbp , rsp
 push rbx
 sub rsp , 152
 mov DWORD PTR -148 [ rbp ] , edi
 mov rax , QWORD PTR fs : 40
 mov QWORD PTR -24 [ rbp ] , rax
 xor eax , eax
 mov rax , rsp
 mov rbx , rax
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 sub rdx , 1
 mov QWORD PTR -144 [ rbp ] , rdx
 movsx rdx , eax
 mov r10 , rdx
 mov r11d , 0
 movsx rdx , eax
 mov r8 , rdx
 mov r9d , 0
 cdqe
 mov edx , 16
 sub rdx , 1
 add rax , rdx
 mov esi , 16
 mov edx , 0
 div rsi
 imul rax , rax , 16
 mov rcx , rax
 and rcx , -4096
 mov rdx , rsp
 sub rdx , rcx
.L10 : 
 cmp rsp , rdx
 je .L11
 sub rsp , 4096
 or QWORD PTR 4088 [ rsp ] , 0
 jmp .L10
.L11 : 
 mov rdx , rax
 and edx , 4095
 sub rsp , rdx
 mov rdx , rax
 and edx , 4095
 test rdx , rdx
 je .L12
 and eax , 4095
 sub rax , 8
 add rax , rsp
 or QWORD PTR [ rax ] , 0
.L12 : 
 mov rax , rsp
 add rax , 0
 mov QWORD PTR -136 [ rbp ] , rax
 mov rdx , QWORD PTR stdin [ rip ] 
 lea rax , -128 [ rbp ] 
 mov esi , 100
 mov rdi , rax
 call fgets @ PLT
 mov eax , DWORD PTR -148 [ rbp ] 
 cmp eax , 99
 ja .L13
 mov eax , DWORD PTR -148 [ rbp ] 
 movsx rdx , eax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
 jmp .L14
.L13 : 
 lea rax , -128 [ rbp ] 
 mov rdi , rax
 call strlen @ PLT
 mov rdx , rax
 lea rcx , -128 [ rbp ] 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rsi , rcx
 mov rdi , rax
 call memcpy @ PLT
.L14 : 
 mov rax , QWORD PTR -136 [ rbp ] 
 mov rdi , rax
 call puts @ PLT
 mov rsp , rbx
 nop
 mov rax , QWORD PTR -24 [ rbp ] 
 sub rax , QWORD PTR fs : 40
 je .L15
 call __stack_chk_fail @ PLT
.L15 : 
 mov rbx , QWORD PTR -8 [ rbp ] 
 leave
 ret
uygocbwhkdss : 
 endbr64
 push rbp
 mov rbp , rsp
 sub rsp , 16
 mov DWORD PTR -4 [ rbp ] , edi
 cmp DWORD PTR -4 [ rbp ] , 10
 jle .L17
 lea rax , .LC1 [ rip ] 
 mov rdi , rax
 call puts @ PLT
 jmp .L19
.L17 : 
 lea rax , .LC2 [ rip ] 
 mov rdi , rax
 call puts @ PLT
.L19 : 
 nop
 leave
 ret
 .align 8
 .long 1f - 0f
 .long 4f - 1f
 .long 5
0 : 
1 : 
 .align 8
 .long 0xc0000002
 .long 3f - 2f
2 : 
 .long 0x3
3 : 
 .align 8
4 : 

